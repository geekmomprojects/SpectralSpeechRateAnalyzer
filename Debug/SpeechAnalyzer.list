
SpeechAnalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d258  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000134d4  0800d450  0800d450  0001d450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020924  08020924  000401e8  2**0
                  CONTENTS
  4 .ARM          00000008  08020924  08020924  00030924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802092c  0802092c  000401e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802092c  0802092c  0003092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020930  08020930  00030930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08020934  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c30  200001e8  08020b1c  000401e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e18  08020b1c  00044e18  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000401e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000257ca  00000000  00000000  0004021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004875  00000000  00000000  000659e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  0006a260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  0006b990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002caa2  00000000  00000000  0006cfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8da  00000000  00000000  00099a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001155f0  00000000  00000000  000b631c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  001cb90c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007190  00000000  00000000  001cb9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00004004  00000000  00000000  001d2b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001e8 	.word	0x200001e8
 8000214:	00000000 	.word	0x00000000
 8000218:	0800d438 	.word	0x0800d438

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001ec 	.word	0x200001ec
 8000234:	0800d438 	.word	0x0800d438

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	; 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2uiz>:
 8000b70:	004a      	lsls	r2, r1, #1
 8000b72:	d211      	bcs.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d211      	bcs.n	8000b9e <__aeabi_d2uiz+0x2e>
 8000b7a:	d50d      	bpl.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d40e      	bmi.n	8000ba4 <__aeabi_d2uiz+0x34>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_d2uiz+0x3a>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b980 	b.w	8000ec8 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000be6:	4604      	mov	r4, r0
 8000be8:	4688      	mov	r8, r1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f040 8084 	bne.w	8000cf8 <__udivmoddi4+0x118>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d943      	bls.n	8000c7e <__udivmoddi4+0x9e>
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	b142      	cbz	r2, 8000c0e <__udivmoddi4+0x2e>
 8000bfc:	f1c2 0020 	rsb	r0, r2, #32
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4097      	lsls	r7, r2
 8000c04:	fa24 f000 	lsr.w	r0, r4, r0
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea40 0801 	orr.w	r8, r0, r1
 8000c0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c12:	0c23      	lsrs	r3, r4, #16
 8000c14:	fa1f fe87 	uxth.w	lr, r7
 8000c18:	fbb8 f6fc 	udiv	r6, r8, ip
 8000c1c:	fb0c 8116 	mls	r1, ip, r6, r8
 8000c20:	fb06 f00e 	mul.w	r0, r6, lr
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d907      	bls.n	8000c3c <__udivmoddi4+0x5c>
 8000c2c:	18fb      	adds	r3, r7, r3
 8000c2e:	f106 31ff 	add.w	r1, r6, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x5a>
 8000c34:	4298      	cmp	r0, r3
 8000c36:	f200 8131 	bhi.w	8000e9c <__udivmoddi4+0x2bc>
 8000c3a:	460e      	mov	r6, r1
 8000c3c:	1a19      	subs	r1, r3, r0
 8000c3e:	b2a3      	uxth	r3, r4
 8000c40:	fbb1 f0fc 	udiv	r0, r1, ip
 8000c44:	fb0c 1110 	mls	r1, ip, r0, r1
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0x84>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x82>
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	f200 811a 	bhi.w	8000e96 <__udivmoddi4+0x2b6>
 8000c62:	4618      	mov	r0, r3
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0x98>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xa2>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d152      	bne.n	8000d30 <__udivmoddi4+0x150>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	0c21      	lsrs	r1, r4, #16
 8000c98:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9c:	fb0e 301c 	mls	r0, lr, ip, r3
 8000ca0:	fb08 f90c 	mul.w	r9, r8, ip
 8000ca4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ca8:	4589      	cmp	r9, r1
 8000caa:	d90b      	bls.n	8000cc4 <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000cb2:	bf2c      	ite	cs
 8000cb4:	2001      	movcs	r0, #1
 8000cb6:	2000      	movcc	r0, #0
 8000cb8:	4589      	cmp	r9, r1
 8000cba:	d902      	bls.n	8000cc2 <__udivmoddi4+0xe2>
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	f000 80f0 	beq.w	8000ea2 <__udivmoddi4+0x2c2>
 8000cc2:	469c      	mov	ip, r3
 8000cc4:	eba1 0109 	sub.w	r1, r1, r9
 8000cc8:	b2a3      	uxth	r3, r4
 8000cca:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cce:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd2:	fb08 f800 	mul.w	r8, r8, r0
 8000cd6:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cda:	45a0      	cmp	r8, r4
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x10e>
 8000cde:	193c      	adds	r4, r7, r4
 8000ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce4:	d202      	bcs.n	8000cec <__udivmoddi4+0x10c>
 8000ce6:	45a0      	cmp	r8, r4
 8000ce8:	f200 80d2 	bhi.w	8000e90 <__udivmoddi4+0x2b0>
 8000cec:	4618      	mov	r0, r3
 8000cee:	eba4 0408 	sub.w	r4, r4, r8
 8000cf2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf6:	e7ba      	b.n	8000c6e <__udivmoddi4+0x8e>
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x130>
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	f000 80be 	beq.w	8000e7e <__udivmoddi4+0x29e>
 8000d02:	2600      	movs	r6, #0
 8000d04:	e9c5 0100 	strd	r0, r1, [r5]
 8000d08:	4630      	mov	r0, r6
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d10:	fab3 f683 	clz	r6, r3
 8000d14:	2e00      	cmp	r6, #0
 8000d16:	d14d      	bne.n	8000db4 <__udivmoddi4+0x1d4>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	f0c0 80b3 	bcc.w	8000e84 <__udivmoddi4+0x2a4>
 8000d1e:	4282      	cmp	r2, r0
 8000d20:	f240 80b0 	bls.w	8000e84 <__udivmoddi4+0x2a4>
 8000d24:	4630      	mov	r0, r6
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0a6      	beq.n	8000c78 <__udivmoddi4+0x98>
 8000d2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000d2e:	e7a3      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d30:	4097      	lsls	r7, r2
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	fa24 f303 	lsr.w	r3, r4, r3
 8000d44:	fa1f f887 	uxth.w	r8, r7
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	4303      	orrs	r3, r0
 8000d4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d50:	0c1e      	lsrs	r6, r3, #16
 8000d52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d56:	fb00 fc08 	mul.w	ip, r0, r8
 8000d5a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8000d5e:	458c      	cmp	ip, r1
 8000d60:	d90e      	bls.n	8000d80 <__udivmoddi4+0x1a0>
 8000d62:	1879      	adds	r1, r7, r1
 8000d64:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d68:	bf2c      	ite	cs
 8000d6a:	f04f 0901 	movcs.w	r9, #1
 8000d6e:	f04f 0900 	movcc.w	r9, #0
 8000d72:	458c      	cmp	ip, r1
 8000d74:	d903      	bls.n	8000d7e <__udivmoddi4+0x19e>
 8000d76:	f1b9 0f00 	cmp.w	r9, #0
 8000d7a:	f000 8096 	beq.w	8000eaa <__udivmoddi4+0x2ca>
 8000d7e:	4630      	mov	r0, r6
 8000d80:	eba1 010c 	sub.w	r1, r1, ip
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d8a:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d8e:	fb06 fc08 	mul.w	ip, r6, r8
 8000d92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d96:	458c      	cmp	ip, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1ca>
 8000d9a:	1879      	adds	r1, r7, r1
 8000d9c:	f106 33ff 	add.w	r3, r6, #4294967295
 8000da0:	d202      	bcs.n	8000da8 <__udivmoddi4+0x1c8>
 8000da2:	458c      	cmp	ip, r1
 8000da4:	f200 8088 	bhi.w	8000eb8 <__udivmoddi4+0x2d8>
 8000da8:	461e      	mov	r6, r3
 8000daa:	eba1 030c 	sub.w	r3, r1, ip
 8000dae:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000db2:	e770      	b.n	8000c96 <__udivmoddi4+0xb6>
 8000db4:	f1c6 0720 	rsb	r7, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa02 fc06 	lsl.w	ip, r2, r6
 8000dc0:	fa01 fe06 	lsl.w	lr, r1, r6
 8000dc4:	40fa      	lsrs	r2, r7
 8000dc6:	fa20 f807 	lsr.w	r8, r0, r7
 8000dca:	40f9      	lsrs	r1, r7
 8000dcc:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd0:	4322      	orrs	r2, r4
 8000dd2:	ea48 040e 	orr.w	r4, r8, lr
 8000dd6:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa1f f982 	uxth.w	r9, r2
 8000de2:	fbb1 faf8 	udiv	sl, r1, r8
 8000de6:	fb08 111a 	mls	r1, r8, sl, r1
 8000dea:	fb0a f009 	mul.w	r0, sl, r9
 8000dee:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000df2:	4570      	cmp	r0, lr
 8000df4:	d90e      	bls.n	8000e14 <__udivmoddi4+0x234>
 8000df6:	eb12 0e0e 	adds.w	lr, r2, lr
 8000dfa:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000dfe:	bf2c      	ite	cs
 8000e00:	f04f 0b01 	movcs.w	fp, #1
 8000e04:	f04f 0b00 	movcc.w	fp, #0
 8000e08:	4570      	cmp	r0, lr
 8000e0a:	d902      	bls.n	8000e12 <__udivmoddi4+0x232>
 8000e0c:	f1bb 0f00 	cmp.w	fp, #0
 8000e10:	d04e      	beq.n	8000eb0 <__udivmoddi4+0x2d0>
 8000e12:	468a      	mov	sl, r1
 8000e14:	ebae 0e00 	sub.w	lr, lr, r0
 8000e18:	b2a4      	uxth	r4, r4
 8000e1a:	fbbe f0f8 	udiv	r0, lr, r8
 8000e1e:	fb08 ee10 	mls	lr, r8, r0, lr
 8000e22:	fb00 f909 	mul.w	r9, r0, r9
 8000e26:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8000e2a:	45f1      	cmp	r9, lr
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x25e>
 8000e2e:	eb12 0e0e 	adds.w	lr, r2, lr
 8000e32:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e36:	d201      	bcs.n	8000e3c <__udivmoddi4+0x25c>
 8000e38:	45f1      	cmp	r9, lr
 8000e3a:	d840      	bhi.n	8000ebe <__udivmoddi4+0x2de>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8000e42:	ebae 0e09 	sub.w	lr, lr, r9
 8000e46:	fba0 890c 	umull	r8, r9, r0, ip
 8000e4a:	45ce      	cmp	lr, r9
 8000e4c:	4641      	mov	r1, r8
 8000e4e:	464c      	mov	r4, r9
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0x278>
 8000e52:	d106      	bne.n	8000e62 <__udivmoddi4+0x282>
 8000e54:	4543      	cmp	r3, r8
 8000e56:	d204      	bcs.n	8000e62 <__udivmoddi4+0x282>
 8000e58:	3801      	subs	r0, #1
 8000e5a:	ebb8 010c 	subs.w	r1, r8, ip
 8000e5e:	eb69 0402 	sbc.w	r4, r9, r2
 8000e62:	b37d      	cbz	r5, 8000ec4 <__udivmoddi4+0x2e4>
 8000e64:	1a5a      	subs	r2, r3, r1
 8000e66:	eb6e 0e04 	sbc.w	lr, lr, r4
 8000e6a:	40f2      	lsrs	r2, r6
 8000e6c:	fa0e f707 	lsl.w	r7, lr, r7
 8000e70:	fa2e f306 	lsr.w	r3, lr, r6
 8000e74:	2600      	movs	r6, #0
 8000e76:	4317      	orrs	r7, r2
 8000e78:	e9c5 7300 	strd	r7, r3, [r5]
 8000e7c:	e6fc      	b.n	8000c78 <__udivmoddi4+0x98>
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e6f9      	b.n	8000c78 <__udivmoddi4+0x98>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	4688      	mov	r8, r1
 8000e8e:	e74a      	b.n	8000d26 <__udivmoddi4+0x146>
 8000e90:	3802      	subs	r0, #2
 8000e92:	443c      	add	r4, r7
 8000e94:	e72b      	b.n	8000cee <__udivmoddi4+0x10e>
 8000e96:	3802      	subs	r0, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x84>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	443b      	add	r3, r7
 8000ea0:	e6cc      	b.n	8000c3c <__udivmoddi4+0x5c>
 8000ea2:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea6:	4439      	add	r1, r7
 8000ea8:	e70c      	b.n	8000cc4 <__udivmoddi4+0xe4>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	4439      	add	r1, r7
 8000eae:	e767      	b.n	8000d80 <__udivmoddi4+0x1a0>
 8000eb0:	f1aa 0a02 	sub.w	sl, sl, #2
 8000eb4:	4496      	add	lr, r2
 8000eb6:	e7ad      	b.n	8000e14 <__udivmoddi4+0x234>
 8000eb8:	3e02      	subs	r6, #2
 8000eba:	4439      	add	r1, r7
 8000ebc:	e775      	b.n	8000daa <__udivmoddi4+0x1ca>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4496      	add	lr, r2
 8000ec2:	e7bc      	b.n	8000e3e <__udivmoddi4+0x25e>
 8000ec4:	462e      	mov	r6, r5
 8000ec6:	e6d7      	b.n	8000c78 <__udivmoddi4+0x98>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <MX_DFSDM1_Init+0xb8>)
 8000ed2:	4a2d      	ldr	r2, [pc, #180]	; (8000f88 <MX_DFSDM1_Init+0xbc>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <MX_DFSDM1_Init+0xb8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <MX_DFSDM1_Init+0xb8>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000ee2:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <MX_DFSDM1_Init+0xb8>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <MX_DFSDM1_Init+0xb8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <MX_DFSDM1_Init+0xb8>)
 8000ef0:	2240      	movs	r2, #64	; 0x40
 8000ef2:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 8;
 8000ef4:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <MX_DFSDM1_Init+0xb8>)
 8000ef6:	2208      	movs	r2, #8
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000efa:	4822      	ldr	r0, [pc, #136]	; (8000f84 <MX_DFSDM1_Init+0xb8>)
 8000efc:	f002 f816 	bl	8002f2c <HAL_DFSDM_FilterInit>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 8000f06:	f000 fef3 	bl	8001cf0 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f0c:	4a20      	ldr	r2, [pc, #128]	; (8000f90 <MX_DFSDM1_Init+0xc4>)
 8000f0e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f1c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f20:	2204      	movs	r2, #4
 8000f22:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f3e:	2204      	movs	r2, #4
 8000f40:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f56:	2202      	movs	r2, #2
 8000f58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000f5a:	480c      	ldr	r0, [pc, #48]	; (8000f8c <MX_DFSDM1_Init+0xc0>)
 8000f5c:	f001 ff12 	bl	8002d84 <HAL_DFSDM_ChannelInit>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000f66:	f000 fec3 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4909      	ldr	r1, [pc, #36]	; (8000f94 <MX_DFSDM1_Init+0xc8>)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_DFSDM1_Init+0xb8>)
 8000f70:	f002 f8b6 	bl	80030e0 <HAL_DFSDM_FilterConfigRegChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000f7a:	f000 feb9 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200005b0 	.word	0x200005b0
 8000f88:	40016100 	.word	0x40016100
 8000f8c:	20000578 	.word	0x20000578
 8000f90:	40016020 	.word	0x40016020
 8000f94:	00010002 	.word	0x00010002

08000f98 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0b0      	sub	sp, #192	; 0xc0
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb0:	f107 0318 	add.w	r3, r7, #24
 8000fb4:	2294      	movs	r2, #148	; 0x94
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f009 fb87 	bl	800a6cc <memset>
  if(DFSDM1_Init == 0)
 8000fbe:	4b66      	ldr	r3, [pc, #408]	; (8001158 <HAL_DFSDM_FilterMspInit+0x1c0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f040 8083 	bne.w	80010ce <HAL_DFSDM_FilterMspInit+0x136>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1AUDIO|RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 8000fc8:	4b64      	ldr	r3, [pc, #400]	; (800115c <HAL_DFSDM_FilterMspInit+0x1c4>)
 8000fca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_SYSCLK;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSI;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 8000fe6:	2330      	movs	r3, #48	; 0x30
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000fea:	2311      	movs	r3, #17
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000ff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	f107 0318 	add.w	r3, r7, #24
 8001000:	4618      	mov	r0, r3
 8001002:	f004 f9b1 	bl	8005368 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_DFSDM_FilterMspInit+0x78>
    {
      Error_Handler();
 800100c:	f000 fe70 	bl	8001cf0 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001010:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a52      	ldr	r2, [pc, #328]	; (8001160 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001018:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800101a:	4b51      	ldr	r3, [pc, #324]	; (8001160 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d10b      	bne.n	800103a <HAL_DFSDM_FilterMspInit+0xa2>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001022:	4b50      	ldr	r3, [pc, #320]	; (8001164 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001026:	4a4f      	ldr	r2, [pc, #316]	; (8001164 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8001028:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800102c:	6613      	str	r3, [r2, #96]	; 0x60
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8001030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <HAL_DFSDM_FilterMspInit+0x1cc>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a49      	ldr	r2, [pc, #292]	; (8001164 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b47      	ldr	r3, [pc, #284]	; (8001164 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001052:	f003 f983 	bl	800435c <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b43      	ldr	r3, [pc, #268]	; (8001164 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a42      	ldr	r2, [pc, #264]	; (8001164 <HAL_DFSDM_FilterMspInit+0x1cc>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b40      	ldr	r3, [pc, #256]	; (8001164 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PG7     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM_CLKOUT_Pin;
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001086:	2306      	movs	r3, #6
 8001088:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(DFSDM_CLKOUT_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001090:	4619      	mov	r1, r3
 8001092:	4835      	ldr	r0, [pc, #212]	; (8001168 <HAL_DFSDM_FilterMspInit+0x1d0>)
 8001094:	f002 fecc 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM_DATIN_Pin;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010b2:	2306      	movs	r3, #6
 80010b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(DFSDM_DATIN_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010bc:	4619      	mov	r1, r3
 80010be:	482b      	ldr	r0, [pc, #172]	; (800116c <HAL_DFSDM_FilterMspInit+0x1d4>)
 80010c0:	f002 feb6 	bl	8003e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <HAL_DFSDM_FilterMspInit+0x1c0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a23      	ldr	r2, [pc, #140]	; (8001158 <HAL_DFSDM_FilterMspInit+0x1c0>)
 80010cc:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a27      	ldr	r2, [pc, #156]	; (8001170 <HAL_DFSDM_FilterMspInit+0x1d8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d13a      	bne.n	800114e <HAL_DFSDM_FilterMspInit+0x1b6>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80010d8:	4b26      	ldr	r3, [pc, #152]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 80010da:	4a27      	ldr	r2, [pc, #156]	; (8001178 <HAL_DFSDM_FilterMspInit+0x1e0>)
 80010dc:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 80010e0:	2256      	movs	r2, #86	; 0x56
 80010e2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ea:	4b22      	ldr	r3, [pc, #136]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 80010f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010fc:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 8001100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001104:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 8001108:	2220      	movs	r2, #32
 800110a:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 800110e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001112:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001114:	4817      	ldr	r0, [pc, #92]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 8001116:	f002 fadd 	bl	80036d4 <HAL_DMA_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_DFSDM_FilterMspInit+0x18c>
    {
      Error_Handler();
 8001120:	f000 fde6 	bl	8001cf0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_dfsdm1_flt0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001124:	2110      	movs	r1, #16
 8001126:	4813      	ldr	r0, [pc, #76]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 8001128:	f002 fdb2 	bl	8003c90 <HAL_DMA_ConfigChannelAttributes>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_DFSDM_FilterMspInit+0x19e>
    {
      Error_Handler();
 8001132:	f000 fddd 	bl	8001cf0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_DFSDM_FilterMspInit+0x1dc>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800114e:	bf00      	nop
 8001150:	37c0      	adds	r7, #192	; 0xc0
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000208 	.word	0x20000208
 800115c:	00210800 	.word	0x00210800
 8001160:	20000204 	.word	0x20000204
 8001164:	40021000 	.word	0x40021000
 8001168:	42021800 	.word	0x42021800
 800116c:	42020400 	.word	0x42020400
 8001170:	40016100 	.word	0x40016100
 8001174:	20000604 	.word	0x20000604
 8001178:	40020044 	.word	0x40020044

0800117c <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b0b0      	sub	sp, #192	; 0xc0
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001194:	f107 0318 	add.w	r3, r7, #24
 8001198:	2294      	movs	r2, #148	; 0x94
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f009 fa95 	bl	800a6cc <memset>
  if(DFSDM1_Init == 0)
 80011a2:	4b4a      	ldr	r3, [pc, #296]	; (80012cc <HAL_DFSDM_ChannelMspInit+0x150>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 808b 	bne.w	80012c2 <HAL_DFSDM_ChannelMspInit+0x146>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1AUDIO|RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 80011ac:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <HAL_DFSDM_ChannelMspInit+0x154>)
 80011ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_SYSCLK;
 80011b6:	2304      	movs	r3, #4
 80011b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSI;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 80011c6:	2304      	movs	r3, #4
 80011c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 80011ca:	2330      	movs	r3, #48	; 0x30
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80011ce:	2311      	movs	r3, #17
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80011da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 f8bf 	bl	8005368 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_DFSDM_ChannelMspInit+0x78>
    {
      Error_Handler();
 80011f0:	f000 fd7e 	bl	8001cf0 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_DFSDM_ChannelMspInit+0x158>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a36      	ldr	r2, [pc, #216]	; (80012d4 <HAL_DFSDM_ChannelMspInit+0x158>)
 80011fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <HAL_DFSDM_ChannelMspInit+0x158>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d10b      	bne.n	800121e <HAL_DFSDM_ChannelMspInit+0xa2>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001206:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120a:	4a33      	ldr	r2, [pc, #204]	; (80012d8 <HAL_DFSDM_ChannelMspInit+0x15c>)
 800120c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001210:	6613      	str	r3, [r2, #96]	; 0x60
 8001212:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a2d      	ldr	r2, [pc, #180]	; (80012d8 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8001224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <HAL_DFSDM_ChannelMspInit+0x15c>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001236:	f003 f891 	bl	800435c <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <HAL_DFSDM_ChannelMspInit+0x15c>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a26      	ldr	r2, [pc, #152]	; (80012d8 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PG7     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM_CLKOUT_Pin;
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800126a:	2306      	movs	r3, #6
 800126c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(DFSDM_CLKOUT_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001274:	4619      	mov	r1, r3
 8001276:	4819      	ldr	r0, [pc, #100]	; (80012dc <HAL_DFSDM_ChannelMspInit+0x160>)
 8001278:	f002 fdda 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM_DATIN_Pin;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001296:	2306      	movs	r3, #6
 8001298:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(DFSDM_DATIN_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012a0:	4619      	mov	r1, r3
 80012a2:	480f      	ldr	r0, [pc, #60]	; (80012e0 <HAL_DFSDM_ChannelMspInit+0x164>)
 80012a4:	f002 fdc4 	bl	8003e30 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2066      	movs	r0, #102	; 0x66
 80012ae:	f001 fd34 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 80012b2:	2066      	movs	r0, #102	; 0x66
 80012b4:	f001 fd4b 	bl	8002d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <HAL_DFSDM_ChannelMspInit+0x150>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a03      	ldr	r2, [pc, #12]	; (80012cc <HAL_DFSDM_ChannelMspInit+0x150>)
 80012c0:	6013      	str	r3, [r2, #0]
  }
}
 80012c2:	bf00      	nop
 80012c4:	37c0      	adds	r7, #192	; 0xc0
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000208 	.word	0x20000208
 80012d0:	00210800 	.word	0x00210800
 80012d4:	20000204 	.word	0x20000204
 80012d8:	40021000 	.word	0x40021000
 80012dc:	42021800 	.word	0x42021800
 80012e0:	42020400 	.word	0x42020400

080012e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_DMA_Init+0x70>)
 80012ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ee:	4a19      	ldr	r2, [pc, #100]	; (8001354 <MX_DMA_Init+0x70>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6493      	str	r3, [r2, #72]	; 0x48
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_DMA_Init+0x70>)
 80012f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_DMA_Init+0x70>)
 8001304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <MX_DMA_Init+0x70>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6493      	str	r3, [r2, #72]	; 0x48
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_DMA_Init+0x70>)
 8001310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	201d      	movs	r0, #29
 8001320:	f001 fcfb 	bl	8002d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001324:	201d      	movs	r0, #29
 8001326:	f001 fd12 	bl	8002d4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	201e      	movs	r0, #30
 8001330:	f001 fcf3 	bl	8002d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001334:	201e      	movs	r0, #30
 8001336:	f001 fd0a 	bl	8002d4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 7, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2107      	movs	r1, #7
 800133e:	2020      	movs	r0, #32
 8001340:	f001 fceb 	bl	8002d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001344:	2020      	movs	r0, #32
 8001346:	f001 fd02 	bl	8002d4e <HAL_NVIC_EnableIRQ>

}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000

08001358 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <MX_GPIO_Init+0xd8>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <MX_GPIO_Init+0xd8>)
 8001374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <MX_GPIO_Init+0xd8>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8001386:	f002 ffe9 	bl	800435c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <MX_GPIO_Init+0xd8>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a28      	ldr	r2, [pc, #160]	; (8001430 <MX_GPIO_Init+0xd8>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <MX_GPIO_Init+0xd8>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <MX_GPIO_Init+0xd8>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a22      	ldr	r2, [pc, #136]	; (8001430 <MX_GPIO_Init+0xd8>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <MX_GPIO_Init+0xd8>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_GPIO_Init+0xd8>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <MX_GPIO_Init+0xd8>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_GPIO_Init+0xd8>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d8:	4816      	ldr	r0, [pc, #88]	; (8001434 <MX_GPIO_Init+0xdc>)
 80013da:	f002 fec1 	bl	8004160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80013de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	480f      	ldr	r0, [pc, #60]	; (8001434 <MX_GPIO_Init+0xdc>)
 80013f8:	f002 fd1a 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 80013fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <MX_GPIO_Init+0xe0>)
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	480a      	ldr	r0, [pc, #40]	; (800143c <MX_GPIO_Init+0xe4>)
 8001412:	f002 fd0d 	bl	8003e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 4, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2104      	movs	r1, #4
 800141a:	2018      	movs	r0, #24
 800141c:	f001 fc7d 	bl	8002d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001420:	2018      	movs	r0, #24
 8001422:	f001 fc94 	bl	8002d4e <HAL_NVIC_EnableIRQ>

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	42021800 	.word	0x42021800
 8001438:	10210000 	.word	0x10210000
 800143c:	42020800 	.word	0x42020800

08001440 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001444:	2000      	movs	r0, #0
 8001446:	f002 feef 	bl	8004228 <HAL_ICACHE_ConfigAssociativityMode>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001450:	f000 fc4e 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001454:	f002 ff08 	bl	8004268 <HAL_ICACHE_Enable>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800145e:	f000 fc47 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}

08001466 <DoFFT>:
	}
}
*/

#ifdef DO_FFT
void DoFFT(float32_t*	inBuff, float32_t*	outBuff, float32_t* powerBuff, arm_rfft_fast_instance_f32* handler) {
 8001466:	b580      	push	{r7, lr}
 8001468:	b084      	sub	sp, #16
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	603b      	str	r3, [r7, #0]
	// int16_t		i;
	// Do FFT
	arm_rfft_fast_f32(handler, inBuff, outBuff, 0);
 8001474:	2300      	movs	r3, #0
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	68f9      	ldr	r1, [r7, #12]
 800147a:	6838      	ldr	r0, [r7, #0]
 800147c:	f008 f8b4 	bl	80095e8 <arm_rfft_fast_f32>
	// Compute magnitude of the complex return values. powerBuff has half the number
	//  of elements of inBuff/outBuff
	arm_cmplx_mag_f32(outBuff, powerBuff, HALF_FFT_LENGTH);
 8001480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	68b8      	ldr	r0, [r7, #8]
 8001488:	f008 fc94 	bl	8009db4 <arm_cmplx_mag_f32>
	// Convert to DB
	//for (i = 0; i < HALF_FFT_LENGTH/2; i++) {
	//	powerBuff[i] = (20*log10(powerBuff[i]));  // TBD? Subract offset?
	//}
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <DecimateFFTData>:
// method used (total, max or average) to use to aggregate the data
// in each bin
// #define DECIMATE_WITH_TOTAL
//   #define DECIMATE_WITH_MAX
 #define DECIMATE_WITH_AVERAGE
uint16_t DecimateFFTData(float32_t *dataBuff, uint16_t* decimatedBuff, char* outBuff, uint16_t npoints, uint16_t nbins) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	807b      	strh	r3, [r7, #2]
	uint16_t 	i, j, binsize;
	float32_t 	metric;	// Either total or max
	char		*outBuffPtr;
	float32_t 	*dataBuffPtr;

	outBuffPtr = outBuff;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	61fb      	str	r3, [r7, #28]
	binsize = npoints/nbins;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	837b      	strh	r3, [r7, #26]
	for (i = 0; i < nbins; i++) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80014b4:	e04d      	b.n	8001552 <DecimateFFTData+0xbe>
		metric = 0;
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
		dataBuffPtr = dataBuff + i*binsize;
 80014bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014be:	8b7a      	ldrh	r2, [r7, #26]
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
		for (j =0; j < binsize; j++) {
 80014cc:	2300      	movs	r3, #0
 80014ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80014d0:	e00e      	b.n	80014f0 <DecimateFFTData+0x5c>
#if defined DECIMATE_WITH_TOTAL || defined DECIMATE_WITH_AVERAGE
			metric += dataBuffPtr[j];
 80014d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4413      	add	r3, r2
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	ed97 7a08 	vldr	s14, [r7, #32]
 80014e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e6:	edc7 7a08 	vstr	s15, [r7, #32]
		for (j =0; j < binsize; j++) {
 80014ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014ec:	3301      	adds	r3, #1
 80014ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80014f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014f2:	8b7b      	ldrh	r3, [r7, #26]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d3ec      	bcc.n	80014d2 <DecimateFFTData+0x3e>
				metric = dataBuffPtr[j];
			}
#endif
		}
#ifdef DECIMATE_WITH_AVERAGE
		metric /= binsize;
 80014f8:	8b7b      	ldrh	r3, [r7, #26]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001502:	edd7 6a08 	vldr	s13, [r7, #32]
 8001506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800150a:	edc7 7a08 	vstr	s15, [r7, #32]
#endif
		// Format data for UART
		decimatedBuff[i] = (uint16_t) (metric);
 800150e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	4413      	add	r3, r2
 8001516:	edd7 7a08 	vldr	s15, [r7, #32]
 800151a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	b292      	uxth	r2, r2
 8001524:	801a      	strh	r2, [r3, #0]
		sprintf(outBuffPtr, "%d:%12d\r\n",i,(uint16_t) metric);
 8001526:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001528:	edd7 7a08 	vldr	s15, [r7, #32]
 800152c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001530:	ee17 3a90 	vmov	r3, s15
 8001534:	b29b      	uxth	r3, r3
 8001536:	490d      	ldr	r1, [pc, #52]	; (800156c <DecimateFFTData+0xd8>)
 8001538:	69f8      	ldr	r0, [r7, #28]
 800153a:	f009 fd3b 	bl	800afb4 <siprintf>
		outBuffPtr += strlen(outBuffPtr);
 800153e:	69f8      	ldr	r0, [r7, #28]
 8001540:	f7fe fe7a 	bl	8000238 <strlen>
 8001544:	4602      	mov	r2, r0
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	4413      	add	r3, r2
 800154a:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < nbins; i++) {
 800154c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800154e:	3301      	adds	r3, #1
 8001550:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001552:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001554:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001556:	429a      	cmp	r2, r3
 8001558:	d3ad      	bcc.n	80014b6 <DecimateFFTData+0x22>
	}
	return outBuffPtr - outBuff; // return #characters in string to send
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	b29b      	uxth	r3, r3
}
 8001562:	4618      	mov	r0, r3
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	0800d450 	.word	0x0800d450

08001570 <getSamplingRate>:


// Returns the audio sampling frequency by the DFSDM, along with min, max frequencies shown
// and the width of a bin in Hz
float32_t	getSamplingRate(float32_t *fmin, float32_t *fmax, float32_t *fbin) {
 8001570:	b480      	push	{r7}
 8001572:	b08b      	sub	sp, #44	; 0x2c
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
	// Should probably be reading these values from various bits in DFSDM configuration registers,
	// but this way is much easier to finish in the limited time available
	const float32_t clockRate 	=	48000000;	// Audio clock rate
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <getSamplingRate+0xac>)
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t	foic 			= 	hdfsdm1_filter0.Init.FilterParam.Oversampling;
 8001580:	4b27      	ldr	r3, [pc, #156]	; (8001620 <getSamplingRate+0xb0>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158c:	edc7 7a08 	vstr	s15, [r7, #32]
	float32_t	integ 			= 	hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <getSamplingRate+0xb0>)
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800159c:	edc7 7a07 	vstr	s15, [r7, #28]
	float32_t	div				= 	hdfsdm1_channel1.Init.OutputClock.Divider;
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <getSamplingRate+0xb4>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ac:	edc7 7a06 	vstr	s15, [r7, #24]
	float32_t 	samplingRate 	= 	clockRate/(foic*integ*div);
 80015b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80015b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80015b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80015c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015cc:	edc7 7a05 	vstr	s15, [r7, #20]
	*fmin = 0;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
	*fmax = samplingRate/2;
 80015d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80015dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	edc3 7a00 	vstr	s15, [r3]
	*fbin = (fmax - fmin)/DECIMATED_LENGTH;
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	109b      	asrs	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da00      	bge.n	80015f8 <getSamplingRate+0x88>
 80015f6:	331f      	adds	r3, #31
 80015f8:	115b      	asrs	r3, r3, #5
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	edc3 7a00 	vstr	s15, [r3]
	return samplingRate;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	ee07 3a90 	vmov	s15, r3
}
 800160e:	eeb0 0a67 	vmov.f32	s0, s15
 8001612:	372c      	adds	r7, #44	; 0x2c
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	4c371b00 	.word	0x4c371b00
 8001620:	200005b0 	.word	0x200005b0
 8001624:	20000578 	.word	0x20000578

08001628 <plotFFTData>:

#define NUM_BINS	32
#define LED_COLUMN_HEIGHT	8
#define MAX_COLUMN_VAL		LED_COLUMN_HEIGHT - 1
// Plots a spectrogram to leds
void plotFFTData(uint16_t *dataBuff, uint16_t numPoints) {
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]

	const  	uint8_t			spectrum_colors[LED_COLUMN_HEIGHT][3] =
 8001634:	4b56      	ldr	r3, [pc, #344]	; (8001790 <plotFFTData+0x168>)
 8001636:	f107 040c 	add.w	r4, r7, #12
 800163a:	461d      	mov	r5, r3
 800163c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800163e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001640:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001644:	e884 0003 	stmia.w	r4, {r0, r1}
											{{17,51,81},{17,81,81},{17,81,51},{17,81,17},
											 {51,81,17},{81,81,17},{81,51,17},{81,17,17}};
	const 	uint8_t			*color_index;
	int16_t 		binsize;
	uint8_t			attenuate = 11;
 8001648:	230b      	movs	r3, #11
 800164a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t			i, scaled_amplitude;

	binsize = numPoints/NUM_BINS;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	095b      	lsrs	r3, r3, #5
 8001652:	b29b      	uxth	r3, r3
 8001654:	85bb      	strh	r3, [r7, #44]	; 0x2c
	led_set_all_RGB(0,0,0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2000      	movs	r0, #0
 800165c:	f000 fb9a 	bl	8001d94 <led_set_all_RGB>
	// scale to height of 8 and plot - alternating columns run opposite directions
	for (i = 0; i < NUM_BINS; i += 2) {
 8001660:	2300      	movs	r3, #0
 8001662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001666:	e081      	b.n	800176c <plotFFTData+0x144>
		scaled_amplitude = (uint8_t) fmin((dataBuff[NUM_BINS - i - 1]*LED_COLUMN_HEIGHT) >> attenuate, MAX_COLUMN_VAL);
 8001668:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800166c:	f1c3 4300 	rsb	r3, r3, #2147483648	; 0x80000000
 8001670:	331f      	adds	r3, #31
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	00da      	lsls	r2, r3, #3
 800167c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001680:	fa42 f303 	asr.w	r3, r2, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff31 	bl	80004ec <__aeabi_i2d>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8001788 <plotFFTData+0x160>
 8001692:	ec43 2b10 	vmov	d0, r2, r3
 8001696:	f008 ff73 	bl	800a580 <fmin>
 800169a:	ec53 2b10 	vmov	r2, r3, d0
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7ff fa65 	bl	8000b70 <__aeabi_d2uiz>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		color_index = spectrum_colors[scaled_amplitude];
 80016ac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80016b0:	f107 010c 	add.w	r1, r7, #12
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
		led_set_RGB(i*LED_COLUMN_HEIGHT + scaled_amplitude, color_index[0], color_index[1], color_index[2]);
 80016be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016ca:	4413      	add	r3, r2
 80016cc:	b2d8      	uxtb	r0, r3
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	7819      	ldrb	r1, [r3, #0]
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	3301      	adds	r3, #1
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	3302      	adds	r3, #2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f000 fb21 	bl	8001d24 <led_set_RGB>
		scaled_amplitude = (uint8_t) fmin((dataBuff[NUM_BINS - i]*LED_COLUMN_HEIGHT) >> attenuate, MAX_COLUMN_VAL);
 80016e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016e6:	f1c3 0320 	rsb	r3, r3, #32
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	00da      	lsls	r2, r3, #3
 80016f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80016f8:	fa42 f303 	asr.w	r3, r2, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fef5 	bl	80004ec <__aeabi_i2d>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8001788 <plotFFTData+0x160>
 800170a:	ec43 2b10 	vmov	d0, r2, r3
 800170e:	f008 ff37 	bl	800a580 <fmin>
 8001712:	ec53 2b10 	vmov	r2, r3, d0
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fa29 	bl	8000b70 <__aeabi_d2uiz>
 800171e:	4603      	mov	r3, r0
 8001720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		color_index = spectrum_colors[scaled_amplitude];
 8001724:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001728:	f107 010c 	add.w	r1, r7, #12
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	440b      	add	r3, r1
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
		led_set_RGB((i+2)*8 - (scaled_amplitude+1), color_index[0], color_index[1], color_index[2]);
 8001736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800173a:	3302      	adds	r3, #2
 800173c:	b2db      	uxtb	r3, r3
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	b2da      	uxtb	r2, r3
 8001742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b2d8      	uxtb	r0, r3
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	7819      	ldrb	r1, [r3, #0]
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	3301      	adds	r3, #1
 8001756:	781a      	ldrb	r2, [r3, #0]
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	3302      	adds	r3, #2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	f000 fae1 	bl	8001d24 <led_set_RGB>
	for (i = 0; i < NUM_BINS; i += 2) {
 8001762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001766:	3302      	adds	r3, #2
 8001768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800176c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001770:	2b1f      	cmp	r3, #31
 8001772:	f67f af79 	bls.w	8001668 <plotFFTData+0x40>
	}
	led_render();
 8001776:	f000 fb2b 	bl	8001dd0 <led_render>
}
 800177a:	bf00      	nop
 800177c:	3730      	adds	r7, #48	; 0x30
 800177e:	46bd      	mov	sp, r7
 8001780:	bdb0      	pop	{r4, r5, r7, pc}
 8001782:	bf00      	nop
 8001784:	f3af 8000 	nop.w
 8001788:	00000000 	.word	0x00000000
 800178c:	401c0000 	.word	0x401c0000
 8001790:	0800d45c 	.word	0x0800d45c

08001794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001798:	b090      	sub	sp, #64	; 0x40
 800179a:	af06      	add	r7, sp, #24
	  uint32_t 		i;
	  int32_t		satVal;
	  uint16_t 		outStringLen;
	  float32_t*	fftBuffPtr;
	  float32_t		average, srate, fmin, fmax, fbin;
	  const uint8_t ATTENUATION =8;
 800179c:	2308      	movs	r3, #8
 800179e:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a0:	f001 f969 	bl	8002a76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a4:	f000 f95c 	bl	8001a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a8:	f7ff fdd6 	bl	8001358 <MX_GPIO_Init>
  MX_DMA_Init();
 80017ac:	f7ff fd9a 	bl	80012e4 <MX_DMA_Init>
  MX_DFSDM1_Init();
 80017b0:	f7ff fb8c 	bl	8000ecc <MX_DFSDM1_Init>
  MX_ICACHE_Init();
 80017b4:	f7ff fe44 	bl	8001440 <MX_ICACHE_Init>
  MX_USART3_UART_Init();
 80017b8:	f001 f84c 	bl	8002854 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80017bc:	f000 fed8 	bl	8002570 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017c0:	f000 ff4c 	bl	800265c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* Start DFSDM conversions */
  if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuff, BUFFER_SIZE))
 80017c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c8:	4990      	ldr	r1, [pc, #576]	; (8001a0c <main+0x278>)
 80017ca:	4891      	ldr	r0, [pc, #580]	; (8001a10 <main+0x27c>)
 80017cc:	f001 fcce 	bl	800316c <HAL_DFSDM_FilterRegularStart_DMA>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <main+0x46>
  {
    Error_Handler();
 80017d6:	f000 fa8b 	bl	8001cf0 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#ifdef DO_FFT
  arm_rfft_fast_init_f32(&fft_handler, FFT_LENGTH);
 80017da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017de:	488d      	ldr	r0, [pc, #564]	; (8001a14 <main+0x280>)
 80017e0:	f007 fe1c 	bl	800941c <arm_rfft_fast_init_f32>
  led_set_all_RGB(0,0,0);  // If using neopxiels set them all to zero
 80017e4:	2200      	movs	r2, #0
 80017e6:	2100      	movs	r1, #0
 80017e8:	2000      	movs	r0, #0
 80017ea:	f000 fad3 	bl	8001d94 <led_set_all_RGB>
#endif
  while (1)
  {

	  	if (RXDataIncoming) {
 80017ee:	4b8a      	ldr	r3, [pc, #552]	; (8001a18 <main+0x284>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00c      	beq.n	8001810 <main+0x7c>
    		sts = HAL_UART_Receive_IT(&huart3, &rxByte, 1);
 80017f6:	2201      	movs	r2, #1
 80017f8:	4988      	ldr	r1, [pc, #544]	; (8001a1c <main+0x288>)
 80017fa:	4889      	ldr	r0, [pc, #548]	; (8001a20 <main+0x28c>)
 80017fc:	f006 f842 	bl	8007884 <HAL_UART_Receive_IT>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	4b87      	ldr	r3, [pc, #540]	; (8001a24 <main+0x290>)
 8001806:	701a      	strb	r2, [r3, #0]
    		RXDataIncoming = 0;
 8001808:	4b83      	ldr	r3, [pc, #524]	; (8001a18 <main+0x284>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e03c      	b.n	800188a <main+0xf6>
	  	} else if  (RXDataComplete) {
 8001810:	4b85      	ldr	r3, [pc, #532]	; (8001a28 <main+0x294>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d038      	beq.n	800188a <main+0xf6>
	  		srate = getSamplingRate(&fmin, &fmax, &fbin);
 8001818:	463a      	mov	r2, r7
 800181a:	1d39      	adds	r1, r7, #4
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fea5 	bl	8001570 <getSamplingRate>
 8001826:	ed87 0a06 	vstr	s0, [r7, #24]
	  		sprintf(commBuff, "Sampling rate = %12.2f Hz\r\nMin freq = %12.2f Hz\r\n Max freq = %12.2f Hz\r\n Freq bin size = %12.2f Hz\r\n", srate, fmin, fmax, fbin);
 800182a:	69b8      	ldr	r0, [r7, #24]
 800182c:	f7fe fe70 	bl	8000510 <__aeabi_f2d>
 8001830:	4682      	mov	sl, r0
 8001832:	468b      	mov	fp, r1
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe6a 	bl	8000510 <__aeabi_f2d>
 800183c:	4604      	mov	r4, r0
 800183e:	460d      	mov	r5, r1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe64 	bl	8000510 <__aeabi_f2d>
 8001848:	4680      	mov	r8, r0
 800184a:	4689      	mov	r9, r1
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe5e 	bl	8000510 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800185c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001860:	e9cd 4500 	strd	r4, r5, [sp]
 8001864:	4652      	mov	r2, sl
 8001866:	465b      	mov	r3, fp
 8001868:	4970      	ldr	r1, [pc, #448]	; (8001a2c <main+0x298>)
 800186a:	4871      	ldr	r0, [pc, #452]	; (8001a30 <main+0x29c>)
 800186c:	f009 fba2 	bl	800afb4 <siprintf>
	    	HAL_UART_Transmit_DMA(&huart3, (uint8_t *) commBuff, strlen(commBuff));
 8001870:	486f      	ldr	r0, [pc, #444]	; (8001a30 <main+0x29c>)
 8001872:	f7fe fce1 	bl	8000238 <strlen>
 8001876:	4603      	mov	r3, r0
 8001878:	b29b      	uxth	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	496c      	ldr	r1, [pc, #432]	; (8001a30 <main+0x29c>)
 800187e:	4868      	ldr	r0, [pc, #416]	; (8001a20 <main+0x28c>)
 8001880:	f006 f846 	bl	8007910 <HAL_UART_Transmit_DMA>
	    	RXDataComplete = 0;
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <main+0x294>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
	    }

	    if(DmaRecHalfBuffCplt == 1)
 800188a:	4b6a      	ldr	r3, [pc, #424]	; (8001a34 <main+0x2a0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d15a      	bne.n	8001948 <main+0x1b4>
	    {
	    	fftBuffPtr = FFTInBuff;
 8001892:	4b69      	ldr	r3, [pc, #420]	; (8001a38 <main+0x2a4>)
 8001894:	623b      	str	r3, [r7, #32]
	    	average = 0;
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
	    	/* Store values on Play buff */
	    	for(i = 0; i < HALF_BUFFER_SIZE; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
 80018a0:	e025      	b.n	80018ee <main+0x15a>
	    	{
	    		satVal 			  = SaturaLH((RecBuff[i] >> ATTENUATION), -32768, 32767);
 80018a2:	4a5a      	ldr	r2, [pc, #360]	; (8001a0c <main+0x278>)
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018aa:	7ffb      	ldrb	r3, [r7, #31]
 80018ac:	fa42 f303 	asr.w	r3, r2, r3
 80018b0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80018b4:	db0c      	blt.n	80018d0 <main+0x13c>
 80018b6:	4a55      	ldr	r2, [pc, #340]	; (8001a0c <main+0x278>)
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018be:	7ffb      	ldrb	r3, [r7, #31]
 80018c0:	fa42 f303 	asr.w	r3, r2, r3
 80018c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80018c8:	4293      	cmp	r3, r2
 80018ca:	bfa8      	it	ge
 80018cc:	4613      	movge	r3, r2
 80018ce:	e000      	b.n	80018d2 <main+0x13e>
 80018d0:	4b5a      	ldr	r3, [pc, #360]	; (8001a3c <main+0x2a8>)
 80018d2:	60fb      	str	r3, [r7, #12]
	    		// Copy the value into the FFT Array
	    		*(fftBuffPtr++) = satVal;
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	1d1a      	adds	r2, r3, #4
 80018d8:	623a      	str	r2, [r7, #32]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	ee07 2a90 	vmov	s15, r2
 80018e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e4:	edc3 7a00 	vstr	s15, [r3]
	    	for(i = 0; i < HALF_BUFFER_SIZE; i++)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	3301      	adds	r3, #1
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018f4:	d3d5      	bcc.n	80018a2 <main+0x10e>
	    	}

	    	DoFFT(FFTInBuff, FFTOutBuff, PowerBuff, &fft_handler);
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <main+0x280>)
 80018f8:	4a51      	ldr	r2, [pc, #324]	; (8001a40 <main+0x2ac>)
 80018fa:	4952      	ldr	r1, [pc, #328]	; (8001a44 <main+0x2b0>)
 80018fc:	484e      	ldr	r0, [pc, #312]	; (8001a38 <main+0x2a4>)
 80018fe:	f7ff fdb2 	bl	8001466 <DoFFT>
	    	outStringLen = DecimateFFTData(PowerBuff, DecimatedBuff, OutBuff, HALF_FFT_LENGTH, LED_COLS);
 8001902:	2320      	movs	r3, #32
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190a:	4a4f      	ldr	r2, [pc, #316]	; (8001a48 <main+0x2b4>)
 800190c:	494f      	ldr	r1, [pc, #316]	; (8001a4c <main+0x2b8>)
 800190e:	484c      	ldr	r0, [pc, #304]	; (8001a40 <main+0x2ac>)
 8001910:	f7ff fdc0 	bl	8001494 <DecimateFFTData>
 8001914:	4603      	mov	r3, r0
 8001916:	827b      	strh	r3, [r7, #18]
	    	// only send data if resource is free - otherwise skip
			if (DoSerialOutput) {
 8001918:	4b4d      	ldr	r3, [pc, #308]	; (8001a50 <main+0x2bc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00c      	beq.n	800193a <main+0x1a6>
				if (DmaSentHalfBuffCplt) {
 8001920:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <main+0x2c0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <main+0x1a6>
					  DmaSentHalfBuffCplt = 0;
 8001928:	4b4a      	ldr	r3, [pc, #296]	; (8001a54 <main+0x2c0>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
					  HAL_UART_Transmit_DMA(&huart3, (uint8_t *) OutBuff, outStringLen);
 800192e:	8a7b      	ldrh	r3, [r7, #18]
 8001930:	461a      	mov	r2, r3
 8001932:	4945      	ldr	r1, [pc, #276]	; (8001a48 <main+0x2b4>)
 8001934:	483a      	ldr	r0, [pc, #232]	; (8001a20 <main+0x28c>)
 8001936:	f005 ffeb 	bl	8007910 <HAL_UART_Transmit_DMA>
				  }
			}

			plotFFTData(DecimatedBuff, DECIMATED_LENGTH);
 800193a:	2120      	movs	r1, #32
 800193c:	4843      	ldr	r0, [pc, #268]	; (8001a4c <main+0x2b8>)
 800193e:	f7ff fe73 	bl	8001628 <plotFFTData>
			//ledTest();
	    	DmaRecHalfBuffCplt  = 0;
 8001942:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <main+0x2a0>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
  	  }
	  if(DmaRecBuffCplt == 1)
 8001948:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <main+0x2c4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	f47f af4e 	bne.w	80017ee <main+0x5a>
	  {

		  fftBuffPtr = FFTInBuff;
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <main+0x2a4>)
 8001954:	623b      	str	r3, [r7, #32]
		  /* Store values on Play buff */
		  average = 0;
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
		  for(i = HALF_BUFFER_SIZE; i < BUFFER_SIZE; i++)
 800195c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
 8001962:	e025      	b.n	80019b0 <main+0x21c>
	      {
			  	satVal 			  = SaturaLH((RecBuff[i] >> ATTENUATION), -32768, 32767);
 8001964:	4a29      	ldr	r2, [pc, #164]	; (8001a0c <main+0x278>)
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800196c:	7ffb      	ldrb	r3, [r7, #31]
 800196e:	fa42 f303 	asr.w	r3, r2, r3
 8001972:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001976:	db0c      	blt.n	8001992 <main+0x1fe>
 8001978:	4a24      	ldr	r2, [pc, #144]	; (8001a0c <main+0x278>)
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001980:	7ffb      	ldrb	r3, [r7, #31]
 8001982:	fa42 f303 	asr.w	r3, r2, r3
 8001986:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800198a:	4293      	cmp	r3, r2
 800198c:	bfa8      	it	ge
 800198e:	4613      	movge	r3, r2
 8001990:	e000      	b.n	8001994 <main+0x200>
 8001992:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <main+0x2a8>)
 8001994:	60fb      	str	r3, [r7, #12]
			  	*(fftBuffPtr++) = satVal;
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	1d1a      	adds	r2, r3, #4
 800199a:	623a      	str	r2, [r7, #32]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	ee07 2a90 	vmov	s15, r2
 80019a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a6:	edc3 7a00 	vstr	s15, [r3]
		  for(i = HALF_BUFFER_SIZE; i < BUFFER_SIZE; i++)
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	3301      	adds	r3, #1
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b6:	d3d5      	bcc.n	8001964 <main+0x1d0>
	  	  }

		  DoFFT(FFTInBuff, FFTOutBuff, PowerBuff, &fft_handler);
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <main+0x280>)
 80019ba:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <main+0x2ac>)
 80019bc:	4921      	ldr	r1, [pc, #132]	; (8001a44 <main+0x2b0>)
 80019be:	481e      	ldr	r0, [pc, #120]	; (8001a38 <main+0x2a4>)
 80019c0:	f7ff fd51 	bl	8001466 <DoFFT>
		  outStringLen = DecimateFFTData(PowerBuff, DecimatedBuff, OutBuff, HALF_FFT_LENGTH, LED_ROWS);
 80019c4:	2308      	movs	r3, #8
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019cc:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <main+0x2b4>)
 80019ce:	491f      	ldr	r1, [pc, #124]	; (8001a4c <main+0x2b8>)
 80019d0:	481b      	ldr	r0, [pc, #108]	; (8001a40 <main+0x2ac>)
 80019d2:	f7ff fd5f 	bl	8001494 <DecimateFFTData>
 80019d6:	4603      	mov	r3, r0
 80019d8:	827b      	strh	r3, [r7, #18]
		  if (DoSerialOutput) {
 80019da:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <main+0x2bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00c      	beq.n	80019fc <main+0x268>
			  // only send data if buffer is free, otherwise skip
			  if (DmaSentBuffCplt) {
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <main+0x2c8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <main+0x268>
				  DmaSentBuffCplt = 0;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <main+0x2c8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
				  HAL_UART_Transmit_DMA(&huart3, (uint8_t *) OutBuff, outStringLen);
 80019f0:	8a7b      	ldrh	r3, [r7, #18]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4914      	ldr	r1, [pc, #80]	; (8001a48 <main+0x2b4>)
 80019f6:	480a      	ldr	r0, [pc, #40]	; (8001a20 <main+0x28c>)
 80019f8:	f005 ff8a 	bl	8007910 <HAL_UART_Transmit_DMA>
			  }
		  }

		  plotFFTData(DecimatedBuff, DECIMATED_LENGTH);
 80019fc:	2120      	movs	r1, #32
 80019fe:	4813      	ldr	r0, [pc, #76]	; (8001a4c <main+0x2b8>)
 8001a00:	f7ff fe12 	bl	8001628 <plotFFTData>
		  //ledTest();
	      DmaRecBuffCplt  = 0;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <main+0x2c4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
	  	if (RXDataIncoming) {
 8001a0a:	e6f0      	b.n	80017ee <main+0x5a>
 8001a0c:	20000fec 	.word	0x20000fec
 8001a10:	200005b0 	.word	0x200005b0
 8001a14:	200006d4 	.word	0x200006d4
 8001a18:	20000218 	.word	0x20000218
 8001a1c:	20001fec 	.word	0x20001fec
 8001a20:	20004d0c 	.word	0x20004d0c
 8001a24:	20004830 	.word	0x20004830
 8001a28:	2000021c 	.word	0x2000021c
 8001a2c:	0800d474 	.word	0x0800d474
 8001a30:	200006ec 	.word	0x200006ec
 8001a34:	2000020c 	.word	0x2000020c
 8001a38:	200007ec 	.word	0x200007ec
 8001a3c:	ffff8000 	.word	0xffff8000
 8001a40:	20004874 	.word	0x20004874
 8001a44:	20003ff0 	.word	0x20003ff0
 8001a48:	20001ff0 	.word	0x20001ff0
 8001a4c:	200047f0 	.word	0x200047f0
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000210 	.word	0x20000210
 8001a5c:	20000004 	.word	0x20000004

08001a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b098      	sub	sp, #96	; 0x60
 8001a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a66:	f107 0318 	add.w	r3, r7, #24
 8001a6a:	2248      	movs	r2, #72	; 0x48
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f008 fe2c 	bl	800a6cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8001a82:	2000      	movs	r0, #0
 8001a84:	f002 fc0e 	bl	80042a4 <HAL_PWREx_ControlVoltageScaling>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001a8e:	f000 f92f 	bl	8001cf0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001a92:	2312      	movs	r3, #18
 8001a94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a9c:	2340      	movs	r3, #64	; 0x40
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001aa8:	23b0      	movs	r3, #176	; 0xb0
 8001aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aac:	2302      	movs	r3, #2
 8001aae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8001ab8:	2337      	movs	r3, #55	; 0x37
 8001aba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001abc:	2307      	movs	r3, #7
 8001abe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fc89 	bl	80043e4 <HAL_RCC_OscConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001ad8:	f000 f90a 	bl	8001cf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001adc:	230f      	movs	r3, #15
 8001ade:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2105      	movs	r1, #5
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 f957 	bl	8004da8 <HAL_RCC_ClockConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001b00:	f000 f8f6 	bl	8001cf0 <Error_Handler>
  }
}
 8001b04:	bf00      	nop
 8001b06:	3760      	adds	r7, #96	; 0x60
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_DFSDM_FilterRegConvCpltCallback>:
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	//Override callback from stn32l5xx_hal_dfsdm.c
	  if(hdfsdm_filter == &hdfsdm1_filter0)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a06      	ldr	r2, [pc, #24]	; (8001b30 <HAL_DFSDM_FilterRegConvCpltCallback+0x24>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d102      	bne.n	8001b22 <HAL_DFSDM_FilterRegConvCpltCallback+0x16>
	  {
	    DmaRecBuffCplt = 1;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_DFSDM_FilterRegConvCpltCallback+0x28>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
	  }
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	200005b0 	.word	0x200005b0
 8001b34:	20000210 	.word	0x20000210

08001b38 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	// Override callback from stn32l5xx_hal_dfsdm.c
	  if(hdfsdm_filter == &hdfsdm1_filter0)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x24>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d102      	bne.n	8001b4e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x16>
	  {
	    DmaRecHalfBuffCplt = 1;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
	  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	200005b0 	.word	0x200005b0
 8001b60:	2000020c 	.word	0x2000020c

08001b64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if (huart == &huart3) {
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <HAL_UART_TxCpltCallback+0x24>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d102      	bne.n	8001b7a <HAL_UART_TxCpltCallback+0x16>
	  DmaSentBuffCplt = 1;
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_UART_TxCpltCallback+0x28>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
  }

}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20004d0c 	.word	0x20004d0c
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	  if (huart == &huart3) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_UART_TxHalfCpltCallback+0x24>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d102      	bne.n	8001ba6 <HAL_UART_TxHalfCpltCallback+0x16>
		  DmaSentHalfBuffCplt = 1;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_UART_TxHalfCpltCallback+0x28>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
	  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20004d0c 	.word	0x20004d0c
 8001bb8:	20000000 	.word	0x20000000

08001bbc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 	if (huart == &huart3) {
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <HAL_UART_RxCpltCallback+0x6c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d128      	bne.n	8001c1e <HAL_UART_RxCpltCallback+0x62>
		// If no data is being received, clear the buffer
		// Right now just toggle LED to see if anything is noticed
	    //Toggle LED10
	    HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8001bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd0:	4816      	ldr	r0, [pc, #88]	; (8001c2c <HAL_UART_RxCpltCallback+0x70>)
 8001bd2:	f002 fadd 	bl	8004190 <HAL_GPIO_TogglePin>
	    // Enable receiving of data via UART and interrupt notification

	    if (!DoSerialOutput) {
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <HAL_UART_RxCpltCallback+0x74>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d11c      	bne.n	8001c18 <HAL_UART_RxCpltCallback+0x5c>
	    	RXDataIncoming = 1;
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_UART_RxCpltCallback+0x78>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
	    	if (rxByte == '\r') {
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_UART_RxCpltCallback+0x7c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b0d      	cmp	r3, #13
 8001bea:	d10b      	bne.n	8001c04 <HAL_UART_RxCpltCallback+0x48>
	    		rxBuff[rxIndex] = '\0';
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_UART_RxCpltCallback+0x80>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <HAL_UART_RxCpltCallback+0x84>)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	54d1      	strb	r1, [r2, r3]
	    		// Now respond to input
	    		RXDataComplete = 1;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <HAL_UART_RxCpltCallback+0x88>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
	    		rxIndex = 0;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_UART_RxCpltCallback+0x80>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
	    	}
	    } else {
	    	RXDataIncoming = 0;
	    }
	}
}
 8001c02:	e00c      	b.n	8001c1e <HAL_UART_RxCpltCallback+0x62>
	    		rxBuff[rxIndex++] = rxByte;
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_UART_RxCpltCallback+0x80>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	490c      	ldr	r1, [pc, #48]	; (8001c3c <HAL_UART_RxCpltCallback+0x80>)
 8001c0c:	600a      	str	r2, [r1, #0]
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <HAL_UART_RxCpltCallback+0x7c>)
 8001c10:	7811      	ldrb	r1, [r2, #0]
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <HAL_UART_RxCpltCallback+0x84>)
 8001c14:	54d1      	strb	r1, [r2, r3]
}
 8001c16:	e002      	b.n	8001c1e <HAL_UART_RxCpltCallback+0x62>
	    	RXDataIncoming = 0;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_UART_RxCpltCallback+0x78>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20004d0c 	.word	0x20004d0c
 8001c2c:	42021800 	.word	0x42021800
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20000218 	.word	0x20000218
 8001c38:	20001fec 	.word	0x20001fec
 8001c3c:	20000220 	.word	0x20000220
 8001c40:	20004834 	.word	0x20004834
 8001c44:	2000021c 	.word	0x2000021c

08001c48 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */

  if (!debouncing && GPIO_Pin == PUSH_BUTTON_Pin) {
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_GPIO_EXTI_Falling_Callback+0x26>
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c60:	d105      	bne.n	8001c6e <HAL_GPIO_EXTI_Falling_Callback+0x26>
	  // Implement debouncing by starting timer 3
	  debouncing = 1;
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT(&htim3);
 8001c68:	4804      	ldr	r0, [pc, #16]	; (8001c7c <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 8001c6a:	f004 f8eb 	bl	8005e44 <HAL_TIM_Base_Start_IT>

  }

}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000214 	.word	0x20000214
 8001c7c:	20004cc0 	.word	0x20004cc0

08001c80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	// Debounce push button
	if (htim == &htim3) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d121      	bne.n	8001cd4 <HAL_TIM_PeriodElapsedCallback+0x54>
		debouncing = 0;
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim3);
 8001c96:	4811      	ldr	r0, [pc, #68]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001c98:	f004 f944 	bl	8005f24 <HAL_TIM_Base_Stop_IT>
		// If we're here, the button is debounced and we should toggle the state
		if (HAL_GPIO_ReadPin(GPIOC, 13) == GPIO_PIN_RESET) {	// Button is pushed
 8001c9c:	210d      	movs	r1, #13
 8001c9e:	4811      	ldr	r0, [pc, #68]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ca0:	f002 fa46 	bl	8004130 <HAL_GPIO_ReadPin>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d114      	bne.n	8001cd4 <HAL_TIM_PeriodElapsedCallback+0x54>
			DoSerialOutput = !DoSerialOutput;
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	bf0c      	ite	eq
 8001cb2:	2301      	moveq	r3, #1
 8001cb4:	2300      	movne	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
			if (!DoSerialOutput) {
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d103      	bne.n	8001cce <HAL_TIM_PeriodElapsedCallback+0x4e>
				// Enable receiving of data via UART and interrupt notification
				RXDataIncoming = 1;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
			} else {
				RXDataIncoming = 0;
			}
		}
	}
}
 8001ccc:	e002      	b.n	8001cd4 <HAL_TIM_PeriodElapsedCallback+0x54>
				RXDataIncoming = 0;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20004cc0 	.word	0x20004cc0
 8001ce0:	20000214 	.word	0x20000214
 8001ce4:	42020800 	.word	0x42020800
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	20000218 	.word	0x20000218

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	b672      	cpsid	i
}
 8001cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <Error_Handler+0x8>

08001cfa <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	460a      	mov	r2, r1
 8001d04:	71fb      	strb	r3, [r7, #7]
 8001d06:	4613      	mov	r3, r2
 8001d08:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	79ba      	ldrb	r2, [r7, #6]
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	121b      	asrs	r3, r3, #8
 8001d14:	b2db      	uxtb	r3, r3
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4623      	mov	r3, r4
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	4603      	mov	r3, r0
 8001d38:	71bb      	strb	r3, [r7, #6]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	717b      	strb	r3, [r7, #5]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	713b      	strb	r3, [r7, #4]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8001d42:	79fa      	ldrb	r2, [r7, #7]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	189c      	adds	r4, r3, r2
 8001d4a:	797b      	ldrb	r3, [r7, #5]
 8001d4c:	21b0      	movs	r1, #176	; 0xb0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ffd3 	bl	8001cfa <scale8>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <led_set_RGB+0x6c>)
 8001d5a:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	3301      	adds	r3, #1
 8001d66:	490a      	ldr	r1, [pc, #40]	; (8001d90 <led_set_RGB+0x6c>)
 8001d68:	79ba      	ldrb	r2, [r7, #6]
 8001d6a:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8001d6c:	79fa      	ldrb	r2, [r7, #7]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	1c9c      	adds	r4, r3, #2
 8001d76:	793b      	ldrb	r3, [r7, #4]
 8001d78:	21f0      	movs	r1, #240	; 0xf0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ffbd 	bl	8001cfa <scale8>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b02      	ldr	r3, [pc, #8]	; (8001d90 <led_set_RGB+0x6c>)
 8001d86:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}
 8001d90:	20000224 	.word	0x20000224

08001d94 <led_set_all_RGB>:
  rgb_arr[4 * index + 3] = w;
#endif // End SK6812 WS2812B case differentiation
}

// Set all colors to RGB
void led_set_all_RGB(uint8_t r, uint8_t g, uint8_t b) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	4613      	mov	r3, r2
 8001da4:	717b      	strb	r3, [r7, #5]
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGB(i, r, g, b);
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	e009      	b.n	8001dc0 <led_set_all_RGB+0x2c>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	b2d8      	uxtb	r0, r3
 8001db0:	797b      	ldrb	r3, [r7, #5]
 8001db2:	79ba      	ldrb	r2, [r7, #6]
 8001db4:	79f9      	ldrb	r1, [r7, #7]
 8001db6:	f7ff ffb5 	bl	8001d24 <led_set_RGB>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2bff      	cmp	r3, #255	; 0xff
 8001dc4:	d9f2      	bls.n	8001dac <led_set_all_RGB+0x18>
}
 8001dc6:	bf00      	nop
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim2_ch1.State != HAL_DMA_STATE_READY) {
 8001dd6:	4b4d      	ldr	r3, [pc, #308]	; (8001f0c <led_render+0x13c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d105      	bne.n	8001dea <led_render+0x1a>
 8001dde:	4b4c      	ldr	r3, [pc, #304]	; (8001f10 <led_render+0x140>)
 8001de0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d014      	beq.n	8001e14 <led_render+0x44>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	71fb      	strb	r3, [r7, #7]
 8001dee:	e006      	b.n	8001dfe <led_render+0x2e>
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	4a48      	ldr	r2, [pc, #288]	; (8001f14 <led_render+0x144>)
 8001df4:	2100      	movs	r1, #0
 8001df6:	54d1      	strb	r1, [r2, r3]
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	71fb      	strb	r3, [r7, #7]
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b2f      	cmp	r3, #47	; 0x2f
 8001e02:	d9f5      	bls.n	8001df0 <led_render+0x20>
    wr_buf_p = 0;
 8001e04:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <led_render+0x13c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4842      	ldr	r0, [pc, #264]	; (8001f18 <led_render+0x148>)
 8001e0e:	f004 fb31 	bl	8006474 <HAL_TIM_PWM_Stop_DMA>
    return;
 8001e12:	e078      	b.n	8001f06 <led_render+0x136>
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
    wr_buf[i + 48] = PWM_LO << (((rgb_arr[6] << i) & 0x80) > 0);
    wr_buf[i + 56] = PWM_LO << (((rgb_arr[7] << i) & 0x80) > 0);
  }
#else // WS2812B
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001e14:	2300      	movs	r3, #0
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	e069      	b.n	8001eee <led_render+0x11e>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8001e1a:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <led_render+0x14c>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	dd01      	ble.n	8001e32 <led_render+0x62>
 8001e2e:	212e      	movs	r1, #46	; 0x2e
 8001e30:	e000      	b.n	8001e34 <led_render+0x64>
 8001e32:	2117      	movs	r1, #23
 8001e34:	4a37      	ldr	r2, [pc, #220]	; (8001f14 <led_render+0x144>)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	4413      	add	r3, r2
 8001e3a:	460a      	mov	r2, r1
 8001e3c:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8001e3e:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <led_render+0x14c>)
 8001e40:	785b      	ldrb	r3, [r3, #1]
 8001e42:	461a      	mov	r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	dd01      	ble.n	8001e56 <led_render+0x86>
 8001e52:	212e      	movs	r1, #46	; 0x2e
 8001e54:	e000      	b.n	8001e58 <led_render+0x88>
 8001e56:	2117      	movs	r1, #23
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	3308      	adds	r3, #8
 8001e5c:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <led_render+0x144>)
 8001e5e:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8001e60:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <led_render+0x14c>)
 8001e62:	789b      	ldrb	r3, [r3, #2]
 8001e64:	461a      	mov	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	dd01      	ble.n	8001e78 <led_render+0xa8>
 8001e74:	212e      	movs	r1, #46	; 0x2e
 8001e76:	e000      	b.n	8001e7a <led_render+0xaa>
 8001e78:	2117      	movs	r1, #23
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	3310      	adds	r3, #16
 8001e7e:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <led_render+0x144>)
 8001e80:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <led_render+0x14c>)
 8001e84:	78db      	ldrb	r3, [r3, #3]
 8001e86:	461a      	mov	r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	dd01      	ble.n	8001e9a <led_render+0xca>
 8001e96:	212e      	movs	r1, #46	; 0x2e
 8001e98:	e000      	b.n	8001e9c <led_render+0xcc>
 8001e9a:	2117      	movs	r1, #23
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <led_render+0x144>)
 8001ea2:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <led_render+0x14c>)
 8001ea6:	791b      	ldrb	r3, [r3, #4]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	dd01      	ble.n	8001ebc <led_render+0xec>
 8001eb8:	212e      	movs	r1, #46	; 0x2e
 8001eba:	e000      	b.n	8001ebe <led_render+0xee>
 8001ebc:	2117      	movs	r1, #23
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	3320      	adds	r3, #32
 8001ec2:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <led_render+0x144>)
 8001ec4:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <led_render+0x14c>)
 8001ec8:	795b      	ldrb	r3, [r3, #5]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	dd01      	ble.n	8001ede <led_render+0x10e>
 8001eda:	212e      	movs	r1, #46	; 0x2e
 8001edc:	e000      	b.n	8001ee0 <led_render+0x110>
 8001ede:	2117      	movs	r1, #23
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	3328      	adds	r3, #40	; 0x28
 8001ee4:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <led_render+0x144>)
 8001ee6:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b07      	cmp	r3, #7
 8001ef2:	d992      	bls.n	8001e1a <led_render+0x4a>
  }
#endif // End SK6812 WS2812B case differentiation

  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 8001ef4:	2330      	movs	r3, #48	; 0x30
 8001ef6:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <led_render+0x144>)
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <led_render+0x148>)
 8001efc:	f004 f8a2 	bl	8006044 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8001f00:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <led_render+0x13c>)
 8001f02:	2202      	movs	r2, #2
 8001f04:	601a      	str	r2, [r3, #0]
}
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000554 	.word	0x20000554
 8001f10:	2000066c 	.word	0x2000066c
 8001f14:	20000524 	.word	0x20000524
 8001f18:	20004c74 	.word	0x20004c74
 8001f1c:	20000224 	.word	0x20000224

08001f20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001f28:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2bff      	cmp	r3, #255	; 0xff
 8001f2e:	d853      	bhi.n	8001fd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	e047      	b.n	8001fc6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a35      	ldr	r2, [pc, #212]	; (8002018 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001f42:	5cd3      	ldrb	r3, [r2, r3]
 8001f44:	461a      	mov	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	dd01      	ble.n	8001f58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8001f54:	212e      	movs	r1, #46	; 0x2e
 8001f56:	e000      	b.n	8001f5a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8001f58:	2117      	movs	r1, #23
 8001f5a:	4a30      	ldr	r2, [pc, #192]	; (800201c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	460a      	mov	r2, r1
 8001f62:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001f64:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4a29      	ldr	r2, [pc, #164]	; (8002018 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	461a      	mov	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	dd01      	ble.n	8001f88 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8001f84:	212e      	movs	r1, #46	; 0x2e
 8001f86:	e000      	b.n	8001f8a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 8001f88:	2117      	movs	r1, #23
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3308      	adds	r3, #8
 8001f8e:	4a23      	ldr	r2, [pc, #140]	; (800201c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001f90:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	; (8002018 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	dd01      	ble.n	8001fb6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8001fb2:	212e      	movs	r1, #46	; 0x2e
 8001fb4:	e000      	b.n	8001fb8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 8001fb6:	2117      	movs	r1, #23
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3310      	adds	r3, #16
 8001fbc:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001fbe:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b07      	cmp	r3, #7
 8001fca:	d9b4      	bls.n	8001f36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	4a10      	ldr	r2, [pc, #64]	; (8002014 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001fd4:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8001fd6:	e016      	b.n	8002006 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe6>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001fe0:	d211      	bcs.n	8002006 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe6>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	72fb      	strb	r3, [r7, #11]
 8001fe6:	e006      	b.n	8001ff6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd6>
 8001fe8:	7afb      	ldrb	r3, [r7, #11]
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001fec:	2100      	movs	r1, #0
 8001fee:	54d1      	strb	r1, [r2, r3]
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	72fb      	strb	r3, [r7, #11]
 8001ff6:	7afb      	ldrb	r3, [r7, #11]
 8001ff8:	2b17      	cmp	r3, #23
 8001ffa:	d9f5      	bls.n	8001fe8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002004:	6013      	str	r3, [r2, #0]
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000554 	.word	0x20000554
 8002018:	20000224 	.word	0x20000224
 800201c:	20000524 	.word	0x20000524

08002020 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8002028:	4b3c      	ldr	r3, [pc, #240]	; (800211c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2bff      	cmp	r3, #255	; 0xff
 800202e:	d852      	bhi.n	80020d6 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e046      	b.n	80020c4 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8002036:	4b39      	ldr	r3, [pc, #228]	; (800211c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	4a37      	ldr	r2, [pc, #220]	; (8002120 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	461a      	mov	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002050:	2b00      	cmp	r3, #0
 8002052:	dd01      	ble.n	8002058 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8002054:	212e      	movs	r1, #46	; 0x2e
 8002056:	e000      	b.n	800205a <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8002058:	2117      	movs	r1, #23
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3318      	adds	r3, #24
 800205e:	4a31      	ldr	r2, [pc, #196]	; (8002124 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002060:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	3301      	adds	r3, #1
 800206e:	4a2c      	ldr	r2, [pc, #176]	; (8002120 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002070:	5cd3      	ldrb	r3, [r2, r3]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	2b00      	cmp	r3, #0
 8002080:	dd01      	ble.n	8002086 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8002082:	212e      	movs	r1, #46	; 0x2e
 8002084:	e000      	b.n	8002088 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8002086:	2117      	movs	r1, #23
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3320      	adds	r3, #32
 800208c:	4a25      	ldr	r2, [pc, #148]	; (8002124 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800208e:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	3302      	adds	r3, #2
 800209c:	4a20      	ldr	r2, [pc, #128]	; (8002120 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	461a      	mov	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	dd01      	ble.n	80020b4 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 80020b0:	212e      	movs	r1, #46	; 0x2e
 80020b2:	e000      	b.n	80020b6 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 80020b4:	2117      	movs	r1, #23
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3328      	adds	r3, #40	; 0x28
 80020ba:	4a1a      	ldr	r2, [pc, #104]	; (8002124 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80020bc:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3301      	adds	r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b07      	cmp	r3, #7
 80020c8:	d9b5      	bls.n	8002036 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	4a12      	ldr	r2, [pc, #72]	; (800211c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80020d2:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 80020d4:	e01e      	b.n	8002114 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80020de:	d212      	bcs.n	8002106 <HAL_TIM_PWM_PulseFinishedCallback+0xe6>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80020e0:	2318      	movs	r3, #24
 80020e2:	72fb      	strb	r3, [r7, #11]
 80020e4:	e006      	b.n	80020f4 <HAL_TIM_PWM_PulseFinishedCallback+0xd4>
 80020e6:	7afb      	ldrb	r3, [r7, #11]
 80020e8:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80020ea:	2100      	movs	r1, #0
 80020ec:	54d1      	strb	r1, [r2, r3]
 80020ee:	7afb      	ldrb	r3, [r7, #11]
 80020f0:	3301      	adds	r3, #1
 80020f2:	72fb      	strb	r3, [r7, #11]
 80020f4:	7afb      	ldrb	r3, [r7, #11]
 80020f6:	2b2f      	cmp	r3, #47	; 0x2f
 80020f8:	d9f5      	bls.n	80020e6 <HAL_TIM_PWM_PulseFinishedCallback+0xc6>
    ++wr_buf_p;
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	e006      	b.n	8002114 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>
    wr_buf_p = 0;
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 800210c:	2100      	movs	r1, #0
 800210e:	4806      	ldr	r0, [pc, #24]	; (8002128 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8002110:	f004 f9b0 	bl	8006474 <HAL_TIM_PWM_Stop_DMA>
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000554 	.word	0x20000554
 8002120:	20000224 	.word	0x20000224
 8002124:	20000524 	.word	0x20000524
 8002128:	20004c74 	.word	0x20004c74

0800212c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_MspInit+0x44>)
 8002134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002136:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_MspInit+0x44>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6613      	str	r3, [r2, #96]	; 0x60
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_MspInit+0x44>)
 8002140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_MspInit+0x44>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <HAL_MspInit+0x44>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	6593      	str	r3, [r2, #88]	; 0x58
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_MspInit+0x44>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002162:	f002 f90b 	bl	800437c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000

08002174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <NMI_Handler+0x4>

0800217a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <HardFault_Handler+0x4>

08002180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <MemManage_Handler+0x4>

08002186 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218a:	e7fe      	b.n	800218a <BusFault_Handler+0x4>

0800218c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <UsageFault_Handler+0x4>

08002192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c0:	f000 fcb0 	bl	8002b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 80021cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021d0:	f001 fff8 	bl	80041c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <DMA1_Channel1_IRQHandler+0x10>)
 80021de:	f001 fc57 	bl	8003a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000066c 	.word	0x2000066c

080021ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <DMA1_Channel2_IRQHandler+0x10>)
 80021f2:	f001 fc4d 	bl	8003a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20004d9c 	.word	0x20004d9c

08002200 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <DMA1_Channel4_IRQHandler+0x10>)
 8002206:	f001 fc43 	bl	8003a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000604 	.word	0x20000604

08002214 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIM2_IRQHandler+0x10>)
 800221a:	f004 fa1b 	bl	8006654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20004c74 	.word	0x20004c74

08002228 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <TIM3_IRQHandler+0x10>)
 800222e:	f004 fa11 	bl	8006654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20004cc0 	.word	0x20004cc0

0800223c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <USART3_IRQHandler+0x10>)
 8002242:	f005 fbe5 	bl	8007a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20004d0c 	.word	0x20004d0c

08002250 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <DFSDM1_FLT0_IRQHandler+0x10>)
 8002256:	f001 f80b 	bl	8003270 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200005b0 	.word	0x200005b0

08002264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
	return 1;
 8002268:	2301      	movs	r3, #1
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_kill>:

int _kill(int pid, int sig)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800227e:	f008 f9fb 	bl	800a678 <__errno>
 8002282:	4603      	mov	r3, r0
 8002284:	2216      	movs	r2, #22
 8002286:	601a      	str	r2, [r3, #0]
	return -1;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_exit>:

void _exit (int status)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ffe7 	bl	8002274 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022a6:	e7fe      	b.n	80022a6 <_exit+0x12>

080022a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	e00a      	b.n	80022d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ba:	e000      	b.n	80022be <_read+0x16>
 80022bc:	bf00      	nop
 80022be:	4601      	mov	r1, r0
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	60ba      	str	r2, [r7, #8]
 80022c6:	b2ca      	uxtb	r2, r1
 80022c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3301      	adds	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	dbf0      	blt.n	80022ba <_read+0x12>
	}

return len;
 80022d8:	687b      	ldr	r3, [r7, #4]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b086      	sub	sp, #24
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e009      	b.n	8002308 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	60ba      	str	r2, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	e000      	b.n	8002302 <_write+0x20>
 8002300:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	3301      	adds	r3, #1
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	dbf1      	blt.n	80022f4 <_write+0x12>
	}
	return len;
 8002310:	687b      	ldr	r3, [r7, #4]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <_close>:

int _close(int file)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
	return -1;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002342:	605a      	str	r2, [r3, #4]
	return 0;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_isatty>:

int _isatty(int file)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
	return 1;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
	return 0;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f008 f960 	bl	800a678 <__errno>
 80023b8:	4603      	mov	r3, r0
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <_sbrk+0x64>)
 80023d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20040000 	.word	0x20040000
 80023e4:	00000400 	.word	0x00000400
 80023e8:	20000558 	.word	0x20000558
 80023ec:	20004e18 	.word	0x20004e18

080023f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <SystemInit+0x20>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <SystemInit+0x20>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800241a:	4b4f      	ldr	r3, [pc, #316]	; (8002558 <SystemCoreClockUpdate+0x144>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8002426:	4b4c      	ldr	r3, [pc, #304]	; (8002558 <SystemCoreClockUpdate+0x144>)
 8002428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	e005      	b.n	8002442 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8002436:	4b48      	ldr	r3, [pc, #288]	; (8002558 <SystemCoreClockUpdate+0x144>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8002442:	4a46      	ldr	r2, [pc, #280]	; (800255c <SystemCoreClockUpdate+0x148>)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800244c:	4b42      	ldr	r3, [pc, #264]	; (8002558 <SystemCoreClockUpdate+0x144>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d866      	bhi.n	8002526 <SystemCoreClockUpdate+0x112>
 8002458:	a201      	add	r2, pc, #4	; (adr r2, 8002460 <SystemCoreClockUpdate+0x4c>)
 800245a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245e:	bf00      	nop
 8002460:	08002495 	.word	0x08002495
 8002464:	08002527 	.word	0x08002527
 8002468:	08002527 	.word	0x08002527
 800246c:	08002527 	.word	0x08002527
 8002470:	0800249d 	.word	0x0800249d
 8002474:	08002527 	.word	0x08002527
 8002478:	08002527 	.word	0x08002527
 800247c:	08002527 	.word	0x08002527
 8002480:	080024a5 	.word	0x080024a5
 8002484:	08002527 	.word	0x08002527
 8002488:	08002527 	.word	0x08002527
 800248c:	08002527 	.word	0x08002527
 8002490:	080024ad 	.word	0x080024ad
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002494:	4a32      	ldr	r2, [pc, #200]	; (8002560 <SystemCoreClockUpdate+0x14c>)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	6013      	str	r3, [r2, #0]
      break;
 800249a:	e048      	b.n	800252e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800249c:	4b30      	ldr	r3, [pc, #192]	; (8002560 <SystemCoreClockUpdate+0x14c>)
 800249e:	4a31      	ldr	r2, [pc, #196]	; (8002564 <SystemCoreClockUpdate+0x150>)
 80024a0:	601a      	str	r2, [r3, #0]
      break;
 80024a2:	e044      	b.n	800252e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80024a4:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <SystemCoreClockUpdate+0x14c>)
 80024a6:	4a30      	ldr	r2, [pc, #192]	; (8002568 <SystemCoreClockUpdate+0x154>)
 80024a8:	601a      	str	r2, [r3, #0]
      break;
 80024aa:	e040      	b.n	800252e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80024ac:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <SystemCoreClockUpdate+0x144>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <SystemCoreClockUpdate+0x144>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	3301      	adds	r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d003      	beq.n	80024d2 <SystemCoreClockUpdate+0xbe>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d006      	beq.n	80024de <SystemCoreClockUpdate+0xca>
 80024d0:	e00b      	b.n	80024ea <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80024d2:	4a24      	ldr	r2, [pc, #144]	; (8002564 <SystemCoreClockUpdate+0x150>)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	613b      	str	r3, [r7, #16]
          break;
 80024dc:	e00b      	b.n	80024f6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80024de:	4a22      	ldr	r2, [pc, #136]	; (8002568 <SystemCoreClockUpdate+0x154>)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	613b      	str	r3, [r7, #16]
          break;
 80024e8:	e005      	b.n	80024f6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	613b      	str	r3, [r7, #16]
          break;
 80024f4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <SystemCoreClockUpdate+0x144>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	0a1b      	lsrs	r3, r3, #8
 80024fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <SystemCoreClockUpdate+0x144>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0e5b      	lsrs	r3, r3, #25
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	3301      	adds	r3, #1
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <SystemCoreClockUpdate+0x14c>)
 8002522:	6013      	str	r3, [r2, #0]
      break;
 8002524:	e003      	b.n	800252e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8002526:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <SystemCoreClockUpdate+0x14c>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	6013      	str	r3, [r2, #0]
      break;
 800252c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <SystemCoreClockUpdate+0x144>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	4a0c      	ldr	r2, [pc, #48]	; (800256c <SystemCoreClockUpdate+0x158>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <SystemCoreClockUpdate+0x14c>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
 8002548:	4a05      	ldr	r2, [pc, #20]	; (8002560 <SystemCoreClockUpdate+0x14c>)
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40021000 	.word	0x40021000
 800255c:	0800d4f4 	.word	0x0800d4f4
 8002560:	2000000c 	.word	0x2000000c
 8002564:	00f42400 	.word	0x00f42400
 8002568:	007a1200 	.word	0x007a1200
 800256c:	0800d4dc 	.word	0x0800d4dc

08002570 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08e      	sub	sp, #56	; 0x38
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002590:	463b      	mov	r3, r7
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	611a      	str	r2, [r3, #16]
 800259e:	615a      	str	r2, [r3, #20]
 80025a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025a2:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <MX_TIM2_Init+0xe8>)
 80025a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <MX_TIM2_Init+0xe8>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b0:	4b29      	ldr	r3, [pc, #164]	; (8002658 <MX_TIM2_Init+0xe8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 69-1;
 80025b6:	4b28      	ldr	r3, [pc, #160]	; (8002658 <MX_TIM2_Init+0xe8>)
 80025b8:	2244      	movs	r2, #68	; 0x44
 80025ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025bc:	4b26      	ldr	r3, [pc, #152]	; (8002658 <MX_TIM2_Init+0xe8>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c2:	4b25      	ldr	r3, [pc, #148]	; (8002658 <MX_TIM2_Init+0xe8>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025c8:	4823      	ldr	r0, [pc, #140]	; (8002658 <MX_TIM2_Init+0xe8>)
 80025ca:	f003 fbe3 	bl	8005d94 <HAL_TIM_Base_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80025d4:	f7ff fb8c 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e2:	4619      	mov	r1, r3
 80025e4:	481c      	ldr	r0, [pc, #112]	; (8002658 <MX_TIM2_Init+0xe8>)
 80025e6:	f004 fa65 	bl	8006ab4 <HAL_TIM_ConfigClockSource>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80025f0:	f7ff fb7e 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025f4:	4818      	ldr	r0, [pc, #96]	; (8002658 <MX_TIM2_Init+0xe8>)
 80025f6:	f003 fcc4 	bl	8005f82 <HAL_TIM_PWM_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002600:	f7ff fb76 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	4619      	mov	r1, r3
 8002612:	4811      	ldr	r0, [pc, #68]	; (8002658 <MX_TIM2_Init+0xe8>)
 8002614:	f005 f840 	bl	8007698 <HAL_TIMEx_MasterConfigSynchronization>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800261e:	f7ff fb67 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002622:	2360      	movs	r3, #96	; 0x60
 8002624:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002632:	463b      	mov	r3, r7
 8002634:	2200      	movs	r2, #0
 8002636:	4619      	mov	r1, r3
 8002638:	4807      	ldr	r0, [pc, #28]	; (8002658 <MX_TIM2_Init+0xe8>)
 800263a:	f004 f92b 	bl	8006894 <HAL_TIM_PWM_ConfigChannel>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002644:	f7ff fb54 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002648:	4803      	ldr	r0, [pc, #12]	; (8002658 <MX_TIM2_Init+0xe8>)
 800264a:	f000 f8cd 	bl	80027e8 <HAL_TIM_MspPostInit>

}
 800264e:	bf00      	nop
 8002650:	3738      	adds	r7, #56	; 0x38
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20004c74 	.word	0x20004c74

0800265c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002662:	f107 0310 	add.w	r3, r7, #16
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <MX_TIM3_Init+0x94>)
 800267c:	4a1d      	ldr	r2, [pc, #116]	; (80026f4 <MX_TIM3_Init+0x98>)
 800267e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32001-1;
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <MX_TIM3_Init+0x94>)
 8002682:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002686:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <MX_TIM3_Init+0x94>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 51-1;
 800268e:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <MX_TIM3_Init+0x94>)
 8002690:	2232      	movs	r2, #50	; 0x32
 8002692:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002694:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <MX_TIM3_Init+0x94>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <MX_TIM3_Init+0x94>)
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026a0:	4813      	ldr	r0, [pc, #76]	; (80026f0 <MX_TIM3_Init+0x94>)
 80026a2:	f003 fb77 	bl	8005d94 <HAL_TIM_Base_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80026ac:	f7ff fb20 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	4619      	mov	r1, r3
 80026bc:	480c      	ldr	r0, [pc, #48]	; (80026f0 <MX_TIM3_Init+0x94>)
 80026be:	f004 f9f9 	bl	8006ab4 <HAL_TIM_ConfigClockSource>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80026c8:	f7ff fb12 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026cc:	2300      	movs	r3, #0
 80026ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_TIM3_Init+0x94>)
 80026da:	f004 ffdd 	bl	8007698 <HAL_TIMEx_MasterConfigSynchronization>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80026e4:	f7ff fb04 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026e8:	bf00      	nop
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20004cc0 	.word	0x20004cc0
 80026f4:	40000400 	.word	0x40000400

080026f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002708:	d148      	bne.n	800279c <HAL_TIM_Base_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800270a:	4b33      	ldr	r3, [pc, #204]	; (80027d8 <HAL_TIM_Base_MspInit+0xe0>)
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	4a32      	ldr	r2, [pc, #200]	; (80027d8 <HAL_TIM_Base_MspInit+0xe0>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6593      	str	r3, [r2, #88]	; 0x58
 8002716:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_TIM_Base_MspInit+0xe0>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 8002722:	4b2e      	ldr	r3, [pc, #184]	; (80027dc <HAL_TIM_Base_MspInit+0xe4>)
 8002724:	4a2e      	ldr	r2, [pc, #184]	; (80027e0 <HAL_TIM_Base_MspInit+0xe8>)
 8002726:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8002728:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <HAL_TIM_Base_MspInit+0xe4>)
 800272a:	2238      	movs	r2, #56	; 0x38
 800272c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800272e:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_TIM_Base_MspInit+0xe4>)
 8002730:	2210      	movs	r2, #16
 8002732:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002734:	4b29      	ldr	r3, [pc, #164]	; (80027dc <HAL_TIM_Base_MspInit+0xe4>)
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800273a:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_TIM_Base_MspInit+0xe4>)
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002740:	4b26      	ldr	r3, [pc, #152]	; (80027dc <HAL_TIM_Base_MspInit+0xe4>)
 8002742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002746:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002748:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_TIM_Base_MspInit+0xe4>)
 800274a:	2200      	movs	r2, #0
 800274c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800274e:	4b23      	ldr	r3, [pc, #140]	; (80027dc <HAL_TIM_Base_MspInit+0xe4>)
 8002750:	2220      	movs	r2, #32
 8002752:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <HAL_TIM_Base_MspInit+0xe4>)
 8002756:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800275a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800275c:	481f      	ldr	r0, [pc, #124]	; (80027dc <HAL_TIM_Base_MspInit+0xe4>)
 800275e:	f000 ffb9 	bl	80036d4 <HAL_DMA_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8002768:	f7ff fac2 	bl	8001cf0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_tim2_ch1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800276c:	2110      	movs	r1, #16
 800276e:	481b      	ldr	r0, [pc, #108]	; (80027dc <HAL_TIM_Base_MspInit+0xe4>)
 8002770:	f001 fa8e 	bl	8003c90 <HAL_DMA_ConfigChannelAttributes>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 800277a:	f7ff fab9 	bl	8001cf0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a16      	ldr	r2, [pc, #88]	; (80027dc <HAL_TIM_Base_MspInit+0xe4>)
 8002782:	625a      	str	r2, [r3, #36]	; 0x24
 8002784:	4a15      	ldr	r2, [pc, #84]	; (80027dc <HAL_TIM_Base_MspInit+0xe4>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	2100      	movs	r1, #0
 800278e:	202d      	movs	r0, #45	; 0x2d
 8002790:	f000 fac3 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002794:	202d      	movs	r0, #45	; 0x2d
 8002796:	f000 fada 	bl	8002d4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800279a:	e018      	b.n	80027ce <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <HAL_TIM_Base_MspInit+0xec>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d113      	bne.n	80027ce <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_TIM_Base_MspInit+0xe0>)
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <HAL_TIM_Base_MspInit+0xe0>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	6593      	str	r3, [r2, #88]	; 0x58
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_TIM_Base_MspInit+0xe0>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	202e      	movs	r0, #46	; 0x2e
 80027c4:	f000 faa9 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027c8:	202e      	movs	r0, #46	; 0x2e
 80027ca:	f000 fac0 	bl	8002d4e <HAL_NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
 80027dc:	2000066c 	.word	0x2000066c
 80027e0:	40020008 	.word	0x40020008
 80027e4:	40000400 	.word	0x40000400

080027e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002808:	d11b      	bne.n	8002842 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_TIM_MspPostInit+0x64>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	4a0f      	ldr	r2, [pc, #60]	; (800284c <HAL_TIM_MspPostInit+0x64>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_TIM_MspPostInit+0x64>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Neopixel_PWM_Pin;
 8002822:	2301      	movs	r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282e:	2302      	movs	r3, #2
 8002830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002832:	2301      	movs	r3, #1
 8002834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Neopixel_PWM_GPIO_Port, &GPIO_InitStruct);
 8002836:	f107 030c 	add.w	r3, r7, #12
 800283a:	4619      	mov	r1, r3
 800283c:	4804      	ldr	r0, [pc, #16]	; (8002850 <HAL_TIM_MspPostInit+0x68>)
 800283e:	f001 faf7 	bl	8003e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002842:	bf00      	nop
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	42020000 	.word	0x42020000

08002854 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002858:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 800285a:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <MX_USART3_UART_Init+0x94>)
 800285c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800285e:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 8002860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002866:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 8002874:	2200      	movs	r2, #0
 8002876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002878:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 800287a:	220c      	movs	r2, #12
 800287c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002884:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 800288c:	2200      	movs	r2, #0
 800288e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 8002892:	2200      	movs	r2, #0
 8002894:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 8002898:	2200      	movs	r2, #0
 800289a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800289c:	4811      	ldr	r0, [pc, #68]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 800289e:	f004 ffa1 	bl	80077e4 <HAL_UART_Init>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80028a8:	f7ff fa22 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ac:	2100      	movs	r1, #0
 80028ae:	480d      	ldr	r0, [pc, #52]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 80028b0:	f006 fc1d 	bl	80090ee <HAL_UARTEx_SetTxFifoThreshold>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80028ba:	f7ff fa19 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028be:	2100      	movs	r1, #0
 80028c0:	4808      	ldr	r0, [pc, #32]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 80028c2:	f006 fc52 	bl	800916a <HAL_UARTEx_SetRxFifoThreshold>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80028cc:	f7ff fa10 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80028d0:	4804      	ldr	r0, [pc, #16]	; (80028e4 <MX_USART3_UART_Init+0x90>)
 80028d2:	f006 fbd3 	bl	800907c <HAL_UARTEx_DisableFifoMode>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80028dc:	f7ff fa08 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20004d0c 	.word	0x20004d0c
 80028e8:	40004800 	.word	0x40004800

080028ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b0ae      	sub	sp, #184	; 0xb8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002904:	f107 0310 	add.w	r3, r7, #16
 8002908:	2294      	movs	r2, #148	; 0x94
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f007 fedd 	bl	800a6cc <memset>
  if(uartHandle->Instance==USART3)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a3e      	ldr	r2, [pc, #248]	; (8002a10 <HAL_UART_MspInit+0x124>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d175      	bne.n	8002a08 <HAL_UART_MspInit+0x11c>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800291c:	2304      	movs	r3, #4
 800291e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002920:	2300      	movs	r3, #0
 8002922:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002924:	f107 0310 	add.w	r3, r7, #16
 8002928:	4618      	mov	r0, r3
 800292a:	f002 fd1d 	bl	8005368 <HAL_RCCEx_PeriphCLKConfig>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002934:	f7ff f9dc 	bl	8001cf0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002938:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <HAL_UART_MspInit+0x128>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	4a35      	ldr	r2, [pc, #212]	; (8002a14 <HAL_UART_MspInit+0x128>)
 800293e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002942:	6593      	str	r3, [r2, #88]	; 0x58
 8002944:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <HAL_UART_MspInit+0x128>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002950:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <HAL_UART_MspInit+0x128>)
 8002952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002954:	4a2f      	ldr	r2, [pc, #188]	; (8002a14 <HAL_UART_MspInit+0x128>)
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800295c:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <HAL_UART_MspInit+0x128>)
 800295e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = UART3_RX_Pin|UART3_TX_Pin;
 8002968:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800296c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800297c:	2302      	movs	r3, #2
 800297e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002982:	2307      	movs	r3, #7
 8002984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002988:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800298c:	4619      	mov	r1, r3
 800298e:	4822      	ldr	r0, [pc, #136]	; (8002a18 <HAL_UART_MspInit+0x12c>)
 8002990:	f001 fa4e 	bl	8003e30 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002994:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <HAL_UART_MspInit+0x130>)
 8002996:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <HAL_UART_MspInit+0x134>)
 8002998:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800299a:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_UART_MspInit+0x130>)
 800299c:	221e      	movs	r2, #30
 800299e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a0:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <HAL_UART_MspInit+0x130>)
 80029a2:	2210      	movs	r2, #16
 80029a4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_UART_MspInit+0x130>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_UART_MspInit+0x130>)
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029b2:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <HAL_UART_MspInit+0x130>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <HAL_UART_MspInit+0x130>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80029be:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <HAL_UART_MspInit+0x130>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029c4:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_UART_MspInit+0x130>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80029ca:	4814      	ldr	r0, [pc, #80]	; (8002a1c <HAL_UART_MspInit+0x130>)
 80029cc:	f000 fe82 	bl	80036d4 <HAL_DMA_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80029d6:	f7ff f98b 	bl	8001cf0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart3_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80029da:	2110      	movs	r1, #16
 80029dc:	480f      	ldr	r0, [pc, #60]	; (8002a1c <HAL_UART_MspInit+0x130>)
 80029de:	f001 f957 	bl	8003c90 <HAL_DMA_ConfigChannelAttributes>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 80029e8:	f7ff f982 	bl	8001cf0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <HAL_UART_MspInit+0x130>)
 80029f0:	679a      	str	r2, [r3, #120]	; 0x78
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <HAL_UART_MspInit+0x130>)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029f8:	2200      	movs	r2, #0
 80029fa:	2100      	movs	r1, #0
 80029fc:	203f      	movs	r0, #63	; 0x3f
 80029fe:	f000 f98c 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a02:	203f      	movs	r0, #63	; 0x3f
 8002a04:	f000 f9a3 	bl	8002d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a08:	bf00      	nop
 8002a0a:	37b8      	adds	r7, #184	; 0xb8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40004800 	.word	0x40004800
 8002a14:	40021000 	.word	0x40021000
 8002a18:	42020800 	.word	0x42020800
 8002a1c:	20004d9c 	.word	0x20004d9c
 8002a20:	4002001c 	.word	0x4002001c

08002a24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a28:	f7ff fce2 	bl	80023f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a2e:	e003      	b.n	8002a38 <LoopCopyDataInit>

08002a30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002a32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a36:	3104      	adds	r1, #4

08002a38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a38:	480a      	ldr	r0, [pc, #40]	; (8002a64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002a3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a40:	d3f6      	bcc.n	8002a30 <CopyDataInit>
	ldr	r2, =_sbss
 8002a42:	4a0a      	ldr	r2, [pc, #40]	; (8002a6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a44:	e002      	b.n	8002a4c <LoopFillZerobss>

08002a46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a48:	f842 3b04 	str.w	r3, [r2], #4

08002a4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <LoopForever+0x16>)
	cmp	r2, r3
 8002a4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a50:	d3f9      	bcc.n	8002a46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a52:	f007 fe17 	bl	800a684 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a56:	f7fe fe9d 	bl	8001794 <main>

08002a5a <LoopForever>:

LoopForever:
    b LoopForever
 8002a5a:	e7fe      	b.n	8002a5a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002a5c:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8002a60:	08020934 	.word	0x08020934
	ldr	r0, =_sdata
 8002a64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a68:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8002a6c:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8002a70:	20004e18 	.word	0x20004e18

08002a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a74:	e7fe      	b.n	8002a74 <ADC1_2_IRQHandler>

08002a76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002a80:	2004      	movs	r0, #4
 8002a82:	f000 f93f 	bl	8002d04 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8002a86:	f7ff fcc5 	bl	8002414 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f000 f80e 	bl	8002aac <HAL_InitTick>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	71fb      	strb	r3, [r7, #7]
 8002a9a:	e001      	b.n	8002aa0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a9c:	f7ff fb46 	bl	800212c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <HAL_InitTick+0x6c>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d023      	beq.n	8002b08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ac0:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <HAL_InitTick+0x70>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <HAL_InitTick+0x6c>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f947 	bl	8002d6a <HAL_SYSTICK_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10f      	bne.n	8002b02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b07      	cmp	r3, #7
 8002ae6:	d809      	bhi.n	8002afc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295
 8002af0:	f000 f913 	bl	8002d1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_InitTick+0x74>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e007      	b.n	8002b0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	e004      	b.n	8002b0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	e001      	b.n	8002b0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000014 	.word	0x20000014
 8002b1c:	2000000c 	.word	0x2000000c
 8002b20:	20000010 	.word	0x20000010

08002b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_IncTick+0x20>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_IncTick+0x24>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4413      	add	r3, r2
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <HAL_IncTick+0x24>)
 8002b36:	6013      	str	r3, [r2, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000014 	.word	0x20000014
 8002b48:	20004e04 	.word	0x20004e04

08002b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <HAL_GetTick+0x14>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20004e04 	.word	0x20004e04

08002b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	60d3      	str	r3, [r2, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f003 0307 	and.w	r3, r3, #7
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	db0b      	blt.n	8002bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4907      	ldr	r1, [pc, #28]	; (8002c00 <__NVIC_EnableIRQ+0x38>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2001      	movs	r0, #1
 8002bea:	fa00 f202 	lsl.w	r2, r0, r2
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db0a      	blt.n	8002c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	490c      	ldr	r1, [pc, #48]	; (8002c50 <__NVIC_SetPriority+0x4c>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	0152      	lsls	r2, r2, #5
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	440b      	add	r3, r1
 8002c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c2c:	e00a      	b.n	8002c44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4908      	ldr	r1, [pc, #32]	; (8002c54 <__NVIC_SetPriority+0x50>)
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	3b04      	subs	r3, #4
 8002c3c:	0152      	lsls	r2, r2, #5
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	440b      	add	r3, r1
 8002c42:	761a      	strb	r2, [r3, #24]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000e100 	.word	0xe000e100
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f1c3 0307 	rsb	r3, r3, #7
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	bf28      	it	cs
 8002c76:	2303      	movcs	r3, #3
 8002c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3303      	adds	r3, #3
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d902      	bls.n	8002c88 <NVIC_EncodePriority+0x30>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3b04      	subs	r3, #4
 8002c86:	e000      	b.n	8002c8a <NVIC_EncodePriority+0x32>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	4313      	orrs	r3, r2
         );
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3724      	adds	r7, #36	; 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd0:	d301      	bcc.n	8002cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00f      	b.n	8002cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <SysTick_Config+0x40>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cde:	2107      	movs	r1, #7
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	f7ff ff8e 	bl	8002c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <SysTick_Config+0x40>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <SysTick_Config+0x40>)
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	e000e010 	.word	0xe000e010

08002d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff29 	bl	8002b64 <__NVIC_SetPriorityGrouping>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d28:	f7ff ff40 	bl	8002bac <__NVIC_GetPriorityGrouping>
 8002d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f7ff ff90 	bl	8002c58 <NVIC_EncodePriority>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff5f 	bl	8002c04 <__NVIC_SetPriority>
}
 8002d46:	bf00      	nop
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	4603      	mov	r3, r0
 8002d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff33 	bl	8002bc8 <__NVIC_EnableIRQ>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ffa4 	bl	8002cc0 <SysTick_Config>
 8002d78:	4603      	mov	r3, r0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0ac      	b.n	8002ef0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fc1c 	bl	80035d8 <DFSDM_GetChannelFromInstance>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4a55      	ldr	r2, [pc, #340]	; (8002ef8 <HAL_DFSDM_ChannelInit+0x174>)
 8002da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e09f      	b.n	8002ef0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7fe f9e3 	bl	800117c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002db6:	4b51      	ldr	r3, [pc, #324]	; (8002efc <HAL_DFSDM_ChannelInit+0x178>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4a4f      	ldr	r2, [pc, #316]	; (8002efc <HAL_DFSDM_ChannelInit+0x178>)
 8002dbe:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002dc0:	4b4e      	ldr	r3, [pc, #312]	; (8002efc <HAL_DFSDM_ChannelInit+0x178>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d125      	bne.n	8002e14 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002dc8:	4b4d      	ldr	r3, [pc, #308]	; (8002f00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a4c      	ldr	r2, [pc, #304]	; (8002f00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dd2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002dd4:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4948      	ldr	r1, [pc, #288]	; (8002f00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a46      	ldr	r2, [pc, #280]	; (8002f00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002de8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002dec:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	791b      	ldrb	r3, [r3, #4]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d108      	bne.n	8002e08 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002df6:	4b42      	ldr	r3, [pc, #264]	; (8002f00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	041b      	lsls	r3, r3, #16
 8002e02:	493f      	ldr	r1, [pc, #252]	; (8002f00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002e08:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e12:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002e22:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6819      	ldr	r1, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e32:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002e38:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 020f 	bic.w	r2, r2, #15
 8002e50:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002e78:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6899      	ldr	r1, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f002 0207 	and.w	r2, r2, #7
 8002ea4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6859      	ldr	r1, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fb7a 	bl	80035d8 <DFSDM_GetChannelFromInstance>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4904      	ldr	r1, [pc, #16]	; (8002ef8 <HAL_DFSDM_ChannelInit+0x174>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000560 	.word	0x20000560
 8002efc:	2000055c 	.word	0x2000055c
 8002f00:	40016000 	.word	0x40016000

08002f04 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0ca      	b.n	80030d4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a66      	ldr	r2, [pc, #408]	; (80030dc <HAL_DFSDM_FilterInit+0x1b0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d109      	bne.n	8002f5c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d003      	beq.n	8002f58 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0bb      	b.n	80030d4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7fe f80f 	bl	8000f98 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002f88:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	7a1b      	ldrb	r3, [r3, #8]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d108      	bne.n	8002fa4 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e007      	b.n	8002fb4 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002fb2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7a5b      	ldrb	r3, [r3, #9]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d108      	bne.n	8002fce <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e007      	b.n	8002fde <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fec:	f023 0308 	bic.w	r3, r3, #8
 8002ff0:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d108      	bne.n	800300c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	7c1b      	ldrb	r3, [r3, #16]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d108      	bne.n	8003026 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0210 	orr.w	r2, r2, #16
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e007      	b.n	8003036 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0210 	bic.w	r2, r2, #16
 8003034:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7c5b      	ldrb	r3, [r3, #17]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d108      	bne.n	8003050 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0220 	orr.w	r2, r2, #32
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e007      	b.n	8003060 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0220 	bic.w	r2, r2, #32
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800306e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003072:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6959      	ldr	r1, [r3, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	3b01      	subs	r3, #1
 8003084:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003086:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800308e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699a      	ldr	r2, [r3, #24]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7c1a      	ldrb	r2, [r3, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0201 	orr.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40016100 	.word	0x40016100

080030e0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d02e      	beq.n	8003158 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003100:	2bff      	cmp	r3, #255	; 0xff
 8003102:	d029      	beq.n	8003158 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003116:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d10d      	bne.n	800313a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800312c:	431a      	orrs	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	e00a      	b.n	8003150 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
 8003156:	e001      	b.n	800315c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800315c:	7dfb      	ldrb	r3, [r7, #23]
}
 800315e:	4618      	mov	r0, r3
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	75fb      	strb	r3, [r7, #23]
 800318c:	e064      	b.n	8003258 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800319c:	d002      	beq.n	80031a4 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
 80031a2:	e059      	b.n	8003258 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10e      	bne.n	80031ca <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d105      	bne.n	80031ca <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d002      	beq.n	80031ca <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	75fb      	strb	r3, [r7, #23]
 80031c8:	e046      	b.n	8003258 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10b      	bne.n	80031ea <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d107      	bne.n	80031ea <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d102      	bne.n	80031ea <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	75fb      	strb	r3, [r7, #23]
 80031e8:	e036      	b.n	8003258 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d004      	beq.n	80031fe <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d12a      	bne.n	8003254 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	4a18      	ldr	r2, [pc, #96]	; (8003264 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003204:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	4a17      	ldr	r2, [pc, #92]	; (8003268 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003214:	2b20      	cmp	r3, #32
 8003216:	d101      	bne.n	800321c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800321a:	e000      	b.n	800321e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 800321c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	331c      	adds	r3, #28
 800322e:	4619      	mov	r1, r3
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f000 faf6 	bl	8003824 <HAL_DMA_Start_IT>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d006      	beq.n	800324c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	22ff      	movs	r2, #255	; 0xff
 8003242:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800324a:	e005      	b.n	8003258 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f9eb 	bl	8003628 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003252:	e001      	b.n	8003258 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003258:	7dfb      	ldrb	r3, [r7, #23]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	08003599 	.word	0x08003599
 8003268:	080035b5 	.word	0x080035b5
 800326c:	0800357d 	.word	0x0800357d

08003270 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08c      	sub	sp, #48	; 0x30
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00f      	beq.n	80032b2 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2208      	movs	r2, #8
 80032a2:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f95c 	bl	8003568 <HAL_DFSDM_FilterErrorCallback>
 80032b0:	e13b      	b.n	800352a <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00f      	beq.n	80032dc <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2204      	movs	r2, #4
 80032cc:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f947 	bl	8003568 <HAL_DFSDM_FilterErrorCallback>
 80032da:	e126      	b.n	800352a <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d025      	beq.n	8003332 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d020      	beq.n	8003332 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fe fc0b 	bl	8001b0c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f040 8114 	bne.w	8003528 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003304:	2b00      	cmp	r3, #0
 8003306:	f040 810f 	bne.w	8003528 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0202 	bic.w	r2, r2, #2
 8003318:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8003320:	2b02      	cmp	r3, #2
 8003322:	d101      	bne.n	8003328 <HAL_DFSDM_IRQHandler+0xb8>
 8003324:	2201      	movs	r2, #1
 8003326:	e000      	b.n	800332a <HAL_DFSDM_IRQHandler+0xba>
 8003328:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003330:	e0fa      	b.n	8003528 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d034      	beq.n	80033a6 <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8003342:	2b00      	cmp	r3, #0
 8003344:	d02f      	beq.n	80033a6 <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8f8 	bl	800353c <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003350:	1e5a      	subs	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 80e5 	bne.w	800352a <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	2b00      	cmp	r3, #0
 8003366:	d112      	bne.n	800338e <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 800337e:	2b03      	cmp	r3, #3
 8003380:	d101      	bne.n	8003386 <HAL_DFSDM_IRQHandler+0x116>
 8003382:	2201      	movs	r2, #1
 8003384:	e000      	b.n	8003388 <HAL_DFSDM_IRQHandler+0x118>
 8003386:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003394:	2b01      	cmp	r3, #1
 8003396:	d102      	bne.n	800339e <HAL_DFSDM_IRQHandler+0x12e>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339c:	e000      	b.n	80033a0 <HAL_DFSDM_IRQHandler+0x130>
 800339e:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80033a4:	e0c1      	b.n	800352a <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d03d      	beq.n	800342c <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d038      	beq.n	800342c <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_DFSDM_IRQHandler+0x162>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <HAL_DFSDM_IRQHandler+0x164>
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80033e2:	e005      	b.n	80033f0 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	3301      	adds	r3, #1
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d102      	bne.n	8003400 <HAL_DFSDM_IRQHandler+0x190>
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d9f1      	bls.n	80033e4 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d105      	bne.n	8003412 <HAL_DFSDM_IRQHandler+0x1a2>
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	3308      	adds	r3, #8
 800340a:	2201      	movs	r2, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	e003      	b.n	800341a <HAL_DFSDM_IRQHandler+0x1aa>
 8003412:	2201      	movs	r2, #1
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f893 	bl	8003550 <HAL_DFSDM_FilterAwdCallback>
  {
 800342a:	e07e      	b.n	800352a <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a40      	ldr	r2, [pc, #256]	; (8003534 <HAL_DFSDM_IRQHandler+0x2c4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d141      	bne.n	80034ba <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800343c:	2b00      	cmp	r3, #0
 800343e:	d03c      	beq.n	80034ba <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8003446:	2b00      	cmp	r3, #0
 8003448:	d037      	beq.n	80034ba <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	b2db      	uxtb	r3, r3
 8003458:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 800345a:	e02a      	b.n	80034b2 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d01f      	beq.n	80034a6 <HAL_DFSDM_IRQHandler+0x236>
 8003466:	4a34      	ldr	r2, [pc, #208]	; (8003538 <HAL_DFSDM_IRQHandler+0x2c8>)
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d019      	beq.n	80034a6 <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8003472:	4a31      	ldr	r2, [pc, #196]	; (8003538 <HAL_DFSDM_IRQHandler+0x2c8>)
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00f      	beq.n	80034a6 <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	f103 0210 	add.w	r2, r3, #16
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	fa01 f202 	lsl.w	r2, r1, r2
 8003496:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8003498:	4a27      	ldr	r2, [pc, #156]	; (8003538 <HAL_DFSDM_IRQHandler+0x2c8>)
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fd2f 	bl	8002f04 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	3301      	adds	r3, #1
 80034aa:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	085b      	lsrs	r3, r3, #1
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d9d1      	bls.n	800345c <HAL_DFSDM_IRQHandler+0x1ec>
  {
 80034b8:	e037      	b.n	800352a <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <HAL_DFSDM_IRQHandler+0x2c4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d132      	bne.n	800352a <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d02d      	beq.n	800352a <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d028      	beq.n	800352a <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0e1b      	lsrs	r3, r3, #24
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80034e8:	e005      	b.n	80034f6 <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	3301      	adds	r3, #1
 80034ee:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <HAL_DFSDM_IRQHandler+0x296>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d9f1      	bls.n	80034ea <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f103 0218 	add.w	r2, r3, #24
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2101      	movs	r1, #1
 8003512:	fa01 f202 	lsl.w	r2, r1, r2
 8003516:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8003518:	4a07      	ldr	r2, [pc, #28]	; (8003538 <HAL_DFSDM_IRQHandler+0x2c8>)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fcf9 	bl	8002f18 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8003526:	e000      	b.n	800352a <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003528:	bf00      	nop
}
 800352a:	bf00      	nop
 800352c:	3730      	adds	r7, #48	; 0x30
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40016100 	.word	0x40016100
 8003538:	20000560 	.word	0x20000560

0800353c <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7fe fad4 	bl	8001b38 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7fe fab0 	bl	8001b0c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2203      	movs	r2, #3
 80035c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f7ff ffcd 	bl	8003568 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a0e      	ldr	r2, [pc, #56]	; (800361c <DFSDM_GetChannelFromInstance+0x44>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d102      	bne.n	80035ee <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	e00f      	b.n	800360e <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a0b      	ldr	r2, [pc, #44]	; (8003620 <DFSDM_GetChannelFromInstance+0x48>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d102      	bne.n	80035fc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80035f6:	2301      	movs	r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	e008      	b.n	800360e <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a09      	ldr	r2, [pc, #36]	; (8003624 <DFSDM_GetChannelFromInstance+0x4c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d102      	bne.n	800360a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003604:	2302      	movs	r3, #2
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e001      	b.n	800360e <DFSDM_GetChannelFromInstance+0x36>
  }
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800360a:	2303      	movs	r3, #3
 800360c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800360e:	68fb      	ldr	r3, [r7, #12]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40016000 	.word	0x40016000
 8003620:	40016020 	.word	0x40016020
 8003624:	40016040 	.word	0x40016040

08003628 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	2b00      	cmp	r3, #0
 8003636:	d108      	bne.n	800364a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e033      	b.n	80036b2 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003668:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0201 	orr.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003680:	2b03      	cmp	r3, #3
 8003682:	d116      	bne.n	80036b2 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	2b00      	cmp	r3, #0
 800368a:	d107      	bne.n	800369c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0202 	orr.w	r2, r2, #2
 800369a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d102      	bne.n	80036ac <DFSDM_RegConvStart+0x84>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	e000      	b.n	80036ae <DFSDM_RegConvStart+0x86>
 80036ac:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <DFSDM_RegConvStart+0x98>
 80036bc:	2202      	movs	r2, #2
 80036be:	e000      	b.n	80036c2 <DFSDM_RegConvStart+0x9a>
 80036c0:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e08d      	b.n	8003802 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	4b47      	ldr	r3, [pc, #284]	; (800380c <HAL_DMA_Init+0x138>)
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d80f      	bhi.n	8003712 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b45      	ldr	r3, [pc, #276]	; (8003810 <HAL_DMA_Init+0x13c>)
 80036fa:	4413      	add	r3, r2
 80036fc:	4a45      	ldr	r2, [pc, #276]	; (8003814 <HAL_DMA_Init+0x140>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	009a      	lsls	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a42      	ldr	r2, [pc, #264]	; (8003818 <HAL_DMA_Init+0x144>)
 800370e:	649a      	str	r2, [r3, #72]	; 0x48
 8003710:	e00e      	b.n	8003730 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	4b40      	ldr	r3, [pc, #256]	; (800381c <HAL_DMA_Init+0x148>)
 800371a:	4413      	add	r3, r2
 800371c:	4a3d      	ldr	r2, [pc, #244]	; (8003814 <HAL_DMA_Init+0x140>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	009a      	lsls	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a3c      	ldr	r2, [pc, #240]	; (8003820 <HAL_DMA_Init+0x14c>)
 800372e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8003746:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800374a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003754:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003760:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 faf2 	bl	8003d6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003790:	d102      	bne.n	8003798 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80037ac:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d010      	beq.n	80037d8 <HAL_DMA_Init+0x104>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d80c      	bhi.n	80037d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fb12 	bl	8003de8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	e008      	b.n	80037ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40020407 	.word	0x40020407
 8003810:	bffdfff8 	.word	0xbffdfff8
 8003814:	cccccccd 	.word	0xcccccccd
 8003818:	40020000 	.word	0x40020000
 800381c:	bffdfbf8 	.word	0xbffdfbf8
 8003820:	40020400 	.word	0x40020400

08003824 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_DMA_Start_IT+0x20>
 8003840:	2302      	movs	r3, #2
 8003842:	e066      	b.n	8003912 <HAL_DMA_Start_IT+0xee>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d155      	bne.n	8003904 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fa37 	bl	8003cf0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 020e 	orr.w	r2, r2, #14
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e00f      	b.n	80038bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0204 	bic.w	r2, r2, #4
 80038aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 020a 	orr.w	r2, r2, #10
 80038ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0201 	orr.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e005      	b.n	8003910 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800390c:	2302      	movs	r3, #2
 800390e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003910:	7dfb      	ldrb	r3, [r7, #23]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800391a:	b480      	push	{r7}
 800391c:	b085      	sub	sp, #20
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d008      	beq.n	8003944 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2204      	movs	r2, #4
 8003936:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e040      	b.n	80039c6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 020e 	bic.w	r2, r2, #14
 8003952:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003962:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003978:	f003 021c 	and.w	r2, r3, #28
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f202 	lsl.w	r2, r1, r2
 8003986:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003990:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00c      	beq.n	80039b4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80039b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d005      	beq.n	80039f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2204      	movs	r2, #4
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
 80039f4:	e047      	b.n	8003a86 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 020e 	bic.w	r2, r2, #14
 8003a04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0201 	bic.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2a:	f003 021c 	and.w	r2, r3, #28
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a32:	2101      	movs	r1, #1
 8003a34:	fa01 f202 	lsl.w	r2, r1, r2
 8003a38:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a42:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00c      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003a64:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
    }
  }
  return status;
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aac:	f003 031c 	and.w	r3, r3, #28
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d053      	beq.n	8003b64 <HAL_DMA_IRQHandler+0xd4>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04e      	beq.n	8003b64 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d024      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad8:	f003 021c 	and.w	r2, r3, #28
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae0:	2104      	movs	r1, #4
 8003ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae6:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80c0 	beq.w	8003c80 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003b08:	e0ba      	b.n	8003c80 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80b6 	beq.w	8003c80 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003b1c:	e0b0      	b.n	8003c80 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d107      	bne.n	8003b3c <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0204 	bic.w	r2, r2, #4
 8003b3a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b40:	f003 021c 	and.w	r2, r3, #28
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b48:	2104      	movs	r1, #4
 8003b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8093 	beq.w	8003c80 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003b62:	e08d      	b.n	8003c80 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b68:	f003 031c 	and.w	r3, r3, #28
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d04e      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x186>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d049      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d018      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d108      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d06e      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003bae:	e069      	b.n	8003c84 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d065      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003bc0:	e060      	b.n	8003c84 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 020a 	bic.w	r2, r2, #10
 8003bde:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bec:	f003 021c 	and.w	r2, r3, #28
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d03b      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003c14:	e036      	b.n	8003c84 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	f003 031c 	and.w	r3, r3, #28
 8003c1e:	2208      	movs	r2, #8
 8003c20:	409a      	lsls	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02e      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x1f8>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d029      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 020e 	bic.w	r2, r2, #14
 8003c42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c48:	f003 021c 	and.w	r2, r3, #28
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c50:	2101      	movs	r1, #1
 8003c52:	fa01 f202 	lsl.w	r2, r1, r2
 8003c56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c7e:	e002      	b.n	8003c86 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003c80:	bf00      	nop
 8003c82:	e000      	b.n	8003c86 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003c84:	bf00      	nop
  return;
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
}
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d103      	bne.n	8003cac <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	72fb      	strb	r3, [r7, #11]
    return status;
 8003ca8:	7afb      	ldrb	r3, [r7, #11]
 8003caa:	e01b      	b.n	8003ce4 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00d      	beq.n	8003cda <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d004      	beq.n	8003cd2 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e003      	b.n	8003cda <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	601a      	str	r2, [r3, #0]

  return status;
 8003ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003d06:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d004      	beq.n	8003d1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003d18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1e:	f003 021c 	and.w	r2, r3, #28
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d26:	2101      	movs	r1, #1
 8003d28:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	d108      	bne.n	8003d50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8003d4e:	e007      	b.n	8003d60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	60da      	str	r2, [r3, #12]
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d80a      	bhi.n	8003d96 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d8c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6513      	str	r3, [r2, #80]	; 0x50
 8003d94:	e007      	b.n	8003da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	089b      	lsrs	r3, r3, #2
 8003d9c:	009a      	lsls	r2, r3, #2
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003da0:	4413      	add	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	3b08      	subs	r3, #8
 8003dae:	4a0c      	ldr	r2, [pc, #48]	; (8003de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	40020407 	.word	0x40020407
 8003ddc:	40020820 	.word	0x40020820
 8003de0:	cccccccd 	.word	0xcccccccd
 8003de4:	40020880 	.word	0x40020880

08003de8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	461a      	mov	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	2201      	movs	r2, #1
 8003e16:	409a      	lsls	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	1000823f 	.word	0x1000823f
 8003e2c:	40020940 	.word	0x40020940

08003e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e3e:	e158      	b.n	80040f2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	2101      	movs	r1, #1
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 814a 	beq.w	80040ec <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d00b      	beq.n	8003e78 <HAL_GPIO_Init+0x48>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d007      	beq.n	8003e78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e6c:	2b11      	cmp	r3, #17
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b12      	cmp	r3, #18
 8003e76:	d130      	bne.n	8003eda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	2203      	movs	r2, #3
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eae:	2201      	movs	r2, #1
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	f003 0201 	and.w	r2, r3, #1
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43db      	mvns	r3, r3
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0xea>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b12      	cmp	r3, #18
 8003f18:	d123      	bne.n	8003f62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	08da      	lsrs	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3208      	adds	r2, #8
 8003f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f26:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	220f      	movs	r2, #15
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	08da      	lsrs	r2, r3, #3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3208      	adds	r2, #8
 8003f5c:	6939      	ldr	r1, [r7, #16]
 8003f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4013      	ands	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 0203 	and.w	r2, r3, #3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80a4 	beq.w	80040ec <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003fa4:	4a5a      	ldr	r2, [pc, #360]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	089b      	lsrs	r3, r3, #2
 8003faa:	3318      	adds	r3, #24
 8003fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	220f      	movs	r2, #15
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a52      	ldr	r2, [pc, #328]	; (8004114 <HAL_GPIO_Init+0x2e4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d025      	beq.n	800401c <HAL_GPIO_Init+0x1ec>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a51      	ldr	r2, [pc, #324]	; (8004118 <HAL_GPIO_Init+0x2e8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d01f      	beq.n	8004018 <HAL_GPIO_Init+0x1e8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a50      	ldr	r2, [pc, #320]	; (800411c <HAL_GPIO_Init+0x2ec>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d019      	beq.n	8004014 <HAL_GPIO_Init+0x1e4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a4f      	ldr	r2, [pc, #316]	; (8004120 <HAL_GPIO_Init+0x2f0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <HAL_GPIO_Init+0x1e0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a4e      	ldr	r2, [pc, #312]	; (8004124 <HAL_GPIO_Init+0x2f4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00d      	beq.n	800400c <HAL_GPIO_Init+0x1dc>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a4d      	ldr	r2, [pc, #308]	; (8004128 <HAL_GPIO_Init+0x2f8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d007      	beq.n	8004008 <HAL_GPIO_Init+0x1d8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a4c      	ldr	r2, [pc, #304]	; (800412c <HAL_GPIO_Init+0x2fc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d101      	bne.n	8004004 <HAL_GPIO_Init+0x1d4>
 8004000:	2306      	movs	r3, #6
 8004002:	e00c      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 8004004:	2307      	movs	r3, #7
 8004006:	e00a      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 8004008:	2305      	movs	r3, #5
 800400a:	e008      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 800400c:	2304      	movs	r3, #4
 800400e:	e006      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 8004010:	2303      	movs	r3, #3
 8004012:	e004      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 8004014:	2302      	movs	r3, #2
 8004016:	e002      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 800401c:	2300      	movs	r3, #0
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	f002 0203 	and.w	r2, r2, #3
 8004024:	00d2      	lsls	r2, r2, #3
 8004026:	4093      	lsls	r3, r2
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800402e:	4938      	ldr	r1, [pc, #224]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	3318      	adds	r3, #24
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800403c:	4b34      	ldr	r3, [pc, #208]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 800403e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004062:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800406a:	4b29      	ldr	r3, [pc, #164]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 800406c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	43db      	mvns	r3, r3
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4013      	ands	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004090:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004098:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040bc:	4a14      	ldr	r2, [pc, #80]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040c2:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3301      	adds	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f ae9f 	bne.w	8003e40 <HAL_GPIO_Init+0x10>
  }
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	4002f400 	.word	0x4002f400
 8004114:	42020000 	.word	0x42020000
 8004118:	42020400 	.word	0x42020400
 800411c:	42020800 	.word	0x42020800
 8004120:	42020c00 	.word	0x42020c00
 8004124:	42021000 	.word	0x42021000
 8004128:	42021400 	.word	0x42021400
 800412c:	42021800 	.word	0x42021800

08004130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	887b      	ldrh	r3, [r7, #2]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
 800414c:	e001      	b.n	8004152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	807b      	strh	r3, [r7, #2]
 800416c:	4613      	mov	r3, r2
 800416e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004170:	787b      	ldrb	r3, [r7, #1]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004176:	887a      	ldrh	r2, [r7, #2]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800417c:	e002      	b.n	8004184 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800417e:	887a      	ldrh	r2, [r7, #2]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041a2:	887a      	ldrh	r2, [r7, #2]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4013      	ands	r3, r2
 80041a8:	041a      	lsls	r2, r3, #16
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	43d9      	mvns	r1, r3
 80041ae:	887b      	ldrh	r3, [r7, #2]
 80041b0:	400b      	ands	r3, r1
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	619a      	str	r2, [r3, #24]
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80041ce:	4b0f      	ldr	r3, [pc, #60]	; (800420c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80041da:	4a0c      	ldr	r2, [pc, #48]	; (800420c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 f814 	bl	8004210 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if(__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80041e8:	4b08      	ldr	r3, [pc, #32]	; (800420c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d006      	beq.n	8004202 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80041f4:	4a05      	ldr	r2, [pc, #20]	; (800420c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80041f6:	88fb      	ldrh	r3, [r7, #6]
 80041f8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fd fd23 	bl	8001c48 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	4002f400 	.word	0x4002f400

08004210 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
 8004244:	e007      	b.n	8004256 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004246:	4b07      	ldr	r3, [pc, #28]	; (8004264 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 0204 	bic.w	r2, r3, #4
 800424e:	4905      	ldr	r1, [pc, #20]	; (8004264 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004256:	7bfb      	ldrb	r3, [r7, #15]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40030400 	.word	0x40030400

08004268 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_ICACHE_Enable+0x1c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a04      	ldr	r2, [pc, #16]	; (8004284 <HAL_ICACHE_Enable+0x1c>)
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40030400 	.word	0x40030400

08004288 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40007000 	.word	0x40007000

080042a4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80042ac:	4b27      	ldr	r3, [pc, #156]	; (800434c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042b4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80042b6:	f000 f871 	bl	800439c <HAL_PWREx_SMPS_GetEffectiveMode>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c0:	d101      	bne.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e03e      	b.n	8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80042c6:	4b21      	ldr	r3, [pc, #132]	; (800434c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d2:	d101      	bne.n	80042d8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e035      	b.n	8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d101      	bne.n	80042e4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e02f      	b.n	8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80042e4:	4b19      	ldr	r3, [pc, #100]	; (800434c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80042ec:	4917      	ldr	r1, [pc, #92]	; (800434c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80042f4:	4b16      	ldr	r3, [pc, #88]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	4a16      	ldr	r2, [pc, #88]	; (8004354 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	09db      	lsrs	r3, r3, #7
 8004302:	2232      	movs	r2, #50	; 0x32
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	4a13      	ldr	r2, [pc, #76]	; (8004358 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	08db      	lsrs	r3, r3, #3
 8004310:	3301      	adds	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004314:	e002      	b.n	800431c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b01      	subs	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004328:	d102      	bne.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f2      	bne.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433c:	d101      	bne.n	8004342 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e000      	b.n	8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40007000 	.word	0x40007000
 8004350:	2000000c 	.word	0x2000000c
 8004354:	0a7c5ac5 	.word	0x0a7c5ac5
 8004358:	cccccccd 	.word	0xcccccccd

0800435c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4a04      	ldr	r2, [pc, #16]	; (8004378 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800436a:	6053      	str	r3, [r2, #4]
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40007000 	.word	0x40007000

0800437c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4a04      	ldr	r2, [pc, #16]	; (8004398 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800438a:	6093      	str	r3, [r2, #8]
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40007000 	.word	0x40007000

0800439c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80043a2:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80043b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043b6:	607b      	str	r3, [r7, #4]
 80043b8:	e00a      	b.n	80043d0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80043c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	e001      	b.n	80043d0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80043cc:	2300      	movs	r3, #0
 80043ce:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80043d0:	687b      	ldr	r3, [r7, #4]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40007000 	.word	0x40007000

080043e4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d102      	bne.n	80043f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f000 bcd0 	b.w	8004d98 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f8:	4ba3      	ldr	r3, [pc, #652]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 030c 	and.w	r3, r3, #12
 8004400:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004402:	4ba1      	ldr	r3, [pc, #644]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80e9 	beq.w	80045ec <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d006      	beq.n	800442e <HAL_RCC_OscConfig+0x4a>
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b0c      	cmp	r3, #12
 8004424:	f040 8083 	bne.w	800452e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d17f      	bne.n	800452e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800442e:	4b96      	ldr	r3, [pc, #600]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d006      	beq.n	8004448 <HAL_RCC_OscConfig+0x64>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d102      	bne.n	8004448 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f000 bca8 	b.w	8004d98 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444c:	4b8e      	ldr	r3, [pc, #568]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <HAL_RCC_OscConfig+0x7e>
 8004458:	4b8b      	ldr	r3, [pc, #556]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004460:	e005      	b.n	800446e <HAL_RCC_OscConfig+0x8a>
 8004462:	4b89      	ldr	r3, [pc, #548]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800446e:	4293      	cmp	r3, r2
 8004470:	d224      	bcs.n	80044bc <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fe98 	bl	80051ac <RCC_SetFlashLatencyFromMSIRange>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f000 bc88 	b.w	8004d98 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004488:	4b7f      	ldr	r3, [pc, #508]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a7e      	ldr	r2, [pc, #504]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 800448e:	f043 0308 	orr.w	r3, r3, #8
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	4b7c      	ldr	r3, [pc, #496]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	4979      	ldr	r1, [pc, #484]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044a6:	4b78      	ldr	r3, [pc, #480]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	4974      	ldr	r1, [pc, #464]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	604b      	str	r3, [r1, #4]
 80044ba:	e026      	b.n	800450a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044bc:	4b72      	ldr	r3, [pc, #456]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a71      	ldr	r2, [pc, #452]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80044c2:	f043 0308 	orr.w	r3, r3, #8
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b6f      	ldr	r3, [pc, #444]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	496c      	ldr	r1, [pc, #432]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044da:	4b6b      	ldr	r3, [pc, #428]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	4967      	ldr	r1, [pc, #412]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fe57 	bl	80051ac <RCC_SetFlashLatencyFromMSIRange>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	f000 bc47 	b.w	8004d98 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800450a:	f000 fe13 	bl	8005134 <HAL_RCC_GetHCLKFreq>
 800450e:	4603      	mov	r3, r0
 8004510:	4a5e      	ldr	r2, [pc, #376]	; (800468c <HAL_RCC_OscConfig+0x2a8>)
 8004512:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004514:	4b5e      	ldr	r3, [pc, #376]	; (8004690 <HAL_RCC_OscConfig+0x2ac>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f7fe fac7 	bl	8002aac <HAL_InitTick>
 800451e:	4603      	mov	r3, r0
 8004520:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d060      	beq.n	80045ea <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	f000 bc35 	b.w	8004d98 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d039      	beq.n	80045aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004536:	4b54      	ldr	r3, [pc, #336]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a53      	ldr	r2, [pc, #332]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004542:	f7fe fb03 	bl	8002b4c <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004548:	e00f      	b.n	800456a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800454a:	f7fe faff 	bl	8002b4c <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d908      	bls.n	800456a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004558:	4b4b      	ldr	r3, [pc, #300]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	f000 bc17 	b.w	8004d98 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800456a:	4b47      	ldr	r3, [pc, #284]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0e9      	beq.n	800454a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004576:	4b44      	ldr	r3, [pc, #272]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a43      	ldr	r2, [pc, #268]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 800457c:	f043 0308 	orr.w	r3, r3, #8
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	4b41      	ldr	r3, [pc, #260]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	493e      	ldr	r1, [pc, #248]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004590:	4313      	orrs	r3, r2
 8004592:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004594:	4b3c      	ldr	r3, [pc, #240]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	4939      	ldr	r1, [pc, #228]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	604b      	str	r3, [r1, #4]
 80045a8:	e020      	b.n	80045ec <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045aa:	4b37      	ldr	r3, [pc, #220]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a36      	ldr	r2, [pc, #216]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045b6:	f7fe fac9 	bl	8002b4c <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045bc:	e00e      	b.n	80045dc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045be:	f7fe fac5 	bl	8002b4c <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d907      	bls.n	80045dc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045cc:	4b2e      	ldr	r3, [pc, #184]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e3dd      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045dc:	4b2a      	ldr	r3, [pc, #168]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ea      	bne.n	80045be <HAL_RCC_OscConfig+0x1da>
 80045e8:	e000      	b.n	80045ec <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d07e      	beq.n	80046f6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d005      	beq.n	800460a <HAL_RCC_OscConfig+0x226>
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b0c      	cmp	r3, #12
 8004602:	d10e      	bne.n	8004622 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b03      	cmp	r3, #3
 8004608:	d10b      	bne.n	8004622 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460a:	4b1f      	ldr	r3, [pc, #124]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d06e      	beq.n	80046f4 <HAL_RCC_OscConfig+0x310>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d16a      	bne.n	80046f4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e3ba      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462a:	d106      	bne.n	800463a <HAL_RCC_OscConfig+0x256>
 800462c:	4b16      	ldr	r3, [pc, #88]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a15      	ldr	r2, [pc, #84]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	e01d      	b.n	8004676 <HAL_RCC_OscConfig+0x292>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004642:	d10c      	bne.n	800465e <HAL_RCC_OscConfig+0x27a>
 8004644:	4b10      	ldr	r3, [pc, #64]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a0f      	ldr	r2, [pc, #60]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 800464a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	e00b      	b.n	8004676 <HAL_RCC_OscConfig+0x292>
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a09      	ldr	r2, [pc, #36]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	4b07      	ldr	r3, [pc, #28]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a06      	ldr	r2, [pc, #24]	; (8004688 <HAL_RCC_OscConfig+0x2a4>)
 8004670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004674:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d020      	beq.n	80046c0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467e:	f7fe fa65 	bl	8002b4c <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004684:	e015      	b.n	80046b2 <HAL_RCC_OscConfig+0x2ce>
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000
 800468c:	2000000c 	.word	0x2000000c
 8004690:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004694:	f7fe fa5a 	bl	8002b4c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	; 0x64
 80046a0:	d907      	bls.n	80046b2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046a2:	4b9f      	ldr	r3, [pc, #636]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e372      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046b2:	4b9b      	ldr	r3, [pc, #620]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0ea      	beq.n	8004694 <HAL_RCC_OscConfig+0x2b0>
 80046be:	e01a      	b.n	80046f6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fe fa44 	bl	8002b4c <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046c6:	e00e      	b.n	80046e6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c8:	f7fe fa40 	bl	8002b4c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b64      	cmp	r3, #100	; 0x64
 80046d4:	d907      	bls.n	80046e6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046d6:	4b92      	ldr	r3, [pc, #584]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e358      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046e6:	4b8e      	ldr	r3, [pc, #568]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1ea      	bne.n	80046c8 <HAL_RCC_OscConfig+0x2e4>
 80046f2:	e000      	b.n	80046f6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d06c      	beq.n	80047dc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d005      	beq.n	8004714 <HAL_RCC_OscConfig+0x330>
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b0c      	cmp	r3, #12
 800470c:	d119      	bne.n	8004742 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d116      	bne.n	8004742 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004714:	4b82      	ldr	r3, [pc, #520]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_RCC_OscConfig+0x348>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e335      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472c:	4b7c      	ldr	r3, [pc, #496]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	061b      	lsls	r3, r3, #24
 800473a:	4979      	ldr	r1, [pc, #484]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004740:	e04c      	b.n	80047dc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d029      	beq.n	800479e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800474a:	4b75      	ldr	r3, [pc, #468]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a74      	ldr	r2, [pc, #464]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 8004750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7fe f9f9 	bl	8002b4c <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800475c:	e00e      	b.n	800477c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800475e:	f7fe f9f5 	bl	8002b4c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d907      	bls.n	800477c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800476c:	4b6c      	ldr	r3, [pc, #432]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e30d      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800477c:	4b68      	ldr	r3, [pc, #416]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0ea      	beq.n	800475e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004788:	4b65      	ldr	r3, [pc, #404]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	4962      	ldr	r1, [pc, #392]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
 800479c:	e01e      	b.n	80047dc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800479e:	4b60      	ldr	r3, [pc, #384]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a5f      	ldr	r2, [pc, #380]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 80047a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7fe f9cf 	bl	8002b4c <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047b0:	e00e      	b.n	80047d0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b2:	f7fe f9cb 	bl	8002b4c <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d907      	bls.n	80047d0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047c0:	4b57      	ldr	r3, [pc, #348]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e2e3      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047d0:	4b53      	ldr	r3, [pc, #332]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ea      	bne.n	80047b2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d05f      	beq.n	80048a8 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d038      	beq.n	8004862 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d108      	bne.n	800480a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80047f8:	4b49      	ldr	r3, [pc, #292]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 80047fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fe:	4a48      	ldr	r2, [pc, #288]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 8004800:	f023 0310 	bic.w	r3, r3, #16
 8004804:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004808:	e007      	b.n	800481a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800480a:	4b45      	ldr	r3, [pc, #276]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 800480c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004810:	4a43      	ldr	r2, [pc, #268]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 8004812:	f043 0310 	orr.w	r3, r3, #16
 8004816:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800481a:	4b41      	ldr	r3, [pc, #260]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 800481c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004820:	4a3f      	ldr	r2, [pc, #252]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482a:	f7fe f98f 	bl	8002b4c <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004830:	e00f      	b.n	8004852 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004832:	f7fe f98b 	bl	8002b4c <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b07      	cmp	r3, #7
 800483e:	d908      	bls.n	8004852 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004840:	4b37      	ldr	r3, [pc, #220]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 8004842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e2a2      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004852:	4b33      	ldr	r3, [pc, #204]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 8004854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0e8      	beq.n	8004832 <HAL_RCC_OscConfig+0x44e>
 8004860:	e022      	b.n	80048a8 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004862:	4b2f      	ldr	r3, [pc, #188]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 8004864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004868:	4a2d      	ldr	r2, [pc, #180]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004872:	f7fe f96b 	bl	8002b4c <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004878:	e00f      	b.n	800489a <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800487a:	f7fe f967 	bl	8002b4c <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b07      	cmp	r3, #7
 8004886:	d908      	bls.n	800489a <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004888:	4b25      	ldr	r3, [pc, #148]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 800488a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e27e      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800489a:	4b21      	ldr	r3, [pc, #132]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 800489c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1e8      	bne.n	800487a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 8131 	beq.w	8004b18 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b6:	2300      	movs	r3, #0
 80048b8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048ba:	4b19      	ldr	r3, [pc, #100]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 80048bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10d      	bne.n	80048e2 <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c6:	4b16      	ldr	r3, [pc, #88]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ca:	4a15      	ldr	r2, [pc, #84]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 80048cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6593      	str	r3, [r2, #88]	; 0x58
 80048d2:	4b13      	ldr	r3, [pc, #76]	; (8004920 <HAL_RCC_OscConfig+0x53c>)
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048de:	2301      	movs	r3, #1
 80048e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e2:	4b10      	ldr	r3, [pc, #64]	; (8004924 <HAL_RCC_OscConfig+0x540>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d122      	bne.n	8004934 <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ee:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <HAL_RCC_OscConfig+0x540>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a0c      	ldr	r2, [pc, #48]	; (8004924 <HAL_RCC_OscConfig+0x540>)
 80048f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fa:	f7fe f927 	bl	8002b4c <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004900:	e012      	b.n	8004928 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004902:	f7fe f923 	bl	8002b4c <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d90b      	bls.n	8004928 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <HAL_RCC_OscConfig+0x540>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e23b      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
 8004920:	40021000 	.word	0x40021000
 8004924:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004928:	4bb8      	ldr	r3, [pc, #736]	; (8004c0c <HAL_RCC_OscConfig+0x828>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0e6      	beq.n	8004902 <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01f      	beq.n	8004980 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d010      	beq.n	800496e <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800494c:	4bb0      	ldr	r3, [pc, #704]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004952:	4aaf      	ldr	r2, [pc, #700]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004954:	f043 0304 	orr.w	r3, r3, #4
 8004958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800495c:	4bac      	ldr	r3, [pc, #688]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	4aab      	ldr	r2, [pc, #684]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800496c:	e018      	b.n	80049a0 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800496e:	4ba8      	ldr	r3, [pc, #672]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	4aa6      	ldr	r2, [pc, #664]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800497e:	e00f      	b.n	80049a0 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004980:	4ba3      	ldr	r3, [pc, #652]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004986:	4aa2      	ldr	r2, [pc, #648]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004990:	4b9f      	ldr	r3, [pc, #636]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	4a9e      	ldr	r2, [pc, #632]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004998:	f023 0304 	bic.w	r3, r3, #4
 800499c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d068      	beq.n	8004a7a <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a8:	f7fe f8d0 	bl	8002b4c <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ae:	e011      	b.n	80049d4 <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b0:	f7fe f8cc 	bl	8002b4c <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80049be:	4293      	cmp	r3, r2
 80049c0:	d908      	bls.n	80049d4 <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c2:	4b93      	ldr	r3, [pc, #588]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e1e1      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d4:	4b8e      	ldr	r3, [pc, #568]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0e6      	beq.n	80049b0 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d022      	beq.n	8004a34 <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049ee:	4b88      	ldr	r3, [pc, #544]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f4:	4a86      	ldr	r2, [pc, #536]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 80049f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80049fe:	e011      	b.n	8004a24 <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fe f8a4 	bl	8002b4c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d908      	bls.n	8004a24 <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a12:	4b7f      	ldr	r3, [pc, #508]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e1b9      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a24:	4b7a      	ldr	r3, [pc, #488]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0e6      	beq.n	8004a00 <HAL_RCC_OscConfig+0x61c>
 8004a32:	e068      	b.n	8004b06 <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a34:	4b76      	ldr	r3, [pc, #472]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3a:	4a75      	ldr	r2, [pc, #468]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a44:	e011      	b.n	8004a6a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a46:	f7fe f881 	bl	8002b4c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d908      	bls.n	8004a6a <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a58:	4b6d      	ldr	r3, [pc, #436]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e196      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a6a:	4b69      	ldr	r3, [pc, #420]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e6      	bne.n	8004a46 <HAL_RCC_OscConfig+0x662>
 8004a78:	e045      	b.n	8004b06 <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7a:	f7fe f867 	bl	8002b4c <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a80:	e011      	b.n	8004aa6 <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fe f863 	bl	8002b4c <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d908      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a94:	4b5e      	ldr	r3, [pc, #376]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e178      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004aa6:	4b5a      	ldr	r3, [pc, #360]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e6      	bne.n	8004a82 <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004ab4:	4b56      	ldr	r3, [pc, #344]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d021      	beq.n	8004b06 <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ac2:	4b53      	ldr	r3, [pc, #332]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac8:	4a51      	ldr	r2, [pc, #324]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ad2:	e011      	b.n	8004af8 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad4:	f7fe f83a 	bl	8002b4c <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d908      	bls.n	8004af8 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ae6:	4b4a      	ldr	r3, [pc, #296]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e14f      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004af8:	4b45      	ldr	r3, [pc, #276]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e6      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b06:	7ffb      	ldrb	r3, [r7, #31]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d105      	bne.n	8004b18 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b0c:	4b40      	ldr	r3, [pc, #256]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	4a3f      	ldr	r2, [pc, #252]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d04a      	beq.n	8004bba <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d023      	beq.n	8004b74 <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b2c:	4b38      	ldr	r3, [pc, #224]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b32:	4a37      	ldr	r2, [pc, #220]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004b34:	f043 0301 	orr.w	r3, r3, #1
 8004b38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3c:	f7fe f806 	bl	8002b4c <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b42:	e00f      	b.n	8004b64 <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b44:	f7fe f802 	bl	8002b4c <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d908      	bls.n	8004b64 <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b52:	4b2f      	ldr	r3, [pc, #188]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e119      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b64:	4b2a      	ldr	r3, [pc, #168]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0e8      	beq.n	8004b44 <HAL_RCC_OscConfig+0x760>
 8004b72:	e022      	b.n	8004bba <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b74:	4b26      	ldr	r3, [pc, #152]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b7a:	4a25      	ldr	r2, [pc, #148]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b84:	f7fd ffe2 	bl	8002b4c <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b8a:	e00f      	b.n	8004bac <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b8c:	f7fd ffde 	bl	8002b4c <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d908      	bls.n	8004bac <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e0f5      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bac:	4b18      	ldr	r3, [pc, #96]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e8      	bne.n	8004b8c <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80e9 	beq.w	8004d96 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bc4:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 030c 	and.w	r3, r3, #12
 8004bcc:	2b0c      	cmp	r3, #12
 8004bce:	f000 80a3 	beq.w	8004d18 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d16a      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a0c      	ldr	r2, [pc, #48]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be6:	f7fd ffb1 	bl	8002b4c <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bec:	e012      	b.n	8004c14 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bee:	f7fd ffad 	bl	8002b4c <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d90b      	bls.n	8004c14 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bfc:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <HAL_RCC_OscConfig+0x82c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0c5      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
 8004c0c:	40007000 	.word	0x40007000
 8004c10:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c14:	4b62      	ldr	r3, [pc, #392]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e6      	bne.n	8004bee <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c20:	4b5f      	ldr	r3, [pc, #380]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	4b5f      	ldr	r3, [pc, #380]	; (8004da4 <HAL_RCC_OscConfig+0x9c0>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c30:	3a01      	subs	r2, #1
 8004c32:	0112      	lsls	r2, r2, #4
 8004c34:	4311      	orrs	r1, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c3a:	0212      	lsls	r2, r2, #8
 8004c3c:	4311      	orrs	r1, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c42:	0852      	lsrs	r2, r2, #1
 8004c44:	3a01      	subs	r2, #1
 8004c46:	0552      	lsls	r2, r2, #21
 8004c48:	4311      	orrs	r1, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c4e:	0852      	lsrs	r2, r2, #1
 8004c50:	3a01      	subs	r2, #1
 8004c52:	0652      	lsls	r2, r2, #25
 8004c54:	4311      	orrs	r1, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c5a:	06d2      	lsls	r2, r2, #27
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	4950      	ldr	r1, [pc, #320]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c64:	4b4e      	ldr	r3, [pc, #312]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a4d      	ldr	r2, [pc, #308]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c70:	4b4b      	ldr	r3, [pc, #300]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4a4a      	ldr	r2, [pc, #296]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fd ff66 	bl	8002b4c <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c82:	e00e      	b.n	8004ca2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c84:	f7fd ff62 	bl	8002b4c <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d907      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c92:	4b43      	ldr	r3, [pc, #268]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e07a      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ca2:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0ea      	beq.n	8004c84 <HAL_RCC_OscConfig+0x8a0>
 8004cae:	e072      	b.n	8004d96 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb0:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a3a      	ldr	r2, [pc, #232]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004cbc:	4b38      	ldr	r3, [pc, #224]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004cc8:	4b35      	ldr	r3, [pc, #212]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a34      	ldr	r2, [pc, #208]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004cce:	f023 0303 	bic.w	r3, r3, #3
 8004cd2:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004cd4:	4b32      	ldr	r3, [pc, #200]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4a31      	ldr	r2, [pc, #196]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004cda:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fd ff32 	bl	8002b4c <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cea:	e00e      	b.n	8004d0a <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fd ff2e 	bl	8002b4c <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d907      	bls.n	8004d0a <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cfa:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e046      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d0a:	4b25      	ldr	r3, [pc, #148]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1ea      	bne.n	8004cec <HAL_RCC_OscConfig+0x908>
 8004d16:	e03e      	b.n	8004d96 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e039      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004d24:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <HAL_RCC_OscConfig+0x9bc>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f003 0203 	and.w	r2, r3, #3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d12c      	bne.n	8004d92 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d42:	3b01      	subs	r3, #1
 8004d44:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d123      	bne.n	8004d92 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d11b      	bne.n	8004d92 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d113      	bne.n	8004d92 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	085b      	lsrs	r3, r3, #1
 8004d76:	3b01      	subs	r3, #1
 8004d78:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d109      	bne.n	8004d92 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d001      	beq.n	8004d96 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000
 8004da4:	019f800c 	.word	0x019f800c

08004da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e10d      	b.n	8004fdc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b88      	ldr	r3, [pc, #544]	; (8004fe4 <HAL_RCC_ClockConfig+0x23c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d910      	bls.n	8004df0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	4b85      	ldr	r3, [pc, #532]	; (8004fe4 <HAL_RCC_ClockConfig+0x23c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 020f 	bic.w	r2, r3, #15
 8004dd6:	4983      	ldr	r1, [pc, #524]	; (8004fe4 <HAL_RCC_ClockConfig+0x23c>)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dde:	4b81      	ldr	r3, [pc, #516]	; (8004fe4 <HAL_RCC_ClockConfig+0x23c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d001      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0f5      	b.n	8004fdc <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8094 	beq.w	8004f26 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d134      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e06:	4b78      	ldr	r3, [pc, #480]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e0e2      	b.n	8004fdc <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e16:	f000 fa2d 	bl	8005274 <RCC_GetSysClockFreqFromPLLSource>
 8004e1a:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4a73      	ldr	r2, [pc, #460]	; (8004fec <HAL_RCC_ClockConfig+0x244>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d956      	bls.n	8004ed2 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004e24:	4b70      	ldr	r3, [pc, #448]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e30:	4b6d      	ldr	r3, [pc, #436]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e38:	4a6b      	ldr	r2, [pc, #428]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e40:	2380      	movs	r3, #128	; 0x80
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e045      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d03f      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d13b      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e5a:	4b63      	ldr	r3, [pc, #396]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e62:	4a61      	ldr	r2, [pc, #388]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e6a:	2380      	movs	r3, #128	; 0x80
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e030      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d107      	bne.n	8004e88 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e78:	4b5b      	ldr	r3, [pc, #364]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d115      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0a9      	b.n	8004fdc <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d107      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e90:	4b55      	ldr	r3, [pc, #340]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d109      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e09d      	b.n	8004fdc <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea0:	4b51      	ldr	r3, [pc, #324]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e095      	b.n	8004fdc <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004eb0:	f000 f8a2 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8004eb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	4a4c      	ldr	r2, [pc, #304]	; (8004fec <HAL_RCC_ClockConfig+0x244>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d909      	bls.n	8004ed2 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ebe:	4b4a      	ldr	r3, [pc, #296]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec6:	4a48      	ldr	r2, [pc, #288]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ecc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ece:	2380      	movs	r3, #128	; 0x80
 8004ed0:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ed2:	4b45      	ldr	r3, [pc, #276]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f023 0203 	bic.w	r2, r3, #3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4942      	ldr	r1, [pc, #264]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee4:	f7fd fe32 	bl	8002b4c <HAL_GetTick>
 8004ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eea:	e013      	b.n	8004f14 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eec:	f7fd fe2e 	bl	8002b4c <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d90a      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	4b3a      	ldr	r3, [pc, #232]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 020c 	and.w	r2, r3, #12
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e063      	b.n	8004fdc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f14:	4b34      	ldr	r3, [pc, #208]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 020c 	and.w	r2, r3, #12
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d1e2      	bne.n	8004eec <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f32:	4b2d      	ldr	r3, [pc, #180]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	492a      	ldr	r1, [pc, #168]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	608b      	str	r3, [r1, #8]
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b80      	cmp	r3, #128	; 0x80
 8004f4a:	d105      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f4c:	4b26      	ldr	r3, [pc, #152]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	4a25      	ldr	r2, [pc, #148]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f56:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f58:	4b22      	ldr	r3, [pc, #136]	; (8004fe4 <HAL_RCC_ClockConfig+0x23c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d210      	bcs.n	8004f88 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f66:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <HAL_RCC_ClockConfig+0x23c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 020f 	bic.w	r2, r3, #15
 8004f6e:	491d      	ldr	r1, [pc, #116]	; (8004fe4 <HAL_RCC_ClockConfig+0x23c>)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f76:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <HAL_RCC_ClockConfig+0x23c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d001      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e029      	b.n	8004fdc <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d008      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f94:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4911      	ldr	r1, [pc, #68]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d009      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	4909      	ldr	r1, [pc, #36]	; (8004fe8 <HAL_RCC_ClockConfig+0x240>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004fc6:	f000 f8b5 	bl	8005134 <HAL_RCC_GetHCLKFreq>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4a08      	ldr	r2, [pc, #32]	; (8004ff0 <HAL_RCC_ClockConfig+0x248>)
 8004fce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004fd0:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <HAL_RCC_ClockConfig+0x24c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fd fd69 	bl	8002aac <HAL_InitTick>
 8004fda:	4603      	mov	r3, r0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40022000 	.word	0x40022000
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	04c4b400 	.word	0x04c4b400
 8004ff0:	2000000c 	.word	0x2000000c
 8004ff4:	20000010 	.word	0x20000010

08004ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b089      	sub	sp, #36	; 0x24
 8004ffc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	2300      	movs	r3, #0
 8005004:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005006:	4b47      	ldr	r3, [pc, #284]	; (8005124 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 030c 	and.w	r3, r3, #12
 800500e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005010:	4b44      	ldr	r3, [pc, #272]	; (8005124 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_RCC_GetSysClockFreq+0x34>
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b0c      	cmp	r3, #12
 8005024:	d121      	bne.n	800506a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d11e      	bne.n	800506a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800502c:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <HAL_RCC_GetSysClockFreq+0x12c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d107      	bne.n	8005048 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005038:	4b3a      	ldr	r3, [pc, #232]	; (8005124 <HAL_RCC_GetSysClockFreq+0x12c>)
 800503a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800503e:	0a1b      	lsrs	r3, r3, #8
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	e005      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005048:	4b36      	ldr	r3, [pc, #216]	; (8005124 <HAL_RCC_GetSysClockFreq+0x12c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005054:	4a34      	ldr	r2, [pc, #208]	; (8005128 <HAL_RCC_GetSysClockFreq+0x130>)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800505c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10d      	bne.n	8005080 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005068:	e00a      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d102      	bne.n	8005076 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005070:	4b2e      	ldr	r3, [pc, #184]	; (800512c <HAL_RCC_GetSysClockFreq+0x134>)
 8005072:	61bb      	str	r3, [r7, #24]
 8005074:	e004      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b08      	cmp	r3, #8
 800507a:	d101      	bne.n	8005080 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800507c:	4b2c      	ldr	r3, [pc, #176]	; (8005130 <HAL_RCC_GetSysClockFreq+0x138>)
 800507e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b0c      	cmp	r3, #12
 8005084:	d146      	bne.n	8005114 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005086:	4b27      	ldr	r3, [pc, #156]	; (8005124 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005090:	4b24      	ldr	r3, [pc, #144]	; (8005124 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	3301      	adds	r3, #1
 800509c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d003      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0xb4>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d00d      	beq.n	80050c6 <HAL_RCC_GetSysClockFreq+0xce>
 80050aa:	e019      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050ac:	4a1f      	ldr	r2, [pc, #124]	; (800512c <HAL_RCC_GetSysClockFreq+0x134>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b4:	4a1b      	ldr	r2, [pc, #108]	; (8005124 <HAL_RCC_GetSysClockFreq+0x12c>)
 80050b6:	68d2      	ldr	r2, [r2, #12]
 80050b8:	0a12      	lsrs	r2, r2, #8
 80050ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	617b      	str	r3, [r7, #20]
        break;
 80050c4:	e019      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050c6:	4a1a      	ldr	r2, [pc, #104]	; (8005130 <HAL_RCC_GetSysClockFreq+0x138>)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ce:	4a15      	ldr	r2, [pc, #84]	; (8005124 <HAL_RCC_GetSysClockFreq+0x12c>)
 80050d0:	68d2      	ldr	r2, [r2, #12]
 80050d2:	0a12      	lsrs	r2, r2, #8
 80050d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050d8:	fb02 f303 	mul.w	r3, r2, r3
 80050dc:	617b      	str	r3, [r7, #20]
        break;
 80050de:	e00c      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	4a0e      	ldr	r2, [pc, #56]	; (8005124 <HAL_RCC_GetSysClockFreq+0x12c>)
 80050ea:	68d2      	ldr	r2, [r2, #12]
 80050ec:	0a12      	lsrs	r2, r2, #8
 80050ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	617b      	str	r3, [r7, #20]
        break;
 80050f8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80050fa:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <HAL_RCC_GetSysClockFreq+0x12c>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	0e5b      	lsrs	r3, r3, #25
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	3301      	adds	r3, #1
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005112:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005114:	69bb      	ldr	r3, [r7, #24]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3724      	adds	r7, #36	; 0x24
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40021000 	.word	0x40021000
 8005128:	0800d4f4 	.word	0x0800d4f4
 800512c:	00f42400 	.word	0x00f42400
 8005130:	007a1200 	.word	0x007a1200

08005134 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005138:	f7ff ff5e 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 800513c:	4602      	mov	r2, r0
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <HAL_RCC_GetHCLKFreq+0x20>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	4903      	ldr	r1, [pc, #12]	; (8005158 <HAL_RCC_GetHCLKFreq+0x24>)
 800514a:	5ccb      	ldrb	r3, [r1, r3]
 800514c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005150:	4618      	mov	r0, r3
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40021000 	.word	0x40021000
 8005158:	0800d4dc 	.word	0x0800d4dc

0800515c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005160:	f7ff ffe8 	bl	8005134 <HAL_RCC_GetHCLKFreq>
 8005164:	4602      	mov	r2, r0
 8005166:	4b05      	ldr	r3, [pc, #20]	; (800517c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	0a1b      	lsrs	r3, r3, #8
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	4903      	ldr	r1, [pc, #12]	; (8005180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005178:	4618      	mov	r0, r3
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40021000 	.word	0x40021000
 8005180:	0800d4ec 	.word	0x0800d4ec

08005184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005188:	f7ff ffd4 	bl	8005134 <HAL_RCC_GetHCLKFreq>
 800518c:	4602      	mov	r2, r0
 800518e:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	0adb      	lsrs	r3, r3, #11
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	4903      	ldr	r1, [pc, #12]	; (80051a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800519a:	5ccb      	ldrb	r3, [r1, r3]
 800519c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40021000 	.word	0x40021000
 80051a8:	0800d4ec 	.word	0x0800d4ec

080051ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051b8:	4b2c      	ldr	r3, [pc, #176]	; (800526c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051c4:	f7ff f860 	bl	8004288 <HAL_PWREx_GetVoltageRange>
 80051c8:	6138      	str	r0, [r7, #16]
 80051ca:	e014      	b.n	80051f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051cc:	4b27      	ldr	r3, [pc, #156]	; (800526c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	4a26      	ldr	r2, [pc, #152]	; (800526c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80051d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d6:	6593      	str	r3, [r2, #88]	; 0x58
 80051d8:	4b24      	ldr	r3, [pc, #144]	; (800526c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051e4:	f7ff f850 	bl	8004288 <HAL_PWREx_GetVoltageRange>
 80051e8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051ea:	4b20      	ldr	r3, [pc, #128]	; (800526c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	4a1f      	ldr	r2, [pc, #124]	; (800526c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80051f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005202:	d10b      	bne.n	800521c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b80      	cmp	r3, #128	; 0x80
 8005208:	d919      	bls.n	800523e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2ba0      	cmp	r3, #160	; 0xa0
 800520e:	d902      	bls.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005210:	2302      	movs	r3, #2
 8005212:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005214:	e013      	b.n	800523e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005216:	2301      	movs	r3, #1
 8005218:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800521a:	e010      	b.n	800523e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b80      	cmp	r3, #128	; 0x80
 8005220:	d902      	bls.n	8005228 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005222:	2303      	movs	r3, #3
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	e00a      	b.n	800523e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b80      	cmp	r3, #128	; 0x80
 800522c:	d102      	bne.n	8005234 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800522e:	2302      	movs	r3, #2
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e004      	b.n	800523e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b70      	cmp	r3, #112	; 0x70
 8005238:	d101      	bne.n	800523e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800523a:	2301      	movs	r3, #1
 800523c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800523e:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f023 020f 	bic.w	r2, r3, #15
 8005246:	490a      	ldr	r1, [pc, #40]	; (8005270 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800524e:	4b08      	ldr	r3, [pc, #32]	; (8005270 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	429a      	cmp	r2, r3
 800525a:	d001      	beq.n	8005260 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000
 8005270:	40022000 	.word	0x40022000

08005274 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800527e:	4b36      	ldr	r3, [pc, #216]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	2b01      	cmp	r3, #1
 8005288:	d118      	bne.n	80052bc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800528a:	4b33      	ldr	r3, [pc, #204]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d107      	bne.n	80052a6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005296:	4b30      	ldr	r3, [pc, #192]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529c:	0a1b      	lsrs	r3, r3, #8
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	e005      	b.n	80052b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052a6:	4b2c      	ldr	r3, [pc, #176]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	091b      	lsrs	r3, r3, #4
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80052b2:	4a2a      	ldr	r2, [pc, #168]	; (800535c <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ba:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052bc:	4b26      	ldr	r3, [pc, #152]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052c6:	4b24      	ldr	r3, [pc, #144]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	091b      	lsrs	r3, r3, #4
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	3301      	adds	r3, #1
 80052d2:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d003      	beq.n	80052e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d00d      	beq.n	80052fc <RCC_GetSysClockFreqFromPLLSource+0x88>
 80052e0:	e019      	b.n	8005316 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052e2:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ea:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80052ec:	68d2      	ldr	r2, [r2, #12]
 80052ee:	0a12      	lsrs	r2, r2, #8
 80052f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052f4:	fb02 f303 	mul.w	r3, r2, r3
 80052f8:	613b      	str	r3, [r7, #16]
      break;
 80052fa:	e019      	b.n	8005330 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052fc:	4a19      	ldr	r2, [pc, #100]	; (8005364 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	4a14      	ldr	r2, [pc, #80]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005306:	68d2      	ldr	r2, [r2, #12]
 8005308:	0a12      	lsrs	r2, r2, #8
 800530a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	613b      	str	r3, [r7, #16]
      break;
 8005314:	e00c      	b.n	8005330 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	4a0e      	ldr	r2, [pc, #56]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005320:	68d2      	ldr	r2, [r2, #12]
 8005322:	0a12      	lsrs	r2, r2, #8
 8005324:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005328:	fb02 f303 	mul.w	r3, r2, r3
 800532c:	613b      	str	r3, [r7, #16]
      break;
 800532e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	0e5b      	lsrs	r3, r3, #25
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	3301      	adds	r3, #1
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800534a:	683b      	ldr	r3, [r7, #0]
}
 800534c:	4618      	mov	r0, r3
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	40021000 	.word	0x40021000
 800535c:	0800d4f4 	.word	0x0800d4f4
 8005360:	00f42400 	.word	0x00f42400
 8005364:	007a1200 	.word	0x007a1200

08005368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005370:	2300      	movs	r3, #0
 8005372:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005374:	2300      	movs	r3, #0
 8005376:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005380:	2b00      	cmp	r3, #0
 8005382:	d040      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005388:	2b80      	cmp	r3, #128	; 0x80
 800538a:	d02a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800538c:	2b80      	cmp	r3, #128	; 0x80
 800538e:	d825      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005390:	2b60      	cmp	r3, #96	; 0x60
 8005392:	d026      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005394:	2b60      	cmp	r3, #96	; 0x60
 8005396:	d821      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005398:	2b40      	cmp	r3, #64	; 0x40
 800539a:	d006      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x42>
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d81d      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d009      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d010      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x62>
 80053a8:	e018      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053aa:	4b8f      	ldr	r3, [pc, #572]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	4a8e      	ldr	r2, [pc, #568]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80053b6:	e015      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3304      	adds	r3, #4
 80053bc:	2100      	movs	r1, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fb56 	bl	8005a70 <RCCEx_PLLSAI1_Config>
 80053c4:	4603      	mov	r3, r0
 80053c6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80053c8:	e00c      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3320      	adds	r3, #32
 80053ce:	2100      	movs	r1, #0
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fc33 	bl	8005c3c <RCCEx_PLLSAI2_Config>
 80053d6:	4603      	mov	r3, r0
 80053d8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80053da:	e003      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	77fb      	strb	r3, [r7, #31]
        break;
 80053e0:	e000      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80053e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e4:	7ffb      	ldrb	r3, [r7, #31]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10b      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053ea:	4b7f      	ldr	r3, [pc, #508]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053f0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f8:	497b      	ldr	r1, [pc, #492]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005400:	e001      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005402:	7ffb      	ldrb	r3, [r7, #31]
 8005404:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d047      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541a:	d030      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800541c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005420:	d82a      	bhi.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005426:	d02a      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800542c:	d824      	bhi.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800542e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005432:	d008      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005438:	d81e      	bhi.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800543e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005442:	d010      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005444:	e018      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005446:	4b68      	ldr	r3, [pc, #416]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	4a67      	ldr	r2, [pc, #412]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005450:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005452:	e015      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	2100      	movs	r1, #0
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fb08 	bl	8005a70 <RCCEx_PLLSAI1_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005464:	e00c      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3320      	adds	r3, #32
 800546a:	2100      	movs	r1, #0
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fbe5 	bl	8005c3c <RCCEx_PLLSAI2_Config>
 8005472:	4603      	mov	r3, r0
 8005474:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005476:	e003      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	77fb      	strb	r3, [r7, #31]
        break;
 800547c:	e000      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800547e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005480:	7ffb      	ldrb	r3, [r7, #31]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005486:	4b58      	ldr	r3, [pc, #352]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005488:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800548c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005494:	4954      	ldr	r1, [pc, #336]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800549c:	e001      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549e:	7ffb      	ldrb	r3, [r7, #31]
 80054a0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80ab 	beq.w	8005606 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054b0:	2300      	movs	r3, #0
 80054b2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b4:	4b4c      	ldr	r3, [pc, #304]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10d      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054c0:	4b49      	ldr	r3, [pc, #292]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	4a48      	ldr	r2, [pc, #288]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ca:	6593      	str	r3, [r2, #88]	; 0x58
 80054cc:	4b46      	ldr	r3, [pc, #280]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054d8:	2301      	movs	r3, #1
 80054da:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054dc:	4b43      	ldr	r3, [pc, #268]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a42      	ldr	r2, [pc, #264]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054e8:	f7fd fb30 	bl	8002b4c <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054ee:	e00f      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f0:	f7fd fb2c 	bl	8002b4c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d908      	bls.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054fe:	4b3b      	ldr	r3, [pc, #236]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800550e:	e006      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005510:	4b36      	ldr	r3, [pc, #216]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0e9      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800551c:	e000      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800551e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005520:	7ffb      	ldrb	r3, [r7, #31]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d164      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005526:	4b30      	ldr	r3, [pc, #192]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005530:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01f      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	429a      	cmp	r2, r3
 8005542:	d019      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005544:	4b28      	ldr	r3, [pc, #160]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005550:	4b25      	ldr	r3, [pc, #148]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	4a24      	ldr	r2, [pc, #144]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005560:	4b21      	ldr	r3, [pc, #132]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005566:	4a20      	ldr	r2, [pc, #128]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005570:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d01f      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005582:	f7fd fae3 	bl	8002b4c <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005588:	e012      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558a:	f7fd fadf 	bl	8002b4c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	f241 3288 	movw	r2, #5000	; 0x1388
 8005598:	4293      	cmp	r3, r2
 800559a:	d909      	bls.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800559c:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10a      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80055ae:	e007      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055b0:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0e5      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x222>
 80055be:	e000      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80055c0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80055c2:	7ffb      	ldrb	r3, [r7, #31]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10c      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055c8:	4b07      	ldr	r3, [pc, #28]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d8:	4903      	ldr	r1, [pc, #12]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055e0:	e008      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055e2:	7ffb      	ldrb	r3, [r7, #31]
 80055e4:	77bb      	strb	r3, [r7, #30]
 80055e6:	e005      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f0:	7ffb      	ldrb	r3, [r7, #31]
 80055f2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d105      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055fa:	4baf      	ldr	r3, [pc, #700]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80055fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fe:	4aae      	ldr	r2, [pc, #696]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005604:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005612:	4ba9      	ldr	r3, [pc, #676]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	f023 0203 	bic.w	r2, r3, #3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005620:	49a5      	ldr	r1, [pc, #660]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005634:	4ba0      	ldr	r3, [pc, #640]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563a:	f023 020c 	bic.w	r2, r3, #12
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	499d      	ldr	r1, [pc, #628]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005656:	4b98      	ldr	r3, [pc, #608]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005664:	4994      	ldr	r1, [pc, #592]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005678:	4b8f      	ldr	r3, [pc, #572]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	498c      	ldr	r1, [pc, #560]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800569a:	4b87      	ldr	r3, [pc, #540]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a8:	4983      	ldr	r1, [pc, #524]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0320 	and.w	r3, r3, #32
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056bc:	4b7e      	ldr	r3, [pc, #504]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ca:	497b      	ldr	r1, [pc, #492]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056de:	4b76      	ldr	r3, [pc, #472]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ec:	4972      	ldr	r1, [pc, #456]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005700:	4b6d      	ldr	r3, [pc, #436]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570e:	496a      	ldr	r1, [pc, #424]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005722:	4b65      	ldr	r3, [pc, #404]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005728:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005730:	4961      	ldr	r1, [pc, #388]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d031      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800574c:	d00e      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800574e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005752:	d814      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d015      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800575c:	d10f      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800575e:	4b56      	ldr	r3, [pc, #344]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	4a55      	ldr	r2, [pc, #340]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005768:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800576a:	e00c      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3304      	adds	r3, #4
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f97c 	bl	8005a70 <RCCEx_PLLSAI1_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800577c:	e003      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	77fb      	strb	r3, [r7, #31]
        break;
 8005782:	e000      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005786:	7ffb      	ldrb	r3, [r7, #31]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10b      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800578c:	4b4a      	ldr	r3, [pc, #296]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800578e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005792:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800579a:	4947      	ldr	r1, [pc, #284]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057a2:	e001      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a4:	7ffb      	ldrb	r3, [r7, #31]
 80057a6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00a      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057b4:	4b40      	ldr	r3, [pc, #256]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c2:	493d      	ldr	r1, [pc, #244]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057d6:	4b38      	ldr	r3, [pc, #224]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e4:	4934      	ldr	r1, [pc, #208]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057f8:	4b2f      	ldr	r3, [pc, #188]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	492c      	ldr	r1, [pc, #176]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800581a:	4b27      	ldr	r3, [pc, #156]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800581c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005820:	f023 0203 	bic.w	r2, r3, #3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005828:	4923      	ldr	r1, [pc, #140]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d028      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x526>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800583c:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005842:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584a:	491b      	ldr	r1, [pc, #108]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800584c:	4313      	orrs	r3, r2
 800584e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005856:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800585a:	d106      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800585c:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4a15      	ldr	r2, [pc, #84]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005866:	60d3      	str	r3, [r2, #12]
 8005868:	e011      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x526>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800586e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005872:	d10c      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x526>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3304      	adds	r3, #4
 8005878:	2101      	movs	r1, #1
 800587a:	4618      	mov	r0, r3
 800587c:	f000 f8f8 	bl	8005a70 <RCCEx_PLLSAI1_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8005884:	7ffb      	ldrb	r3, [r7, #31]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x526>
        {
          /* set overall return value */
          status = ret;
 800588a:	7ffb      	ldrb	r3, [r7, #31]
 800588c:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d04d      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800589e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a2:	d10b      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x554>
 80058a4:	4b04      	ldr	r3, [pc, #16]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80058a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058aa:	4a03      	ldr	r2, [pc, #12]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80058ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80058b4:	e015      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80058b6:	bf00      	nop
 80058b8:	40021000 	.word	0x40021000
 80058bc:	4b6b      	ldr	r3, [pc, #428]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ca:	4968      	ldr	r1, [pc, #416]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80058d2:	4b66      	ldr	r3, [pc, #408]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80058d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058d8:	4a64      	ldr	r2, [pc, #400]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80058da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058ea:	d10d      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3304      	adds	r3, #4
 80058f0:	2101      	movs	r1, #1
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f8bc 	bl	8005a70 <RCCEx_PLLSAI1_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80058fc:	7ffb      	ldrb	r3, [r7, #31]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d019      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8005902:	7ffb      	ldrb	r3, [r7, #31]
 8005904:	77bb      	strb	r3, [r7, #30]
 8005906:	e016      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800590c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005910:	d106      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005912:	4b56      	ldr	r3, [pc, #344]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	4a55      	ldr	r2, [pc, #340]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005918:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800591c:	60d3      	str	r3, [r2, #12]
 800591e:	e00a      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005928:	d105      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800592a:	4b50      	ldr	r3, [pc, #320]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	4a4f      	ldr	r2, [pc, #316]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005934:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d028      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005942:	4b4a      	ldr	r3, [pc, #296]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005948:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005950:	4946      	ldr	r1, [pc, #280]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800595c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005960:	d106      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005962:	4b42      	ldr	r3, [pc, #264]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	4a41      	ldr	r2, [pc, #260]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800596c:	60d3      	str	r3, [r2, #12]
 800596e:	e011      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005974:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005978:	d10c      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3304      	adds	r3, #4
 800597e:	2101      	movs	r1, #1
 8005980:	4618      	mov	r0, r3
 8005982:	f000 f875 	bl	8005a70 <RCCEx_PLLSAI1_Config>
 8005986:	4603      	mov	r3, r0
 8005988:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800598a:	7ffb      	ldrb	r3, [r7, #31]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005990:	7ffb      	ldrb	r3, [r7, #31]
 8005992:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01e      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059a0:	4b32      	ldr	r3, [pc, #200]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059b0:	492e      	ldr	r1, [pc, #184]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059c2:	d10c      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3304      	adds	r3, #4
 80059c8:	2102      	movs	r1, #2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f850 	bl	8005a70 <RCCEx_PLLSAI1_Config>
 80059d0:	4603      	mov	r3, r0
 80059d2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80059d4:	7ffb      	ldrb	r3, [r7, #31]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80059da:	7ffb      	ldrb	r3, [r7, #31]
 80059dc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059ea:	4b20      	ldr	r3, [pc, #128]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059f0:	f023 0204 	bic.w	r2, r3, #4
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059fa:	491c      	ldr	r1, [pc, #112]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a0e:	4b17      	ldr	r3, [pc, #92]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a14:	f023 0218 	bic.w	r2, r3, #24
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	4913      	ldr	r1, [pc, #76]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d017      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a32:	4b0e      	ldr	r3, [pc, #56]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a42:	490a      	ldr	r1, [pc, #40]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a54:	d105      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a56:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	4a04      	ldr	r2, [pc, #16]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a60:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005a62:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40021000 	.word	0x40021000

08005a70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d018      	beq.n	8005ab8 <RCCEx_PLLSAI1_Config+0x48>
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d81f      	bhi.n	8005aca <RCCEx_PLLSAI1_Config+0x5a>
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d002      	beq.n	8005a94 <RCCEx_PLLSAI1_Config+0x24>
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d009      	beq.n	8005aa6 <RCCEx_PLLSAI1_Config+0x36>
 8005a92:	e01a      	b.n	8005aca <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a94:	4b65      	ldr	r3, [pc, #404]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d117      	bne.n	8005ad0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aa4:	e014      	b.n	8005ad0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005aa6:	4b61      	ldr	r3, [pc, #388]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d110      	bne.n	8005ad4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab6:	e00d      	b.n	8005ad4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005ab8:	4b5c      	ldr	r3, [pc, #368]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac8:	e006      	b.n	8005ad8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ace:	e004      	b.n	8005ada <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005ad0:	bf00      	nop
 8005ad2:	e002      	b.n	8005ada <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005ad4:	bf00      	nop
 8005ad6:	e000      	b.n	8005ada <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005ad8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f040 809f 	bne.w	8005c20 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ae2:	4b52      	ldr	r3, [pc, #328]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a51      	ldr	r2, [pc, #324]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ae8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aee:	f7fd f82d 	bl	8002b4c <HAL_GetTick>
 8005af2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005af4:	e00f      	b.n	8005b16 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005af6:	f7fd f829 	bl	8002b4c <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d908      	bls.n	8005b16 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b04:	4b49      	ldr	r3, [pc, #292]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b14:	e006      	b.n	8005b24 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b16:	4b45      	ldr	r3, [pc, #276]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e9      	bne.n	8005af6 <RCCEx_PLLSAI1_Config+0x86>
 8005b22:	e000      	b.n	8005b26 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005b24:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d179      	bne.n	8005c20 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d116      	bne.n	8005b60 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b32:	4b3e      	ldr	r3, [pc, #248]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	4b3e      	ldr	r3, [pc, #248]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1c0>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6892      	ldr	r2, [r2, #8]
 8005b3e:	0211      	lsls	r1, r2, #8
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	68d2      	ldr	r2, [r2, #12]
 8005b44:	06d2      	lsls	r2, r2, #27
 8005b46:	4311      	orrs	r1, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6852      	ldr	r2, [r2, #4]
 8005b4c:	3a01      	subs	r2, #1
 8005b4e:	0112      	lsls	r2, r2, #4
 8005b50:	4311      	orrs	r1, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6812      	ldr	r2, [r2, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	4934      	ldr	r1, [pc, #208]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	610b      	str	r3, [r1, #16]
 8005b5e:	e033      	b.n	8005bc8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d118      	bne.n	8005b98 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b66:	4b31      	ldr	r3, [pc, #196]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	4b32      	ldr	r3, [pc, #200]	; (8005c34 <RCCEx_PLLSAI1_Config+0x1c4>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6892      	ldr	r2, [r2, #8]
 8005b72:	0211      	lsls	r1, r2, #8
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6912      	ldr	r2, [r2, #16]
 8005b78:	0852      	lsrs	r2, r2, #1
 8005b7a:	3a01      	subs	r2, #1
 8005b7c:	0552      	lsls	r2, r2, #21
 8005b7e:	4311      	orrs	r1, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6852      	ldr	r2, [r2, #4]
 8005b84:	3a01      	subs	r2, #1
 8005b86:	0112      	lsls	r2, r2, #4
 8005b88:	4311      	orrs	r1, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	4926      	ldr	r1, [pc, #152]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	610b      	str	r3, [r1, #16]
 8005b96:	e017      	b.n	8005bc8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b98:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	4b26      	ldr	r3, [pc, #152]	; (8005c38 <RCCEx_PLLSAI1_Config+0x1c8>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6892      	ldr	r2, [r2, #8]
 8005ba4:	0211      	lsls	r1, r2, #8
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6952      	ldr	r2, [r2, #20]
 8005baa:	0852      	lsrs	r2, r2, #1
 8005bac:	3a01      	subs	r2, #1
 8005bae:	0652      	lsls	r2, r2, #25
 8005bb0:	4311      	orrs	r1, r2
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6852      	ldr	r2, [r2, #4]
 8005bb6:	3a01      	subs	r2, #1
 8005bb8:	0112      	lsls	r2, r2, #4
 8005bba:	4311      	orrs	r1, r2
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6812      	ldr	r2, [r2, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	491a      	ldr	r1, [pc, #104]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bc8:	4b18      	ldr	r3, [pc, #96]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005bce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd4:	f7fc ffba 	bl	8002b4c <HAL_GetTick>
 8005bd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bda:	e00f      	b.n	8005bfc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bdc:	f7fc ffb6 	bl	8002b4c <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d908      	bls.n	8005bfc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bea:	4b10      	ldr	r3, [pc, #64]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005bfa:	e006      	b.n	8005c0a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0e9      	beq.n	8005bdc <RCCEx_PLLSAI1_Config+0x16c>
 8005c08:	e000      	b.n	8005c0c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005c0a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	4904      	ldr	r1, [pc, #16]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	07ff800c 	.word	0x07ff800c
 8005c34:	ff9f800c 	.word	0xff9f800c
 8005c38:	f9ff800c 	.word	0xf9ff800c

08005c3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d018      	beq.n	8005c84 <RCCEx_PLLSAI2_Config+0x48>
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d81f      	bhi.n	8005c96 <RCCEx_PLLSAI2_Config+0x5a>
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d002      	beq.n	8005c60 <RCCEx_PLLSAI2_Config+0x24>
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d009      	beq.n	8005c72 <RCCEx_PLLSAI2_Config+0x36>
 8005c5e:	e01a      	b.n	8005c96 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c60:	4b4a      	ldr	r3, [pc, #296]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d117      	bne.n	8005c9c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c70:	e014      	b.n	8005c9c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c72:	4b46      	ldr	r3, [pc, #280]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d110      	bne.n	8005ca0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c82:	e00d      	b.n	8005ca0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005c84:	4b41      	ldr	r3, [pc, #260]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c94:	e006      	b.n	8005ca4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	73fb      	strb	r3, [r7, #15]
      break;
 8005c9a:	e004      	b.n	8005ca6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005c9c:	bf00      	nop
 8005c9e:	e002      	b.n	8005ca6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005ca0:	bf00      	nop
 8005ca2:	e000      	b.n	8005ca6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005ca4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d169      	bne.n	8005d80 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005cac:	4b37      	ldr	r3, [pc, #220]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a36      	ldr	r2, [pc, #216]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb8:	f7fc ff48 	bl	8002b4c <HAL_GetTick>
 8005cbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cbe:	e00f      	b.n	8005ce0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cc0:	f7fc ff44 	bl	8002b4c <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d908      	bls.n	8005ce0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cce:	4b2f      	ldr	r3, [pc, #188]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d009      	beq.n	8005cee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cde:	e006      	b.n	8005cee <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ce0:	4b2a      	ldr	r3, [pc, #168]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e9      	bne.n	8005cc0 <RCCEx_PLLSAI2_Config+0x84>
 8005cec:	e000      	b.n	8005cf0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005cee:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d144      	bne.n	8005d80 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d115      	bne.n	8005d28 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cfc:	4b23      	ldr	r3, [pc, #140]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005cfe:	695a      	ldr	r2, [r3, #20]
 8005d00:	4b23      	ldr	r3, [pc, #140]	; (8005d90 <RCCEx_PLLSAI2_Config+0x154>)
 8005d02:	4013      	ands	r3, r2
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6892      	ldr	r2, [r2, #8]
 8005d08:	0211      	lsls	r1, r2, #8
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68d2      	ldr	r2, [r2, #12]
 8005d0e:	06d2      	lsls	r2, r2, #27
 8005d10:	4311      	orrs	r1, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6852      	ldr	r2, [r2, #4]
 8005d16:	3a01      	subs	r2, #1
 8005d18:	0112      	lsls	r2, r2, #4
 8005d1a:	4311      	orrs	r1, r2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6812      	ldr	r2, [r2, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	491a      	ldr	r1, [pc, #104]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d28:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d34:	f7fc ff0a 	bl	8002b4c <HAL_GetTick>
 8005d38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d3a:	e00f      	b.n	8005d5c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d3c:	f7fc ff06 	bl	8002b4c <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d908      	bls.n	8005d5c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d4a:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005d5a:	e006      	b.n	8005d6a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0e9      	beq.n	8005d3c <RCCEx_PLLSAI2_Config+0x100>
 8005d68:	e000      	b.n	8005d6c <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005d6a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005d72:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	4904      	ldr	r1, [pc, #16]	; (8005d8c <RCCEx_PLLSAI2_Config+0x150>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	07ff800c 	.word	0x07ff800c

08005d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e049      	b.n	8005e3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fc fc9c 	bl	80026f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	f001 f82e 	bl	8006e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d001      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e04f      	b.n	8005efc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a23      	ldr	r2, [pc, #140]	; (8005f08 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01d      	beq.n	8005eba <HAL_TIM_Base_Start_IT+0x76>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e86:	d018      	beq.n	8005eba <HAL_TIM_Base_Start_IT+0x76>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1f      	ldr	r2, [pc, #124]	; (8005f0c <HAL_TIM_Base_Start_IT+0xc8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_TIM_Base_Start_IT+0x76>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1e      	ldr	r2, [pc, #120]	; (8005f10 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_TIM_Base_Start_IT+0x76>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1c      	ldr	r2, [pc, #112]	; (8005f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_TIM_Base_Start_IT+0x76>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1b      	ldr	r2, [pc, #108]	; (8005f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_TIM_Base_Start_IT+0x76>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a19      	ldr	r2, [pc, #100]	; (8005f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d115      	bne.n	8005ee6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b06      	cmp	r3, #6
 8005eca:	d015      	beq.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb4>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed2:	d011      	beq.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee4:	e008      	b.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f042 0201 	orr.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	e000      	b.n	8005efa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	40012c00 	.word	0x40012c00
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40013400 	.word	0x40013400
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	00010007 	.word	0x00010007

08005f24 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0201 	bic.w	r2, r2, #1
 8005f3a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6a1a      	ldr	r2, [r3, #32]
 8005f42:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10f      	bne.n	8005f6c <HAL_TIM_Base_Stop_IT+0x48>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6a1a      	ldr	r2, [r3, #32]
 8005f52:	f240 4344 	movw	r3, #1092	; 0x444
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d107      	bne.n	8005f6c <HAL_TIM_Base_Stop_IT+0x48>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0201 	bic.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e049      	b.n	8006028 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d106      	bne.n	8005fae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f841 	bl	8006030 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	f000 ff37 	bl	8006e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d109      	bne.n	800606c <HAL_TIM_PWM_Start_DMA+0x28>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	bf0c      	ite	eq
 8006064:	2301      	moveq	r3, #1
 8006066:	2300      	movne	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	e03c      	b.n	80060e6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b04      	cmp	r3, #4
 8006070:	d109      	bne.n	8006086 <HAL_TIM_PWM_Start_DMA+0x42>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	bf0c      	ite	eq
 800607e:	2301      	moveq	r3, #1
 8006080:	2300      	movne	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	e02f      	b.n	80060e6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b08      	cmp	r3, #8
 800608a:	d109      	bne.n	80060a0 <HAL_TIM_PWM_Start_DMA+0x5c>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	bf0c      	ite	eq
 8006098:	2301      	moveq	r3, #1
 800609a:	2300      	movne	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	e022      	b.n	80060e6 <HAL_TIM_PWM_Start_DMA+0xa2>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b0c      	cmp	r3, #12
 80060a4:	d109      	bne.n	80060ba <HAL_TIM_PWM_Start_DMA+0x76>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	bf0c      	ite	eq
 80060b2:	2301      	moveq	r3, #1
 80060b4:	2300      	movne	r3, #0
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	e015      	b.n	80060e6 <HAL_TIM_PWM_Start_DMA+0xa2>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d109      	bne.n	80060d4 <HAL_TIM_PWM_Start_DMA+0x90>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	bf0c      	ite	eq
 80060cc:	2301      	moveq	r3, #1
 80060ce:	2300      	movne	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	e008      	b.n	80060e6 <HAL_TIM_PWM_Start_DMA+0xa2>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	bf0c      	ite	eq
 80060e0:	2301      	moveq	r3, #1
 80060e2:	2300      	movne	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80060ea:	2302      	movs	r3, #2
 80060ec:	e1a6      	b.n	800643c <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <HAL_TIM_PWM_Start_DMA+0xc4>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	bf0c      	ite	eq
 8006100:	2301      	moveq	r3, #1
 8006102:	2300      	movne	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	e03c      	b.n	8006182 <HAL_TIM_PWM_Start_DMA+0x13e>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b04      	cmp	r3, #4
 800610c:	d109      	bne.n	8006122 <HAL_TIM_PWM_Start_DMA+0xde>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b01      	cmp	r3, #1
 8006118:	bf0c      	ite	eq
 800611a:	2301      	moveq	r3, #1
 800611c:	2300      	movne	r3, #0
 800611e:	b2db      	uxtb	r3, r3
 8006120:	e02f      	b.n	8006182 <HAL_TIM_PWM_Start_DMA+0x13e>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b08      	cmp	r3, #8
 8006126:	d109      	bne.n	800613c <HAL_TIM_PWM_Start_DMA+0xf8>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b01      	cmp	r3, #1
 8006132:	bf0c      	ite	eq
 8006134:	2301      	moveq	r3, #1
 8006136:	2300      	movne	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	e022      	b.n	8006182 <HAL_TIM_PWM_Start_DMA+0x13e>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b0c      	cmp	r3, #12
 8006140:	d109      	bne.n	8006156 <HAL_TIM_PWM_Start_DMA+0x112>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b01      	cmp	r3, #1
 800614c:	bf0c      	ite	eq
 800614e:	2301      	moveq	r3, #1
 8006150:	2300      	movne	r3, #0
 8006152:	b2db      	uxtb	r3, r3
 8006154:	e015      	b.n	8006182 <HAL_TIM_PWM_Start_DMA+0x13e>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b10      	cmp	r3, #16
 800615a:	d109      	bne.n	8006170 <HAL_TIM_PWM_Start_DMA+0x12c>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b01      	cmp	r3, #1
 8006166:	bf0c      	ite	eq
 8006168:	2301      	moveq	r3, #1
 800616a:	2300      	movne	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	e008      	b.n	8006182 <HAL_TIM_PWM_Start_DMA+0x13e>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b01      	cmp	r3, #1
 800617a:	bf0c      	ite	eq
 800617c:	2301      	moveq	r3, #1
 800617e:	2300      	movne	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d034      	beq.n	80061f0 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <HAL_TIM_PWM_Start_DMA+0x152>
 800618c:	887b      	ldrh	r3, [r7, #2]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e152      	b.n	800643c <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d104      	bne.n	80061a6 <HAL_TIM_PWM_Start_DMA+0x162>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a4:	e026      	b.n	80061f4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d104      	bne.n	80061b6 <HAL_TIM_PWM_Start_DMA+0x172>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b4:	e01e      	b.n	80061f4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d104      	bne.n	80061c6 <HAL_TIM_PWM_Start_DMA+0x182>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c4:	e016      	b.n	80061f4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b0c      	cmp	r3, #12
 80061ca:	d104      	bne.n	80061d6 <HAL_TIM_PWM_Start_DMA+0x192>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061d4:	e00e      	b.n	80061f4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b10      	cmp	r3, #16
 80061da:	d104      	bne.n	80061e6 <HAL_TIM_PWM_Start_DMA+0x1a2>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061e4:	e006      	b.n	80061f4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2202      	movs	r2, #2
 80061ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061ee:	e001      	b.n	80061f4 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e123      	b.n	800643c <HAL_TIM_PWM_Start_DMA+0x3f8>
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b0c      	cmp	r3, #12
 80061f8:	f200 80ae 	bhi.w	8006358 <HAL_TIM_PWM_Start_DMA+0x314>
 80061fc:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 80061fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006202:	bf00      	nop
 8006204:	08006239 	.word	0x08006239
 8006208:	08006359 	.word	0x08006359
 800620c:	08006359 	.word	0x08006359
 8006210:	08006359 	.word	0x08006359
 8006214:	08006281 	.word	0x08006281
 8006218:	08006359 	.word	0x08006359
 800621c:	08006359 	.word	0x08006359
 8006220:	08006359 	.word	0x08006359
 8006224:	080062c9 	.word	0x080062c9
 8006228:	08006359 	.word	0x08006359
 800622c:	08006359 	.word	0x08006359
 8006230:	08006359 	.word	0x08006359
 8006234:	08006311 	.word	0x08006311
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	4a81      	ldr	r2, [pc, #516]	; (8006444 <HAL_TIM_PWM_Start_DMA+0x400>)
 800623e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	4a80      	ldr	r2, [pc, #512]	; (8006448 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006246:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	4a7f      	ldr	r2, [pc, #508]	; (800644c <HAL_TIM_PWM_Start_DMA+0x408>)
 800624e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3334      	adds	r3, #52	; 0x34
 800625c:	461a      	mov	r2, r3
 800625e:	887b      	ldrh	r3, [r7, #2]
 8006260:	f7fd fae0 	bl	8003824 <HAL_DMA_Start_IT>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e0e6      	b.n	800643c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800627c:	60da      	str	r2, [r3, #12]
      break;
 800627e:	e06c      	b.n	800635a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006284:	4a6f      	ldr	r2, [pc, #444]	; (8006444 <HAL_TIM_PWM_Start_DMA+0x400>)
 8006286:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628c:	4a6e      	ldr	r2, [pc, #440]	; (8006448 <HAL_TIM_PWM_Start_DMA+0x404>)
 800628e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	4a6d      	ldr	r2, [pc, #436]	; (800644c <HAL_TIM_PWM_Start_DMA+0x408>)
 8006296:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3338      	adds	r3, #56	; 0x38
 80062a4:	461a      	mov	r2, r3
 80062a6:	887b      	ldrh	r3, [r7, #2]
 80062a8:	f7fd fabc 	bl	8003824 <HAL_DMA_Start_IT>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e0c2      	b.n	800643c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062c4:	60da      	str	r2, [r3, #12]
      break;
 80062c6:	e048      	b.n	800635a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	4a5d      	ldr	r2, [pc, #372]	; (8006444 <HAL_TIM_PWM_Start_DMA+0x400>)
 80062ce:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	4a5c      	ldr	r2, [pc, #368]	; (8006448 <HAL_TIM_PWM_Start_DMA+0x404>)
 80062d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	4a5b      	ldr	r2, [pc, #364]	; (800644c <HAL_TIM_PWM_Start_DMA+0x408>)
 80062de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	333c      	adds	r3, #60	; 0x3c
 80062ec:	461a      	mov	r2, r3
 80062ee:	887b      	ldrh	r3, [r7, #2]
 80062f0:	f7fd fa98 	bl	8003824 <HAL_DMA_Start_IT>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e09e      	b.n	800643c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800630c:	60da      	str	r2, [r3, #12]
      break;
 800630e:	e024      	b.n	800635a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	4a4b      	ldr	r2, [pc, #300]	; (8006444 <HAL_TIM_PWM_Start_DMA+0x400>)
 8006316:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	4a4a      	ldr	r2, [pc, #296]	; (8006448 <HAL_TIM_PWM_Start_DMA+0x404>)
 800631e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	4a49      	ldr	r2, [pc, #292]	; (800644c <HAL_TIM_PWM_Start_DMA+0x408>)
 8006326:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3340      	adds	r3, #64	; 0x40
 8006334:	461a      	mov	r2, r3
 8006336:	887b      	ldrh	r3, [r7, #2]
 8006338:	f7fd fa74 	bl	8003824 <HAL_DMA_Start_IT>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e07a      	b.n	800643c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006354:	60da      	str	r2, [r3, #12]
      break;
 8006356:	e000      	b.n	800635a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8006358:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2201      	movs	r2, #1
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	4618      	mov	r0, r3
 8006364:	f001 f972 	bl	800764c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a38      	ldr	r2, [pc, #224]	; (8006450 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <HAL_TIM_PWM_Start_DMA+0x356>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a37      	ldr	r2, [pc, #220]	; (8006454 <HAL_TIM_PWM_Start_DMA+0x410>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00e      	beq.n	800639a <HAL_TIM_PWM_Start_DMA+0x356>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a35      	ldr	r2, [pc, #212]	; (8006458 <HAL_TIM_PWM_Start_DMA+0x414>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d009      	beq.n	800639a <HAL_TIM_PWM_Start_DMA+0x356>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a34      	ldr	r2, [pc, #208]	; (800645c <HAL_TIM_PWM_Start_DMA+0x418>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d004      	beq.n	800639a <HAL_TIM_PWM_Start_DMA+0x356>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a32      	ldr	r2, [pc, #200]	; (8006460 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d101      	bne.n	800639e <HAL_TIM_PWM_Start_DMA+0x35a>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <HAL_TIM_PWM_Start_DMA+0x35c>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d007      	beq.n	80063b4 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a25      	ldr	r2, [pc, #148]	; (8006450 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01d      	beq.n	80063fa <HAL_TIM_PWM_Start_DMA+0x3b6>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c6:	d018      	beq.n	80063fa <HAL_TIM_PWM_Start_DMA+0x3b6>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a25      	ldr	r2, [pc, #148]	; (8006464 <HAL_TIM_PWM_Start_DMA+0x420>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d013      	beq.n	80063fa <HAL_TIM_PWM_Start_DMA+0x3b6>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a24      	ldr	r2, [pc, #144]	; (8006468 <HAL_TIM_PWM_Start_DMA+0x424>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00e      	beq.n	80063fa <HAL_TIM_PWM_Start_DMA+0x3b6>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a22      	ldr	r2, [pc, #136]	; (800646c <HAL_TIM_PWM_Start_DMA+0x428>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d009      	beq.n	80063fa <HAL_TIM_PWM_Start_DMA+0x3b6>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1a      	ldr	r2, [pc, #104]	; (8006454 <HAL_TIM_PWM_Start_DMA+0x410>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d004      	beq.n	80063fa <HAL_TIM_PWM_Start_DMA+0x3b6>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a18      	ldr	r2, [pc, #96]	; (8006458 <HAL_TIM_PWM_Start_DMA+0x414>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d115      	bne.n	8006426 <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	4b1b      	ldr	r3, [pc, #108]	; (8006470 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006402:	4013      	ands	r3, r2
 8006404:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b06      	cmp	r3, #6
 800640a:	d015      	beq.n	8006438 <HAL_TIM_PWM_Start_DMA+0x3f4>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006412:	d011      	beq.n	8006438 <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006424:	e008      	b.n	8006438 <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0201 	orr.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	e000      	b.n	800643a <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006438:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	08006d23 	.word	0x08006d23
 8006448:	08006dcb 	.word	0x08006dcb
 800644c:	08006c91 	.word	0x08006c91
 8006450:	40012c00 	.word	0x40012c00
 8006454:	40013400 	.word	0x40013400
 8006458:	40014000 	.word	0x40014000
 800645c:	40014400 	.word	0x40014400
 8006460:	40014800 	.word	0x40014800
 8006464:	40000400 	.word	0x40000400
 8006468:	40000800 	.word	0x40000800
 800646c:	40000c00 	.word	0x40000c00
 8006470:	00010007 	.word	0x00010007

08006474 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b0c      	cmp	r3, #12
 8006482:	d855      	bhi.n	8006530 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064c1 	.word	0x080064c1
 8006490:	08006531 	.word	0x08006531
 8006494:	08006531 	.word	0x08006531
 8006498:	08006531 	.word	0x08006531
 800649c:	080064dd 	.word	0x080064dd
 80064a0:	08006531 	.word	0x08006531
 80064a4:	08006531 	.word	0x08006531
 80064a8:	08006531 	.word	0x08006531
 80064ac:	080064f9 	.word	0x080064f9
 80064b0:	08006531 	.word	0x08006531
 80064b4:	08006531 	.word	0x08006531
 80064b8:	08006531 	.word	0x08006531
 80064bc:	08006515 	.word	0x08006515
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80064ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fd fa7c 	bl	80039d2 <HAL_DMA_Abort_IT>
      break;
 80064da:	e02a      	b.n	8006532 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fd fa6e 	bl	80039d2 <HAL_DMA_Abort_IT>
      break;
 80064f6:	e01c      	b.n	8006532 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006506:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	4618      	mov	r0, r3
 800650e:	f7fd fa60 	bl	80039d2 <HAL_DMA_Abort_IT>
      break;
 8006512:	e00e      	b.n	8006532 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006522:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	4618      	mov	r0, r3
 800652a:	f7fd fa52 	bl	80039d2 <HAL_DMA_Abort_IT>
      break;
 800652e:	e000      	b.n	8006532 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8006530:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2200      	movs	r2, #0
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f001 f886 	bl	800764c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a3e      	ldr	r2, [pc, #248]	; (8006640 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <HAL_TIM_PWM_Stop_DMA+0xfe>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a3d      	ldr	r2, [pc, #244]	; (8006644 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00e      	beq.n	8006572 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a3b      	ldr	r2, [pc, #236]	; (8006648 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d009      	beq.n	8006572 <HAL_TIM_PWM_Stop_DMA+0xfe>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a3a      	ldr	r2, [pc, #232]	; (800664c <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d004      	beq.n	8006572 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a38      	ldr	r2, [pc, #224]	; (8006650 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d101      	bne.n	8006576 <HAL_TIM_PWM_Stop_DMA+0x102>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <HAL_TIM_PWM_Stop_DMA+0x104>
 8006576:	2300      	movs	r3, #0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d017      	beq.n	80065ac <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6a1a      	ldr	r2, [r3, #32]
 8006582:	f241 1311 	movw	r3, #4369	; 0x1111
 8006586:	4013      	ands	r3, r2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10f      	bne.n	80065ac <HAL_TIM_PWM_Stop_DMA+0x138>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	f240 4344 	movw	r3, #1092	; 0x444
 8006596:	4013      	ands	r3, r2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d107      	bne.n	80065ac <HAL_TIM_PWM_Stop_DMA+0x138>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6a1a      	ldr	r2, [r3, #32]
 80065b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80065b6:	4013      	ands	r3, r2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10f      	bne.n	80065dc <HAL_TIM_PWM_Stop_DMA+0x168>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6a1a      	ldr	r2, [r3, #32]
 80065c2:	f240 4344 	movw	r3, #1092	; 0x444
 80065c6:	4013      	ands	r3, r2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d107      	bne.n	80065dc <HAL_TIM_PWM_Stop_DMA+0x168>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0201 	bic.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <HAL_TIM_PWM_Stop_DMA+0x178>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ea:	e023      	b.n	8006634 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d104      	bne.n	80065fc <HAL_TIM_PWM_Stop_DMA+0x188>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065fa:	e01b      	b.n	8006634 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b08      	cmp	r3, #8
 8006600:	d104      	bne.n	800660c <HAL_TIM_PWM_Stop_DMA+0x198>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800660a:	e013      	b.n	8006634 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b0c      	cmp	r3, #12
 8006610:	d104      	bne.n	800661c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800661a:	e00b      	b.n	8006634 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b10      	cmp	r3, #16
 8006620:	d104      	bne.n	800662c <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800662a:	e003      	b.n	8006634 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40012c00 	.word	0x40012c00
 8006644:	40013400 	.word	0x40013400
 8006648:	40014000 	.word	0x40014000
 800664c:	40014400 	.word	0x40014400
 8006650:	40014800 	.word	0x40014800

08006654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b02      	cmp	r3, #2
 8006668:	d122      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b02      	cmp	r3, #2
 8006676:	d11b      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0202 	mvn.w	r2, #2
 8006680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fadc 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 800669c:	e005      	b.n	80066aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 face 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7fb fcbb 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d122      	bne.n	8006704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d11b      	bne.n	8006704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f06f 0204 	mvn.w	r2, #4
 80066d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2202      	movs	r2, #2
 80066da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fab2 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 80066f0:	e005      	b.n	80066fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 faa4 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7fb fc91 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b08      	cmp	r3, #8
 8006710:	d122      	bne.n	8006758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b08      	cmp	r3, #8
 800671e:	d11b      	bne.n	8006758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0208 	mvn.w	r2, #8
 8006728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2204      	movs	r2, #4
 800672e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa88 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 8006744:	e005      	b.n	8006752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fa7a 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7fb fc67 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b10      	cmp	r3, #16
 8006764:	d122      	bne.n	80067ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f003 0310 	and.w	r3, r3, #16
 8006770:	2b10      	cmp	r3, #16
 8006772:	d11b      	bne.n	80067ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0210 	mvn.w	r2, #16
 800677c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2208      	movs	r2, #8
 8006782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa5e 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 8006798:	e005      	b.n	80067a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fa50 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7fb fc3d 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d10e      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d107      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f06f 0201 	mvn.w	r2, #1
 80067d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fb fa54 	bl	8001c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b80      	cmp	r3, #128	; 0x80
 80067e4:	d10e      	bne.n	8006804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f0:	2b80      	cmp	r3, #128	; 0x80
 80067f2:	d107      	bne.n	8006804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 ffdc 	bl	80077bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006812:	d10e      	bne.n	8006832 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	2b80      	cmp	r3, #128	; 0x80
 8006820:	d107      	bne.n	8006832 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800682a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 ffcf 	bl	80077d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683c:	2b40      	cmp	r3, #64	; 0x40
 800683e:	d10e      	bne.n	800685e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	d107      	bne.n	800685e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fa05 	bl	8006c68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b20      	cmp	r3, #32
 800686a:	d10e      	bne.n	800688a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b20      	cmp	r3, #32
 8006878:	d107      	bne.n	800688a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f06f 0220 	mvn.w	r2, #32
 8006882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 ff8f 	bl	80077a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800688a:	bf00      	nop
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d101      	bne.n	80068ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80068aa:	2302      	movs	r3, #2
 80068ac:	e0fd      	b.n	8006aaa <HAL_TIM_PWM_ConfigChannel+0x216>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b14      	cmp	r3, #20
 80068ba:	f200 80f0 	bhi.w	8006a9e <HAL_TIM_PWM_ConfigChannel+0x20a>
 80068be:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	08006919 	.word	0x08006919
 80068c8:	08006a9f 	.word	0x08006a9f
 80068cc:	08006a9f 	.word	0x08006a9f
 80068d0:	08006a9f 	.word	0x08006a9f
 80068d4:	08006959 	.word	0x08006959
 80068d8:	08006a9f 	.word	0x08006a9f
 80068dc:	08006a9f 	.word	0x08006a9f
 80068e0:	08006a9f 	.word	0x08006a9f
 80068e4:	0800699b 	.word	0x0800699b
 80068e8:	08006a9f 	.word	0x08006a9f
 80068ec:	08006a9f 	.word	0x08006a9f
 80068f0:	08006a9f 	.word	0x08006a9f
 80068f4:	080069db 	.word	0x080069db
 80068f8:	08006a9f 	.word	0x08006a9f
 80068fc:	08006a9f 	.word	0x08006a9f
 8006900:	08006a9f 	.word	0x08006a9f
 8006904:	08006a1d 	.word	0x08006a1d
 8006908:	08006a9f 	.word	0x08006a9f
 800690c:	08006a9f 	.word	0x08006a9f
 8006910:	08006a9f 	.word	0x08006a9f
 8006914:	08006a5d 	.word	0x08006a5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fb22 	bl	8006f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0208 	orr.w	r2, r2, #8
 8006932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0204 	bic.w	r2, r2, #4
 8006942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6999      	ldr	r1, [r3, #24]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	691a      	ldr	r2, [r3, #16]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	619a      	str	r2, [r3, #24]
      break;
 8006956:	e0a3      	b.n	8006aa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fb92 	bl	8007088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6999      	ldr	r1, [r3, #24]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	021a      	lsls	r2, r3, #8
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	619a      	str	r2, [r3, #24]
      break;
 8006998:	e082      	b.n	8006aa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fbfb 	bl	800719c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0208 	orr.w	r2, r2, #8
 80069b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69da      	ldr	r2, [r3, #28]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0204 	bic.w	r2, r2, #4
 80069c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69d9      	ldr	r1, [r3, #28]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	61da      	str	r2, [r3, #28]
      break;
 80069d8:	e062      	b.n	8006aa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 fc63 	bl	80072ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69d9      	ldr	r1, [r3, #28]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	021a      	lsls	r2, r3, #8
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	61da      	str	r2, [r3, #28]
      break;
 8006a1a:	e041      	b.n	8006aa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fcac 	bl	8007380 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0208 	orr.w	r2, r2, #8
 8006a36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0204 	bic.w	r2, r2, #4
 8006a46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	691a      	ldr	r2, [r3, #16]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a5a:	e021      	b.n	8006aa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fcf0 	bl	8007448 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	021a      	lsls	r2, r3, #8
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a9c:	e000      	b.n	8006aa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006a9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop

08006ab4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_TIM_ConfigClockSource+0x18>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e0b5      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x184>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006aea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006aee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006af6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b08:	d03e      	beq.n	8006b88 <HAL_TIM_ConfigClockSource+0xd4>
 8006b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b0e:	f200 8087 	bhi.w	8006c20 <HAL_TIM_ConfigClockSource+0x16c>
 8006b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b16:	f000 8085 	beq.w	8006c24 <HAL_TIM_ConfigClockSource+0x170>
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1e:	d87f      	bhi.n	8006c20 <HAL_TIM_ConfigClockSource+0x16c>
 8006b20:	2b70      	cmp	r3, #112	; 0x70
 8006b22:	d01a      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0xa6>
 8006b24:	2b70      	cmp	r3, #112	; 0x70
 8006b26:	d87b      	bhi.n	8006c20 <HAL_TIM_ConfigClockSource+0x16c>
 8006b28:	2b60      	cmp	r3, #96	; 0x60
 8006b2a:	d050      	beq.n	8006bce <HAL_TIM_ConfigClockSource+0x11a>
 8006b2c:	2b60      	cmp	r3, #96	; 0x60
 8006b2e:	d877      	bhi.n	8006c20 <HAL_TIM_ConfigClockSource+0x16c>
 8006b30:	2b50      	cmp	r3, #80	; 0x50
 8006b32:	d03c      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0xfa>
 8006b34:	2b50      	cmp	r3, #80	; 0x50
 8006b36:	d873      	bhi.n	8006c20 <HAL_TIM_ConfigClockSource+0x16c>
 8006b38:	2b40      	cmp	r3, #64	; 0x40
 8006b3a:	d058      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0x13a>
 8006b3c:	2b40      	cmp	r3, #64	; 0x40
 8006b3e:	d86f      	bhi.n	8006c20 <HAL_TIM_ConfigClockSource+0x16c>
 8006b40:	2b30      	cmp	r3, #48	; 0x30
 8006b42:	d064      	beq.n	8006c0e <HAL_TIM_ConfigClockSource+0x15a>
 8006b44:	2b30      	cmp	r3, #48	; 0x30
 8006b46:	d86b      	bhi.n	8006c20 <HAL_TIM_ConfigClockSource+0x16c>
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	d060      	beq.n	8006c0e <HAL_TIM_ConfigClockSource+0x15a>
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	d867      	bhi.n	8006c20 <HAL_TIM_ConfigClockSource+0x16c>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d05c      	beq.n	8006c0e <HAL_TIM_ConfigClockSource+0x15a>
 8006b54:	2b10      	cmp	r3, #16
 8006b56:	d05a      	beq.n	8006c0e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006b58:	e062      	b.n	8006c20 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	6899      	ldr	r1, [r3, #8]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f000 fd4f 	bl	800760c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	609a      	str	r2, [r3, #8]
      break;
 8006b86:	e04e      	b.n	8006c26 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	6899      	ldr	r1, [r3, #8]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f000 fd38 	bl	800760c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006baa:	609a      	str	r2, [r3, #8]
      break;
 8006bac:	e03b      	b.n	8006c26 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6818      	ldr	r0, [r3, #0]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	6859      	ldr	r1, [r3, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f000 fcaa 	bl	8007514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2150      	movs	r1, #80	; 0x50
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fd03 	bl	80075d2 <TIM_ITRx_SetConfig>
      break;
 8006bcc:	e02b      	b.n	8006c26 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6818      	ldr	r0, [r3, #0]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	6859      	ldr	r1, [r3, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f000 fcc9 	bl	8007572 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2160      	movs	r1, #96	; 0x60
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fcf3 	bl	80075d2 <TIM_ITRx_SetConfig>
      break;
 8006bec:	e01b      	b.n	8006c26 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6818      	ldr	r0, [r3, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6859      	ldr	r1, [r3, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f000 fc8a 	bl	8007514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2140      	movs	r1, #64	; 0x40
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fce3 	bl	80075d2 <TIM_ITRx_SetConfig>
      break;
 8006c0c:	e00b      	b.n	8006c26 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4619      	mov	r1, r3
 8006c18:	4610      	mov	r0, r2
 8006c1a:	f000 fcda 	bl	80075d2 <TIM_ITRx_SetConfig>
        break;
 8006c1e:	e002      	b.n	8006c26 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006c20:	bf00      	nop
 8006c22:	e000      	b.n	8006c26 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006c24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d107      	bne.n	8006cb8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cb6:	e02a      	b.n	8006d0e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d107      	bne.n	8006cd2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cd0:	e01d      	b.n	8006d0e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d107      	bne.n	8006cec <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2204      	movs	r2, #4
 8006ce0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cea:	e010      	b.n	8006d0e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d107      	bne.n	8006d06 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2208      	movs	r2, #8
 8006cfa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d04:	e003      	b.n	8006d0e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f7ff ffb4 	bl	8006c7c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	771a      	strb	r2, [r3, #28]
}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d10b      	bne.n	8006d52 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d136      	bne.n	8006db6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d50:	e031      	b.n	8006db6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d10b      	bne.n	8006d74 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d125      	bne.n	8006db6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d72:	e020      	b.n	8006db6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d10b      	bne.n	8006d96 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2204      	movs	r2, #4
 8006d82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	69db      	ldr	r3, [r3, #28]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d114      	bne.n	8006db6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d94:	e00f      	b.n	8006db6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d10a      	bne.n	8006db6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2208      	movs	r2, #8
 8006da4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f7fb f932 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	771a      	strb	r2, [r3, #28]
}
 8006dc2:	bf00      	nop
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d103      	bne.n	8006dea <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	771a      	strb	r2, [r3, #28]
 8006de8:	e019      	b.n	8006e1e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d103      	bne.n	8006dfc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2202      	movs	r2, #2
 8006df8:	771a      	strb	r2, [r3, #28]
 8006dfa:	e010      	b.n	8006e1e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d103      	bne.n	8006e0e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2204      	movs	r2, #4
 8006e0a:	771a      	strb	r2, [r3, #28]
 8006e0c:	e007      	b.n	8006e1e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d102      	bne.n	8006e1e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2208      	movs	r2, #8
 8006e1c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7fb f87e 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	771a      	strb	r2, [r3, #28]
}
 8006e2a:	bf00      	nop
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a40      	ldr	r2, [pc, #256]	; (8006f48 <TIM_Base_SetConfig+0x114>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d013      	beq.n	8006e74 <TIM_Base_SetConfig+0x40>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e52:	d00f      	beq.n	8006e74 <TIM_Base_SetConfig+0x40>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a3d      	ldr	r2, [pc, #244]	; (8006f4c <TIM_Base_SetConfig+0x118>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00b      	beq.n	8006e74 <TIM_Base_SetConfig+0x40>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a3c      	ldr	r2, [pc, #240]	; (8006f50 <TIM_Base_SetConfig+0x11c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d007      	beq.n	8006e74 <TIM_Base_SetConfig+0x40>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a3b      	ldr	r2, [pc, #236]	; (8006f54 <TIM_Base_SetConfig+0x120>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d003      	beq.n	8006e74 <TIM_Base_SetConfig+0x40>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a3a      	ldr	r2, [pc, #232]	; (8006f58 <TIM_Base_SetConfig+0x124>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d108      	bne.n	8006e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a2f      	ldr	r2, [pc, #188]	; (8006f48 <TIM_Base_SetConfig+0x114>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d01f      	beq.n	8006ece <TIM_Base_SetConfig+0x9a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e94:	d01b      	beq.n	8006ece <TIM_Base_SetConfig+0x9a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a2c      	ldr	r2, [pc, #176]	; (8006f4c <TIM_Base_SetConfig+0x118>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d017      	beq.n	8006ece <TIM_Base_SetConfig+0x9a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a2b      	ldr	r2, [pc, #172]	; (8006f50 <TIM_Base_SetConfig+0x11c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d013      	beq.n	8006ece <TIM_Base_SetConfig+0x9a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a2a      	ldr	r2, [pc, #168]	; (8006f54 <TIM_Base_SetConfig+0x120>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d00f      	beq.n	8006ece <TIM_Base_SetConfig+0x9a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a29      	ldr	r2, [pc, #164]	; (8006f58 <TIM_Base_SetConfig+0x124>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00b      	beq.n	8006ece <TIM_Base_SetConfig+0x9a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a28      	ldr	r2, [pc, #160]	; (8006f5c <TIM_Base_SetConfig+0x128>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d007      	beq.n	8006ece <TIM_Base_SetConfig+0x9a>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a27      	ldr	r2, [pc, #156]	; (8006f60 <TIM_Base_SetConfig+0x12c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d003      	beq.n	8006ece <TIM_Base_SetConfig+0x9a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a26      	ldr	r2, [pc, #152]	; (8006f64 <TIM_Base_SetConfig+0x130>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d108      	bne.n	8006ee0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a10      	ldr	r2, [pc, #64]	; (8006f48 <TIM_Base_SetConfig+0x114>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00f      	beq.n	8006f2c <TIM_Base_SetConfig+0xf8>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a12      	ldr	r2, [pc, #72]	; (8006f58 <TIM_Base_SetConfig+0x124>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00b      	beq.n	8006f2c <TIM_Base_SetConfig+0xf8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a11      	ldr	r2, [pc, #68]	; (8006f5c <TIM_Base_SetConfig+0x128>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d007      	beq.n	8006f2c <TIM_Base_SetConfig+0xf8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a10      	ldr	r2, [pc, #64]	; (8006f60 <TIM_Base_SetConfig+0x12c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_Base_SetConfig+0xf8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a0f      	ldr	r2, [pc, #60]	; (8006f64 <TIM_Base_SetConfig+0x130>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d103      	bne.n	8006f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	691a      	ldr	r2, [r3, #16]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	615a      	str	r2, [r3, #20]
}
 8006f3a:	bf00      	nop
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40012c00 	.word	0x40012c00
 8006f4c:	40000400 	.word	0x40000400
 8006f50:	40000800 	.word	0x40000800
 8006f54:	40000c00 	.word	0x40000c00
 8006f58:	40013400 	.word	0x40013400
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40014400 	.word	0x40014400
 8006f64:	40014800 	.word	0x40014800

08006f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	f023 0201 	bic.w	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0303 	bic.w	r3, r3, #3
 8006fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f023 0302 	bic.w	r3, r3, #2
 8006fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a2c      	ldr	r2, [pc, #176]	; (8007074 <TIM_OC1_SetConfig+0x10c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00f      	beq.n	8006fe8 <TIM_OC1_SetConfig+0x80>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a2b      	ldr	r2, [pc, #172]	; (8007078 <TIM_OC1_SetConfig+0x110>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00b      	beq.n	8006fe8 <TIM_OC1_SetConfig+0x80>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a2a      	ldr	r2, [pc, #168]	; (800707c <TIM_OC1_SetConfig+0x114>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d007      	beq.n	8006fe8 <TIM_OC1_SetConfig+0x80>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a29      	ldr	r2, [pc, #164]	; (8007080 <TIM_OC1_SetConfig+0x118>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_OC1_SetConfig+0x80>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a28      	ldr	r2, [pc, #160]	; (8007084 <TIM_OC1_SetConfig+0x11c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d10c      	bne.n	8007002 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0308 	bic.w	r3, r3, #8
 8006fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f023 0304 	bic.w	r3, r3, #4
 8007000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a1b      	ldr	r2, [pc, #108]	; (8007074 <TIM_OC1_SetConfig+0x10c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00f      	beq.n	800702a <TIM_OC1_SetConfig+0xc2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a1a      	ldr	r2, [pc, #104]	; (8007078 <TIM_OC1_SetConfig+0x110>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00b      	beq.n	800702a <TIM_OC1_SetConfig+0xc2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a19      	ldr	r2, [pc, #100]	; (800707c <TIM_OC1_SetConfig+0x114>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d007      	beq.n	800702a <TIM_OC1_SetConfig+0xc2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a18      	ldr	r2, [pc, #96]	; (8007080 <TIM_OC1_SetConfig+0x118>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d003      	beq.n	800702a <TIM_OC1_SetConfig+0xc2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a17      	ldr	r2, [pc, #92]	; (8007084 <TIM_OC1_SetConfig+0x11c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d111      	bne.n	800704e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	621a      	str	r2, [r3, #32]
}
 8007068:	bf00      	nop
 800706a:	371c      	adds	r7, #28
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40013400 	.word	0x40013400
 800707c:	40014000 	.word	0x40014000
 8007080:	40014400 	.word	0x40014400
 8007084:	40014800 	.word	0x40014800

08007088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f023 0210 	bic.w	r2, r3, #16
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	021b      	lsls	r3, r3, #8
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f023 0320 	bic.w	r3, r3, #32
 80070d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	011b      	lsls	r3, r3, #4
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a28      	ldr	r2, [pc, #160]	; (8007188 <TIM_OC2_SetConfig+0x100>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d003      	beq.n	80070f4 <TIM_OC2_SetConfig+0x6c>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a27      	ldr	r2, [pc, #156]	; (800718c <TIM_OC2_SetConfig+0x104>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d10d      	bne.n	8007110 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800710e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <TIM_OC2_SetConfig+0x100>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00f      	beq.n	8007138 <TIM_OC2_SetConfig+0xb0>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a1c      	ldr	r2, [pc, #112]	; (800718c <TIM_OC2_SetConfig+0x104>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00b      	beq.n	8007138 <TIM_OC2_SetConfig+0xb0>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a1b      	ldr	r2, [pc, #108]	; (8007190 <TIM_OC2_SetConfig+0x108>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d007      	beq.n	8007138 <TIM_OC2_SetConfig+0xb0>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a1a      	ldr	r2, [pc, #104]	; (8007194 <TIM_OC2_SetConfig+0x10c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d003      	beq.n	8007138 <TIM_OC2_SetConfig+0xb0>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a19      	ldr	r2, [pc, #100]	; (8007198 <TIM_OC2_SetConfig+0x110>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d113      	bne.n	8007160 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800713e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4313      	orrs	r3, r2
 800715e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	40012c00 	.word	0x40012c00
 800718c:	40013400 	.word	0x40013400
 8007190:	40014000 	.word	0x40014000
 8007194:	40014400 	.word	0x40014400
 8007198:	40014800 	.word	0x40014800

0800719c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 0303 	bic.w	r3, r3, #3
 80071d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	021b      	lsls	r3, r3, #8
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a27      	ldr	r2, [pc, #156]	; (8007298 <TIM_OC3_SetConfig+0xfc>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d003      	beq.n	8007206 <TIM_OC3_SetConfig+0x6a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a26      	ldr	r2, [pc, #152]	; (800729c <TIM_OC3_SetConfig+0x100>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d10d      	bne.n	8007222 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800720c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	021b      	lsls	r3, r3, #8
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a1c      	ldr	r2, [pc, #112]	; (8007298 <TIM_OC3_SetConfig+0xfc>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00f      	beq.n	800724a <TIM_OC3_SetConfig+0xae>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a1b      	ldr	r2, [pc, #108]	; (800729c <TIM_OC3_SetConfig+0x100>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00b      	beq.n	800724a <TIM_OC3_SetConfig+0xae>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a1a      	ldr	r2, [pc, #104]	; (80072a0 <TIM_OC3_SetConfig+0x104>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d007      	beq.n	800724a <TIM_OC3_SetConfig+0xae>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a19      	ldr	r2, [pc, #100]	; (80072a4 <TIM_OC3_SetConfig+0x108>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d003      	beq.n	800724a <TIM_OC3_SetConfig+0xae>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a18      	ldr	r2, [pc, #96]	; (80072a8 <TIM_OC3_SetConfig+0x10c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d113      	bne.n	8007272 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	4313      	orrs	r3, r2
 8007264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	4313      	orrs	r3, r2
 8007270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	621a      	str	r2, [r3, #32]
}
 800728c:	bf00      	nop
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	40012c00 	.word	0x40012c00
 800729c:	40013400 	.word	0x40013400
 80072a0:	40014000 	.word	0x40014000
 80072a4:	40014400 	.word	0x40014400
 80072a8:	40014800 	.word	0x40014800

080072ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	031b      	lsls	r3, r3, #12
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a18      	ldr	r2, [pc, #96]	; (800736c <TIM_OC4_SetConfig+0xc0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00f      	beq.n	8007330 <TIM_OC4_SetConfig+0x84>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a17      	ldr	r2, [pc, #92]	; (8007370 <TIM_OC4_SetConfig+0xc4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00b      	beq.n	8007330 <TIM_OC4_SetConfig+0x84>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a16      	ldr	r2, [pc, #88]	; (8007374 <TIM_OC4_SetConfig+0xc8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d007      	beq.n	8007330 <TIM_OC4_SetConfig+0x84>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a15      	ldr	r2, [pc, #84]	; (8007378 <TIM_OC4_SetConfig+0xcc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <TIM_OC4_SetConfig+0x84>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a14      	ldr	r2, [pc, #80]	; (800737c <TIM_OC4_SetConfig+0xd0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d109      	bne.n	8007344 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007336:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	019b      	lsls	r3, r3, #6
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	40012c00 	.word	0x40012c00
 8007370:	40013400 	.word	0x40013400
 8007374:	40014000 	.word	0x40014000
 8007378:	40014400 	.word	0x40014400
 800737c:	40014800 	.word	0x40014800

08007380 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80073c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	041b      	lsls	r3, r3, #16
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a17      	ldr	r2, [pc, #92]	; (8007434 <TIM_OC5_SetConfig+0xb4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00f      	beq.n	80073fa <TIM_OC5_SetConfig+0x7a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a16      	ldr	r2, [pc, #88]	; (8007438 <TIM_OC5_SetConfig+0xb8>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00b      	beq.n	80073fa <TIM_OC5_SetConfig+0x7a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a15      	ldr	r2, [pc, #84]	; (800743c <TIM_OC5_SetConfig+0xbc>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d007      	beq.n	80073fa <TIM_OC5_SetConfig+0x7a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a14      	ldr	r2, [pc, #80]	; (8007440 <TIM_OC5_SetConfig+0xc0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d003      	beq.n	80073fa <TIM_OC5_SetConfig+0x7a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a13      	ldr	r2, [pc, #76]	; (8007444 <TIM_OC5_SetConfig+0xc4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d109      	bne.n	800740e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007400:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	621a      	str	r2, [r3, #32]
}
 8007428:	bf00      	nop
 800742a:	371c      	adds	r7, #28
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	40012c00 	.word	0x40012c00
 8007438:	40013400 	.word	0x40013400
 800743c:	40014000 	.word	0x40014000
 8007440:	40014400 	.word	0x40014400
 8007444:	40014800 	.word	0x40014800

08007448 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	4313      	orrs	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800748e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	051b      	lsls	r3, r3, #20
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4313      	orrs	r3, r2
 800749a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a18      	ldr	r2, [pc, #96]	; (8007500 <TIM_OC6_SetConfig+0xb8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00f      	beq.n	80074c4 <TIM_OC6_SetConfig+0x7c>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a17      	ldr	r2, [pc, #92]	; (8007504 <TIM_OC6_SetConfig+0xbc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d00b      	beq.n	80074c4 <TIM_OC6_SetConfig+0x7c>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a16      	ldr	r2, [pc, #88]	; (8007508 <TIM_OC6_SetConfig+0xc0>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d007      	beq.n	80074c4 <TIM_OC6_SetConfig+0x7c>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a15      	ldr	r2, [pc, #84]	; (800750c <TIM_OC6_SetConfig+0xc4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d003      	beq.n	80074c4 <TIM_OC6_SetConfig+0x7c>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a14      	ldr	r2, [pc, #80]	; (8007510 <TIM_OC6_SetConfig+0xc8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d109      	bne.n	80074d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	029b      	lsls	r3, r3, #10
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	621a      	str	r2, [r3, #32]
}
 80074f2:	bf00      	nop
 80074f4:	371c      	adds	r7, #28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	40012c00 	.word	0x40012c00
 8007504:	40013400 	.word	0x40013400
 8007508:	40014000 	.word	0x40014000
 800750c:	40014400 	.word	0x40014400
 8007510:	40014800 	.word	0x40014800

08007514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	f023 0201 	bic.w	r2, r3, #1
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800753e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f023 030a 	bic.w	r3, r3, #10
 8007550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	4313      	orrs	r3, r2
 8007558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	621a      	str	r2, [r3, #32]
}
 8007566:	bf00      	nop
 8007568:	371c      	adds	r7, #28
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007572:	b480      	push	{r7}
 8007574:	b087      	sub	sp, #28
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f023 0210 	bic.w	r2, r3, #16
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800759c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	031b      	lsls	r3, r3, #12
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	011b      	lsls	r3, r3, #4
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	621a      	str	r2, [r3, #32]
}
 80075c6:	bf00      	nop
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b085      	sub	sp, #20
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80075e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f043 0307 	orr.w	r3, r3, #7
 80075f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	609a      	str	r2, [r3, #8]
}
 8007600:	bf00      	nop
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	021a      	lsls	r2, r3, #8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	431a      	orrs	r2, r3
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	4313      	orrs	r3, r2
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	4313      	orrs	r3, r2
 8007638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	609a      	str	r2, [r3, #8]
}
 8007640:	bf00      	nop
 8007642:	371c      	adds	r7, #28
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f003 031f 	and.w	r3, r3, #31
 800765e:	2201      	movs	r2, #1
 8007660:	fa02 f303 	lsl.w	r3, r2, r3
 8007664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a1a      	ldr	r2, [r3, #32]
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	43db      	mvns	r3, r3
 800766e:	401a      	ands	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a1a      	ldr	r2, [r3, #32]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f003 031f 	and.w	r3, r3, #31
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	fa01 f303 	lsl.w	r3, r1, r3
 8007684:	431a      	orrs	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	621a      	str	r2, [r3, #32]
}
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
	...

08007698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d101      	bne.n	80076b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076ac:	2302      	movs	r3, #2
 80076ae:	e068      	b.n	8007782 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a2e      	ldr	r2, [pc, #184]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d004      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a2d      	ldr	r2, [pc, #180]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d108      	bne.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4313      	orrs	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1e      	ldr	r2, [pc, #120]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d01d      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007722:	d018      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1b      	ldr	r2, [pc, #108]	; (8007798 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d013      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1a      	ldr	r2, [pc, #104]	; (800779c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d00e      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a18      	ldr	r2, [pc, #96]	; (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d009      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a13      	ldr	r2, [pc, #76]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d004      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a14      	ldr	r2, [pc, #80]	; (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d10c      	bne.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800775c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	4313      	orrs	r3, r2
 8007766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40012c00 	.word	0x40012c00
 8007794:	40013400 	.word	0x40013400
 8007798:	40000400 	.word	0x40000400
 800779c:	40000800 	.word	0x40000800
 80077a0:	40000c00 	.word	0x40000c00
 80077a4:	40014000 	.word	0x40014000

080077a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e042      	b.n	800787c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d106      	bne.n	800780e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7fb f86f 	bl	80028ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2224      	movs	r2, #36	; 0x24
 8007812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0201 	bic.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fb3c 	bl	8007ea4 <UART_SetConfig>
 800782c:	4603      	mov	r3, r0
 800782e:	2b01      	cmp	r3, #1
 8007830:	d101      	bne.n	8007836 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e022      	b.n	800787c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fdfe 	bl	8008440 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fe85 	bl	8008584 <UART_CheckIdleState>
 800787a:	4603      	mov	r3, r0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	4613      	mov	r3, r2
 8007890:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007898:	2b20      	cmp	r3, #32
 800789a:	d131      	bne.n	8007900 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_UART_Receive_IT+0x24>
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e02a      	b.n	8007902 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d101      	bne.n	80078ba <HAL_UART_Receive_IT+0x36>
 80078b6:	2302      	movs	r3, #2
 80078b8:	e023      	b.n	8007902 <HAL_UART_Receive_IT+0x7e>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a0f      	ldr	r2, [pc, #60]	; (800790c <HAL_UART_Receive_IT+0x88>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00e      	beq.n	80078f0 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d007      	beq.n	80078f0 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80078ee:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80078f0:	88fb      	ldrh	r3, [r7, #6]
 80078f2:	461a      	mov	r2, r3
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 ff10 	bl	800871c <UART_Start_Receive_IT>
 80078fc:	4603      	mov	r3, r0
 80078fe:	e000      	b.n	8007902 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007900:	2302      	movs	r3, #2
  }
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40008000 	.word	0x40008000

08007910 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	4613      	mov	r3, r2
 800791c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007924:	2b20      	cmp	r3, #32
 8007926:	d168      	bne.n	80079fa <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_UART_Transmit_DMA+0x24>
 800792e:	88fb      	ldrh	r3, [r7, #6]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e061      	b.n	80079fc <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <HAL_UART_Transmit_DMA+0x36>
 8007942:	2302      	movs	r3, #2
 8007944:	e05a      	b.n	80079fc <HAL_UART_Transmit_DMA+0xec>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	88fa      	ldrh	r2, [r7, #6]
 8007958:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	88fa      	ldrh	r2, [r7, #6]
 8007960:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2221      	movs	r2, #33	; 0x21
 8007970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007978:	2b00      	cmp	r3, #0
 800797a:	d02c      	beq.n	80079d6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007980:	4a20      	ldr	r2, [pc, #128]	; (8007a04 <HAL_UART_Transmit_DMA+0xf4>)
 8007982:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007988:	4a1f      	ldr	r2, [pc, #124]	; (8007a08 <HAL_UART_Transmit_DMA+0xf8>)
 800798a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007990:	4a1e      	ldr	r2, [pc, #120]	; (8007a0c <HAL_UART_Transmit_DMA+0xfc>)
 8007992:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007998:	2200      	movs	r2, #0
 800799a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a4:	4619      	mov	r1, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3328      	adds	r3, #40	; 0x28
 80079ac:	461a      	mov	r2, r3
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	f7fb ff38 	bl	8003824 <HAL_DMA_Start_IT>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00d      	beq.n	80079d6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2210      	movs	r2, #16
 80079be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e012      	b.n	80079fc <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2240      	movs	r2, #64	; 0x40
 80079dc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079f4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	e000      	b.n	80079fc <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80079fa:	2302      	movs	r3, #2
  }
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	08008939 	.word	0x08008939
 8007a08:	0800898d 	.word	0x0800898d
 8007a0c:	080089a9 	.word	0x080089a9

08007a10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a36:	4013      	ands	r3, r2
 8007a38:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d118      	bne.n	8007a72 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	f003 0320 	and.w	r3, r3, #32
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d013      	beq.n	8007a72 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	f003 0320 	and.w	r3, r3, #32
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d104      	bne.n	8007a5e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d009      	beq.n	8007a72 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 81fb 	beq.w	8007e5e <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4798      	blx	r3
      }
      return;
 8007a70:	e1f5      	b.n	8007e5e <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 80ef 	beq.w	8007c58 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4b73      	ldr	r3, [pc, #460]	; (8007c4c <HAL_UART_IRQHandler+0x23c>)
 8007a7e:	4013      	ands	r3, r2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d105      	bne.n	8007a90 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	4b72      	ldr	r3, [pc, #456]	; (8007c50 <HAL_UART_IRQHandler+0x240>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 80e4 	beq.w	8007c58 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d010      	beq.n	8007abc <HAL_UART_IRQHandler+0xac>
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00b      	beq.n	8007abc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab2:	f043 0201 	orr.w	r2, r3, #1
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d010      	beq.n	8007ae8 <HAL_UART_IRQHandler+0xd8>
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00b      	beq.n	8007ae8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ade:	f043 0204 	orr.w	r2, r3, #4
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	f003 0304 	and.w	r3, r3, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d010      	beq.n	8007b14 <HAL_UART_IRQHandler+0x104>
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2204      	movs	r2, #4
 8007b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b0a:	f043 0202 	orr.w	r2, r3, #2
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d015      	beq.n	8007b4a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	f003 0320 	and.w	r3, r3, #32
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d104      	bne.n	8007b32 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	4b48      	ldr	r3, [pc, #288]	; (8007c4c <HAL_UART_IRQHandler+0x23c>)
 8007b2c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00b      	beq.n	8007b4a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2208      	movs	r2, #8
 8007b38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b40:	f043 0208 	orr.w	r2, r3, #8
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d011      	beq.n	8007b78 <HAL_UART_IRQHandler+0x168>
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00c      	beq.n	8007b78 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b6e:	f043 0220 	orr.w	r2, r3, #32
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 816f 	beq.w	8007e62 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d011      	beq.n	8007bb2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	f003 0320 	and.w	r3, r3, #32
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d104      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d007      	beq.n	8007bb2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bb8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc4:	2b40      	cmp	r3, #64	; 0x40
 8007bc6:	d004      	beq.n	8007bd2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d031      	beq.n	8007c36 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fe7e 	bl	80088d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be2:	2b40      	cmp	r3, #64	; 0x40
 8007be4:	d123      	bne.n	8007c2e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bf4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d013      	beq.n	8007c26 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c02:	4a14      	ldr	r2, [pc, #80]	; (8007c54 <HAL_UART_IRQHandler+0x244>)
 8007c04:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fb fee1 	bl	80039d2 <HAL_DMA_Abort_IT>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d017      	beq.n	8007c46 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c24:	e00f      	b.n	8007c46 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f926 	bl	8007e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2c:	e00b      	b.n	8007c46 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f922 	bl	8007e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c34:	e007      	b.n	8007c46 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f91e 	bl	8007e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007c44:	e10d      	b.n	8007e62 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c46:	bf00      	nop
    return;
 8007c48:	e10b      	b.n	8007e62 <HAL_UART_IRQHandler+0x452>
 8007c4a:	bf00      	nop
 8007c4c:	10000001 	.word	0x10000001
 8007c50:	04000120 	.word	0x04000120
 8007c54:	08008a29 	.word	0x08008a29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	f040 80ab 	bne.w	8007db8 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	f003 0310 	and.w	r3, r3, #16
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 80a5 	beq.w	8007db8 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	f003 0310 	and.w	r3, r3, #16
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 809f 	beq.w	8007db8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2210      	movs	r2, #16
 8007c80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8c:	2b40      	cmp	r3, #64	; 0x40
 8007c8e:	d155      	bne.n	8007d3c <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8007c9a:	893b      	ldrh	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 80e2 	beq.w	8007e66 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ca8:	893a      	ldrh	r2, [r7, #8]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	f080 80db 	bcs.w	8007e66 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	893a      	ldrh	r2, [r7, #8]
 8007cb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d12b      	bne.n	8007d20 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cd6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 0201 	bic.w	r2, r2, #1
 8007ce6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cf6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f022 0210 	bic.w	r2, r2, #16
 8007d14:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fb fdfd 	bl	800391a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f8a9 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d3a:	e094      	b.n	8007e66 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 8087 	beq.w	8007e6a <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8007d5c:	897b      	ldrh	r3, [r7, #10]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 8083 	beq.w	8007e6a <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d72:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6812      	ldr	r2, [r2, #0]
 8007d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d82:	f023 0301 	bic.w	r3, r3, #1
 8007d86:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0210 	bic.w	r2, r2, #16
 8007daa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dac:	897b      	ldrh	r3, [r7, #10]
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f86b 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007db6:	e058      	b.n	8007e6a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00d      	beq.n	8007dde <HAL_UART_IRQHandler+0x3ce>
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d008      	beq.n	8007dde <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f001 f932 	bl	8009040 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ddc:	e048      	b.n	8007e70 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d012      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d104      	bne.n	8007dfc <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d008      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d034      	beq.n	8007e6e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4798      	blx	r3
    }
    return;
 8007e0c:	e02f      	b.n	8007e6e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d008      	beq.n	8007e2a <HAL_UART_IRQHandler+0x41a>
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fe16 	bl	8008a54 <UART_EndTransmit_IT>
    return;
 8007e28:	e022      	b.n	8007e70 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d008      	beq.n	8007e46 <HAL_UART_IRQHandler+0x436>
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 f912 	bl	8009068 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e44:	e014      	b.n	8007e70 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00f      	beq.n	8007e70 <HAL_UART_IRQHandler+0x460>
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	da0c      	bge.n	8007e70 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f001 f8fc 	bl	8009054 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e5c:	e008      	b.n	8007e70 <HAL_UART_IRQHandler+0x460>
      return;
 8007e5e:	bf00      	nop
 8007e60:	e006      	b.n	8007e70 <HAL_UART_IRQHandler+0x460>
    return;
 8007e62:	bf00      	nop
 8007e64:	e004      	b.n	8007e70 <HAL_UART_IRQHandler+0x460>
      return;
 8007e66:	bf00      	nop
 8007e68:	e002      	b.n	8007e70 <HAL_UART_IRQHandler+0x460>
      return;
 8007e6a:	bf00      	nop
 8007e6c:	e000      	b.n	8007e70 <HAL_UART_IRQHandler+0x460>
    return;
 8007e6e:	bf00      	nop
  }
}
 8007e70:	3720      	adds	r7, #32
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop

08007e78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ea4:	b5b0      	push	{r4, r5, r7, lr}
 8007ea6:	b088      	sub	sp, #32
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689a      	ldr	r2, [r3, #8]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	4bb1      	ldr	r3, [pc, #708]	; (8008194 <UART_SetConfig+0x2f0>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	6812      	ldr	r2, [r2, #0]
 8007ed6:	69f9      	ldr	r1, [r7, #28]
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4aa6      	ldr	r2, [pc, #664]	; (8008198 <UART_SetConfig+0x2f4>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d004      	beq.n	8007f0c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007f16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6812      	ldr	r2, [r2, #0]
 8007f1e:	69f9      	ldr	r1, [r7, #28]
 8007f20:	430b      	orrs	r3, r1
 8007f22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2a:	f023 010f 	bic.w	r1, r3, #15
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a97      	ldr	r2, [pc, #604]	; (800819c <UART_SetConfig+0x2f8>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d120      	bne.n	8007f86 <UART_SetConfig+0xe2>
 8007f44:	4b96      	ldr	r3, [pc, #600]	; (80081a0 <UART_SetConfig+0x2fc>)
 8007f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4a:	f003 0303 	and.w	r3, r3, #3
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	d816      	bhi.n	8007f80 <UART_SetConfig+0xdc>
 8007f52:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <UART_SetConfig+0xb4>)
 8007f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f58:	08007f69 	.word	0x08007f69
 8007f5c:	08007f75 	.word	0x08007f75
 8007f60:	08007f6f 	.word	0x08007f6f
 8007f64:	08007f7b 	.word	0x08007f7b
 8007f68:	2301      	movs	r3, #1
 8007f6a:	76fb      	strb	r3, [r7, #27]
 8007f6c:	e0e7      	b.n	800813e <UART_SetConfig+0x29a>
 8007f6e:	2302      	movs	r3, #2
 8007f70:	76fb      	strb	r3, [r7, #27]
 8007f72:	e0e4      	b.n	800813e <UART_SetConfig+0x29a>
 8007f74:	2304      	movs	r3, #4
 8007f76:	76fb      	strb	r3, [r7, #27]
 8007f78:	e0e1      	b.n	800813e <UART_SetConfig+0x29a>
 8007f7a:	2308      	movs	r3, #8
 8007f7c:	76fb      	strb	r3, [r7, #27]
 8007f7e:	e0de      	b.n	800813e <UART_SetConfig+0x29a>
 8007f80:	2310      	movs	r3, #16
 8007f82:	76fb      	strb	r3, [r7, #27]
 8007f84:	e0db      	b.n	800813e <UART_SetConfig+0x29a>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a86      	ldr	r2, [pc, #536]	; (80081a4 <UART_SetConfig+0x300>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d132      	bne.n	8007ff6 <UART_SetConfig+0x152>
 8007f90:	4b83      	ldr	r3, [pc, #524]	; (80081a0 <UART_SetConfig+0x2fc>)
 8007f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f96:	f003 030c 	and.w	r3, r3, #12
 8007f9a:	2b0c      	cmp	r3, #12
 8007f9c:	d828      	bhi.n	8007ff0 <UART_SetConfig+0x14c>
 8007f9e:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <UART_SetConfig+0x100>)
 8007fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa4:	08007fd9 	.word	0x08007fd9
 8007fa8:	08007ff1 	.word	0x08007ff1
 8007fac:	08007ff1 	.word	0x08007ff1
 8007fb0:	08007ff1 	.word	0x08007ff1
 8007fb4:	08007fe5 	.word	0x08007fe5
 8007fb8:	08007ff1 	.word	0x08007ff1
 8007fbc:	08007ff1 	.word	0x08007ff1
 8007fc0:	08007ff1 	.word	0x08007ff1
 8007fc4:	08007fdf 	.word	0x08007fdf
 8007fc8:	08007ff1 	.word	0x08007ff1
 8007fcc:	08007ff1 	.word	0x08007ff1
 8007fd0:	08007ff1 	.word	0x08007ff1
 8007fd4:	08007feb 	.word	0x08007feb
 8007fd8:	2300      	movs	r3, #0
 8007fda:	76fb      	strb	r3, [r7, #27]
 8007fdc:	e0af      	b.n	800813e <UART_SetConfig+0x29a>
 8007fde:	2302      	movs	r3, #2
 8007fe0:	76fb      	strb	r3, [r7, #27]
 8007fe2:	e0ac      	b.n	800813e <UART_SetConfig+0x29a>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	76fb      	strb	r3, [r7, #27]
 8007fe8:	e0a9      	b.n	800813e <UART_SetConfig+0x29a>
 8007fea:	2308      	movs	r3, #8
 8007fec:	76fb      	strb	r3, [r7, #27]
 8007fee:	e0a6      	b.n	800813e <UART_SetConfig+0x29a>
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	76fb      	strb	r3, [r7, #27]
 8007ff4:	e0a3      	b.n	800813e <UART_SetConfig+0x29a>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a6b      	ldr	r2, [pc, #428]	; (80081a8 <UART_SetConfig+0x304>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d120      	bne.n	8008042 <UART_SetConfig+0x19e>
 8008000:	4b67      	ldr	r3, [pc, #412]	; (80081a0 <UART_SetConfig+0x2fc>)
 8008002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008006:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800800a:	2b30      	cmp	r3, #48	; 0x30
 800800c:	d013      	beq.n	8008036 <UART_SetConfig+0x192>
 800800e:	2b30      	cmp	r3, #48	; 0x30
 8008010:	d814      	bhi.n	800803c <UART_SetConfig+0x198>
 8008012:	2b20      	cmp	r3, #32
 8008014:	d009      	beq.n	800802a <UART_SetConfig+0x186>
 8008016:	2b20      	cmp	r3, #32
 8008018:	d810      	bhi.n	800803c <UART_SetConfig+0x198>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <UART_SetConfig+0x180>
 800801e:	2b10      	cmp	r3, #16
 8008020:	d006      	beq.n	8008030 <UART_SetConfig+0x18c>
 8008022:	e00b      	b.n	800803c <UART_SetConfig+0x198>
 8008024:	2300      	movs	r3, #0
 8008026:	76fb      	strb	r3, [r7, #27]
 8008028:	e089      	b.n	800813e <UART_SetConfig+0x29a>
 800802a:	2302      	movs	r3, #2
 800802c:	76fb      	strb	r3, [r7, #27]
 800802e:	e086      	b.n	800813e <UART_SetConfig+0x29a>
 8008030:	2304      	movs	r3, #4
 8008032:	76fb      	strb	r3, [r7, #27]
 8008034:	e083      	b.n	800813e <UART_SetConfig+0x29a>
 8008036:	2308      	movs	r3, #8
 8008038:	76fb      	strb	r3, [r7, #27]
 800803a:	e080      	b.n	800813e <UART_SetConfig+0x29a>
 800803c:	2310      	movs	r3, #16
 800803e:	76fb      	strb	r3, [r7, #27]
 8008040:	e07d      	b.n	800813e <UART_SetConfig+0x29a>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a59      	ldr	r2, [pc, #356]	; (80081ac <UART_SetConfig+0x308>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d120      	bne.n	800808e <UART_SetConfig+0x1ea>
 800804c:	4b54      	ldr	r3, [pc, #336]	; (80081a0 <UART_SetConfig+0x2fc>)
 800804e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008052:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008056:	2bc0      	cmp	r3, #192	; 0xc0
 8008058:	d013      	beq.n	8008082 <UART_SetConfig+0x1de>
 800805a:	2bc0      	cmp	r3, #192	; 0xc0
 800805c:	d814      	bhi.n	8008088 <UART_SetConfig+0x1e4>
 800805e:	2b80      	cmp	r3, #128	; 0x80
 8008060:	d009      	beq.n	8008076 <UART_SetConfig+0x1d2>
 8008062:	2b80      	cmp	r3, #128	; 0x80
 8008064:	d810      	bhi.n	8008088 <UART_SetConfig+0x1e4>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d002      	beq.n	8008070 <UART_SetConfig+0x1cc>
 800806a:	2b40      	cmp	r3, #64	; 0x40
 800806c:	d006      	beq.n	800807c <UART_SetConfig+0x1d8>
 800806e:	e00b      	b.n	8008088 <UART_SetConfig+0x1e4>
 8008070:	2300      	movs	r3, #0
 8008072:	76fb      	strb	r3, [r7, #27]
 8008074:	e063      	b.n	800813e <UART_SetConfig+0x29a>
 8008076:	2302      	movs	r3, #2
 8008078:	76fb      	strb	r3, [r7, #27]
 800807a:	e060      	b.n	800813e <UART_SetConfig+0x29a>
 800807c:	2304      	movs	r3, #4
 800807e:	76fb      	strb	r3, [r7, #27]
 8008080:	e05d      	b.n	800813e <UART_SetConfig+0x29a>
 8008082:	2308      	movs	r3, #8
 8008084:	76fb      	strb	r3, [r7, #27]
 8008086:	e05a      	b.n	800813e <UART_SetConfig+0x29a>
 8008088:	2310      	movs	r3, #16
 800808a:	76fb      	strb	r3, [r7, #27]
 800808c:	e057      	b.n	800813e <UART_SetConfig+0x29a>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a47      	ldr	r2, [pc, #284]	; (80081b0 <UART_SetConfig+0x30c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d125      	bne.n	80080e4 <UART_SetConfig+0x240>
 8008098:	4b41      	ldr	r3, [pc, #260]	; (80081a0 <UART_SetConfig+0x2fc>)
 800809a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080a6:	d017      	beq.n	80080d8 <UART_SetConfig+0x234>
 80080a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080ac:	d817      	bhi.n	80080de <UART_SetConfig+0x23a>
 80080ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b2:	d00b      	beq.n	80080cc <UART_SetConfig+0x228>
 80080b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b8:	d811      	bhi.n	80080de <UART_SetConfig+0x23a>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <UART_SetConfig+0x222>
 80080be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c2:	d006      	beq.n	80080d2 <UART_SetConfig+0x22e>
 80080c4:	e00b      	b.n	80080de <UART_SetConfig+0x23a>
 80080c6:	2300      	movs	r3, #0
 80080c8:	76fb      	strb	r3, [r7, #27]
 80080ca:	e038      	b.n	800813e <UART_SetConfig+0x29a>
 80080cc:	2302      	movs	r3, #2
 80080ce:	76fb      	strb	r3, [r7, #27]
 80080d0:	e035      	b.n	800813e <UART_SetConfig+0x29a>
 80080d2:	2304      	movs	r3, #4
 80080d4:	76fb      	strb	r3, [r7, #27]
 80080d6:	e032      	b.n	800813e <UART_SetConfig+0x29a>
 80080d8:	2308      	movs	r3, #8
 80080da:	76fb      	strb	r3, [r7, #27]
 80080dc:	e02f      	b.n	800813e <UART_SetConfig+0x29a>
 80080de:	2310      	movs	r3, #16
 80080e0:	76fb      	strb	r3, [r7, #27]
 80080e2:	e02c      	b.n	800813e <UART_SetConfig+0x29a>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a2b      	ldr	r2, [pc, #172]	; (8008198 <UART_SetConfig+0x2f4>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d125      	bne.n	800813a <UART_SetConfig+0x296>
 80080ee:	4b2c      	ldr	r3, [pc, #176]	; (80081a0 <UART_SetConfig+0x2fc>)
 80080f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080fc:	d017      	beq.n	800812e <UART_SetConfig+0x28a>
 80080fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008102:	d817      	bhi.n	8008134 <UART_SetConfig+0x290>
 8008104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008108:	d00b      	beq.n	8008122 <UART_SetConfig+0x27e>
 800810a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800810e:	d811      	bhi.n	8008134 <UART_SetConfig+0x290>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <UART_SetConfig+0x278>
 8008114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008118:	d006      	beq.n	8008128 <UART_SetConfig+0x284>
 800811a:	e00b      	b.n	8008134 <UART_SetConfig+0x290>
 800811c:	2300      	movs	r3, #0
 800811e:	76fb      	strb	r3, [r7, #27]
 8008120:	e00d      	b.n	800813e <UART_SetConfig+0x29a>
 8008122:	2302      	movs	r3, #2
 8008124:	76fb      	strb	r3, [r7, #27]
 8008126:	e00a      	b.n	800813e <UART_SetConfig+0x29a>
 8008128:	2304      	movs	r3, #4
 800812a:	76fb      	strb	r3, [r7, #27]
 800812c:	e007      	b.n	800813e <UART_SetConfig+0x29a>
 800812e:	2308      	movs	r3, #8
 8008130:	76fb      	strb	r3, [r7, #27]
 8008132:	e004      	b.n	800813e <UART_SetConfig+0x29a>
 8008134:	2310      	movs	r3, #16
 8008136:	76fb      	strb	r3, [r7, #27]
 8008138:	e001      	b.n	800813e <UART_SetConfig+0x29a>
 800813a:	2310      	movs	r3, #16
 800813c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a15      	ldr	r2, [pc, #84]	; (8008198 <UART_SetConfig+0x2f4>)
 8008144:	4293      	cmp	r3, r2
 8008146:	f040 80a3 	bne.w	8008290 <UART_SetConfig+0x3ec>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800814a:	7efb      	ldrb	r3, [r7, #27]
 800814c:	2b08      	cmp	r3, #8
 800814e:	d83b      	bhi.n	80081c8 <UART_SetConfig+0x324>
 8008150:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <UART_SetConfig+0x2b4>)
 8008152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008156:	bf00      	nop
 8008158:	0800817d 	.word	0x0800817d
 800815c:	08008185 	.word	0x08008185
 8008160:	0800818d 	.word	0x0800818d
 8008164:	080081c9 	.word	0x080081c9
 8008168:	080081b9 	.word	0x080081b9
 800816c:	080081c9 	.word	0x080081c9
 8008170:	080081c9 	.word	0x080081c9
 8008174:	080081c9 	.word	0x080081c9
 8008178:	080081c1 	.word	0x080081c1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800817c:	f7fc ffee 	bl	800515c <HAL_RCC_GetPCLK1Freq>
 8008180:	6178      	str	r0, [r7, #20]
        break;
 8008182:	e026      	b.n	80081d2 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008184:	f7fc fffe 	bl	8005184 <HAL_RCC_GetPCLK2Freq>
 8008188:	6178      	str	r0, [r7, #20]
        break;
 800818a:	e022      	b.n	80081d2 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800818c:	4b09      	ldr	r3, [pc, #36]	; (80081b4 <UART_SetConfig+0x310>)
 800818e:	617b      	str	r3, [r7, #20]
        break;
 8008190:	e01f      	b.n	80081d2 <UART_SetConfig+0x32e>
 8008192:	bf00      	nop
 8008194:	cfff69f3 	.word	0xcfff69f3
 8008198:	40008000 	.word	0x40008000
 800819c:	40013800 	.word	0x40013800
 80081a0:	40021000 	.word	0x40021000
 80081a4:	40004400 	.word	0x40004400
 80081a8:	40004800 	.word	0x40004800
 80081ac:	40004c00 	.word	0x40004c00
 80081b0:	40005000 	.word	0x40005000
 80081b4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081b8:	f7fc ff1e 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 80081bc:	6178      	str	r0, [r7, #20]
        break;
 80081be:	e008      	b.n	80081d2 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081c4:	617b      	str	r3, [r7, #20]
        break;
 80081c6:	e004      	b.n	80081d2 <UART_SetConfig+0x32e>
      default:
        pclk = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	76bb      	strb	r3, [r7, #26]
        break;
 80081d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 811b 	beq.w	8008410 <UART_SetConfig+0x56c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	4a96      	ldr	r2, [pc, #600]	; (8008438 <UART_SetConfig+0x594>)
 80081e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081e4:	461a      	mov	r2, r3
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ec:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	4613      	mov	r3, r2
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	4413      	add	r3, r2
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d305      	bcc.n	800820a <UART_SetConfig+0x366>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	429a      	cmp	r2, r3
 8008208:	d902      	bls.n	8008210 <UART_SetConfig+0x36c>
      {
        ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	76bb      	strb	r3, [r7, #26]
 800820e:	e0ff      	b.n	8008410 <UART_SetConfig+0x56c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	4618      	mov	r0, r3
 8008214:	f04f 0100 	mov.w	r1, #0
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821c:	4a86      	ldr	r2, [pc, #536]	; (8008438 <UART_SetConfig+0x594>)
 800821e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008222:	b29a      	uxth	r2, r3
 8008224:	f04f 0300 	mov.w	r3, #0
 8008228:	f7f8 fcc2 	bl	8000bb0 <__aeabi_uldivmod>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4610      	mov	r0, r2
 8008232:	4619      	mov	r1, r3
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	020b      	lsls	r3, r1, #8
 800823e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008242:	0202      	lsls	r2, r0, #8
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	6849      	ldr	r1, [r1, #4]
 8008248:	0849      	lsrs	r1, r1, #1
 800824a:	4608      	mov	r0, r1
 800824c:	f04f 0100 	mov.w	r1, #0
 8008250:	1814      	adds	r4, r2, r0
 8008252:	eb43 0501 	adc.w	r5, r3, r1
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	461a      	mov	r2, r3
 800825c:	f04f 0300 	mov.w	r3, #0
 8008260:	4620      	mov	r0, r4
 8008262:	4629      	mov	r1, r5
 8008264:	f7f8 fca4 	bl	8000bb0 <__aeabi_uldivmod>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	4613      	mov	r3, r2
 800826e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008276:	d308      	bcc.n	800828a <UART_SetConfig+0x3e6>
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800827e:	d204      	bcs.n	800828a <UART_SetConfig+0x3e6>
        {
          huart->Instance->BRR = usartdiv;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	60da      	str	r2, [r3, #12]
 8008288:	e0c2      	b.n	8008410 <UART_SetConfig+0x56c>
        }
        else
        {
          ret = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	76bb      	strb	r3, [r7, #26]
 800828e:	e0bf      	b.n	8008410 <UART_SetConfig+0x56c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008298:	d165      	bne.n	8008366 <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 800829a:	7efb      	ldrb	r3, [r7, #27]
 800829c:	2b08      	cmp	r3, #8
 800829e:	d828      	bhi.n	80082f2 <UART_SetConfig+0x44e>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <UART_SetConfig+0x404>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082cd 	.word	0x080082cd
 80082ac:	080082d5 	.word	0x080082d5
 80082b0:	080082dd 	.word	0x080082dd
 80082b4:	080082f3 	.word	0x080082f3
 80082b8:	080082e3 	.word	0x080082e3
 80082bc:	080082f3 	.word	0x080082f3
 80082c0:	080082f3 	.word	0x080082f3
 80082c4:	080082f3 	.word	0x080082f3
 80082c8:	080082eb 	.word	0x080082eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082cc:	f7fc ff46 	bl	800515c <HAL_RCC_GetPCLK1Freq>
 80082d0:	6178      	str	r0, [r7, #20]
        break;
 80082d2:	e013      	b.n	80082fc <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082d4:	f7fc ff56 	bl	8005184 <HAL_RCC_GetPCLK2Freq>
 80082d8:	6178      	str	r0, [r7, #20]
        break;
 80082da:	e00f      	b.n	80082fc <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082dc:	4b57      	ldr	r3, [pc, #348]	; (800843c <UART_SetConfig+0x598>)
 80082de:	617b      	str	r3, [r7, #20]
        break;
 80082e0:	e00c      	b.n	80082fc <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082e2:	f7fc fe89 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 80082e6:	6178      	str	r0, [r7, #20]
        break;
 80082e8:	e008      	b.n	80082fc <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ee:	617b      	str	r3, [r7, #20]
        break;
 80082f0:	e004      	b.n	80082fc <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	76bb      	strb	r3, [r7, #26]
        break;
 80082fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 8086 	beq.w	8008410 <UART_SetConfig+0x56c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	4a4b      	ldr	r2, [pc, #300]	; (8008438 <UART_SetConfig+0x594>)
 800830a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800830e:	461a      	mov	r2, r3
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	fbb3 f3f2 	udiv	r3, r3, r2
 8008316:	005a      	lsls	r2, r3, #1
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	085b      	lsrs	r3, r3, #1
 800831e:	441a      	add	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	fbb2 f3f3 	udiv	r3, r2, r3
 8008328:	b29b      	uxth	r3, r3
 800832a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	2b0f      	cmp	r3, #15
 8008330:	d916      	bls.n	8008360 <UART_SetConfig+0x4bc>
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008338:	d212      	bcs.n	8008360 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	b29b      	uxth	r3, r3
 800833e:	f023 030f 	bic.w	r3, r3, #15
 8008342:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	085b      	lsrs	r3, r3, #1
 8008348:	b29b      	uxth	r3, r3
 800834a:	f003 0307 	and.w	r3, r3, #7
 800834e:	b29a      	uxth	r2, r3
 8008350:	89fb      	ldrh	r3, [r7, #14]
 8008352:	4313      	orrs	r3, r2
 8008354:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	89fa      	ldrh	r2, [r7, #14]
 800835c:	60da      	str	r2, [r3, #12]
 800835e:	e057      	b.n	8008410 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	76bb      	strb	r3, [r7, #26]
 8008364:	e054      	b.n	8008410 <UART_SetConfig+0x56c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008366:	7efb      	ldrb	r3, [r7, #27]
 8008368:	2b08      	cmp	r3, #8
 800836a:	d828      	bhi.n	80083be <UART_SetConfig+0x51a>
 800836c:	a201      	add	r2, pc, #4	; (adr r2, 8008374 <UART_SetConfig+0x4d0>)
 800836e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008372:	bf00      	nop
 8008374:	08008399 	.word	0x08008399
 8008378:	080083a1 	.word	0x080083a1
 800837c:	080083a9 	.word	0x080083a9
 8008380:	080083bf 	.word	0x080083bf
 8008384:	080083af 	.word	0x080083af
 8008388:	080083bf 	.word	0x080083bf
 800838c:	080083bf 	.word	0x080083bf
 8008390:	080083bf 	.word	0x080083bf
 8008394:	080083b7 	.word	0x080083b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008398:	f7fc fee0 	bl	800515c <HAL_RCC_GetPCLK1Freq>
 800839c:	6178      	str	r0, [r7, #20]
        break;
 800839e:	e013      	b.n	80083c8 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083a0:	f7fc fef0 	bl	8005184 <HAL_RCC_GetPCLK2Freq>
 80083a4:	6178      	str	r0, [r7, #20]
        break;
 80083a6:	e00f      	b.n	80083c8 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083a8:	4b24      	ldr	r3, [pc, #144]	; (800843c <UART_SetConfig+0x598>)
 80083aa:	617b      	str	r3, [r7, #20]
        break;
 80083ac:	e00c      	b.n	80083c8 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ae:	f7fc fe23 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 80083b2:	6178      	str	r0, [r7, #20]
        break;
 80083b4:	e008      	b.n	80083c8 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ba:	617b      	str	r3, [r7, #20]
        break;
 80083bc:	e004      	b.n	80083c8 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	76bb      	strb	r3, [r7, #26]
        break;
 80083c6:	bf00      	nop
    }

    if (pclk != 0U)
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d020      	beq.n	8008410 <UART_SetConfig+0x56c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	4a19      	ldr	r2, [pc, #100]	; (8008438 <UART_SetConfig+0x594>)
 80083d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083d8:	461a      	mov	r2, r3
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	085b      	lsrs	r3, r3, #1
 80083e6:	441a      	add	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	2b0f      	cmp	r3, #15
 80083f8:	d908      	bls.n	800840c <UART_SetConfig+0x568>
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008400:	d204      	bcs.n	800840c <UART_SetConfig+0x568>
      {
        huart->Instance->BRR = usartdiv;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	60da      	str	r2, [r3, #12]
 800840a:	e001      	b.n	8008410 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800842c:	7ebb      	ldrb	r3, [r7, #26]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3720      	adds	r7, #32
 8008432:	46bd      	mov	sp, r7
 8008434:	bdb0      	pop	{r4, r5, r7, pc}
 8008436:	bf00      	nop
 8008438:	0800d534 	.word	0x0800d534
 800843c:	00f42400 	.word	0x00f42400

08008440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00a      	beq.n	800846a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00a      	beq.n	80084ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b2:	f003 0308 	and.w	r3, r3, #8
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d4:	f003 0310 	and.w	r3, r3, #16
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00a      	beq.n	80084f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00a      	beq.n	8008514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	430a      	orrs	r2, r1
 8008512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01a      	beq.n	8008556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800853e:	d10a      	bne.n	8008556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	605a      	str	r2, [r3, #4]
  }
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af02      	add	r7, sp, #8
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008594:	f7fa fada 	bl	8002b4c <HAL_GetTick>
 8008598:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0308 	and.w	r3, r3, #8
 80085a4:	2b08      	cmp	r3, #8
 80085a6:	d10e      	bne.n	80085c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f82f 	bl	800861a <UART_WaitOnFlagUntilTimeout>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e025      	b.n	8008612 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	d10e      	bne.n	80085f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f819 	bl	800861a <UART_WaitOnFlagUntilTimeout>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e00f      	b.n	8008612 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2220      	movs	r2, #32
 80085f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	603b      	str	r3, [r7, #0]
 8008626:	4613      	mov	r3, r2
 8008628:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800862a:	e062      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008632:	d05e      	beq.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008634:	f7fa fa8a 	bl	8002b4c <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	429a      	cmp	r2, r3
 8008642:	d302      	bcc.n	800864a <UART_WaitOnFlagUntilTimeout+0x30>
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d11d      	bne.n	8008686 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008658:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0201 	bic.w	r2, r2, #1
 8008668:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2220      	movs	r2, #32
 800866e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2220      	movs	r2, #32
 8008676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e045      	b.n	8008712 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b00      	cmp	r3, #0
 8008692:	d02e      	beq.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800869e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086a2:	d126      	bne.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80086bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 0201 	bic.w	r2, r2, #1
 80086cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2220      	movs	r2, #32
 80086d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2220      	movs	r2, #32
 80086da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e00f      	b.n	8008712 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	69da      	ldr	r2, [r3, #28]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	4013      	ands	r3, r2
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	429a      	cmp	r2, r3
 8008700:	bf0c      	ite	eq
 8008702:	2301      	moveq	r3, #1
 8008704:	2300      	movne	r3, #0
 8008706:	b2db      	uxtb	r3, r3
 8008708:	461a      	mov	r2, r3
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	429a      	cmp	r2, r3
 800870e:	d08d      	beq.n	800862c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	88fa      	ldrh	r2, [r7, #6]
 8008734:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	88fa      	ldrh	r2, [r7, #6]
 800873c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800874e:	d10e      	bne.n	800876e <UART_Start_Receive_IT+0x52>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d105      	bne.n	8008764 <UART_Start_Receive_IT+0x48>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800875e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008762:	e02d      	b.n	80087c0 <UART_Start_Receive_IT+0xa4>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	22ff      	movs	r2, #255	; 0xff
 8008768:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800876c:	e028      	b.n	80087c0 <UART_Start_Receive_IT+0xa4>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10d      	bne.n	8008792 <UART_Start_Receive_IT+0x76>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d104      	bne.n	8008788 <UART_Start_Receive_IT+0x6c>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	22ff      	movs	r2, #255	; 0xff
 8008782:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008786:	e01b      	b.n	80087c0 <UART_Start_Receive_IT+0xa4>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	227f      	movs	r2, #127	; 0x7f
 800878c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008790:	e016      	b.n	80087c0 <UART_Start_Receive_IT+0xa4>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800879a:	d10d      	bne.n	80087b8 <UART_Start_Receive_IT+0x9c>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d104      	bne.n	80087ae <UART_Start_Receive_IT+0x92>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	227f      	movs	r2, #127	; 0x7f
 80087a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087ac:	e008      	b.n	80087c0 <UART_Start_Receive_IT+0xa4>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	223f      	movs	r2, #63	; 0x3f
 80087b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087b6:	e003      	b.n	80087c0 <UART_Start_Receive_IT+0xa4>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2222      	movs	r2, #34	; 0x22
 80087cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0201 	orr.w	r2, r2, #1
 80087de:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087e8:	d12a      	bne.n	8008840 <UART_Start_Receive_IT+0x124>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80087f0:	88fa      	ldrh	r2, [r7, #6]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d324      	bcc.n	8008840 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087fe:	d107      	bne.n	8008810 <UART_Start_Receive_IT+0xf4>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d103      	bne.n	8008810 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4a1f      	ldr	r2, [pc, #124]	; (8008888 <UART_Start_Receive_IT+0x16c>)
 800880c:	671a      	str	r2, [r3, #112]	; 0x70
 800880e:	e002      	b.n	8008816 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	4a1e      	ldr	r2, [pc, #120]	; (800888c <UART_Start_Receive_IT+0x170>)
 8008814:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800882c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800883c:	609a      	str	r2, [r3, #8]
 800883e:	e01b      	b.n	8008878 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008848:	d107      	bne.n	800885a <UART_Start_Receive_IT+0x13e>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d103      	bne.n	800885a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	4a0e      	ldr	r2, [pc, #56]	; (8008890 <UART_Start_Receive_IT+0x174>)
 8008856:	671a      	str	r2, [r3, #112]	; 0x70
 8008858:	e002      	b.n	8008860 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4a0d      	ldr	r2, [pc, #52]	; (8008894 <UART_Start_Receive_IT+0x178>)
 800885e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008876:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	08008e3d 	.word	0x08008e3d
 800888c:	08008c39 	.word	0x08008c39
 8008890:	08008b61 	.word	0x08008b61
 8008894:	08008a89 	.word	0x08008a89

08008898 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80088ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689a      	ldr	r2, [r3, #8]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80088be:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80088ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6812      	ldr	r2, [r2, #0]
 80088f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088fa:	f023 0301 	bic.w	r3, r3, #1
 80088fe:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008904:	2b01      	cmp	r3, #1
 8008906:	d107      	bne.n	8008918 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0210 	bic.w	r2, r2, #16
 8008916:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008944:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0320 	and.w	r3, r3, #32
 8008950:	2b00      	cmp	r3, #0
 8008952:	d114      	bne.n	800897e <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689a      	ldr	r2, [r3, #8]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800896a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800897a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800897c:	e002      	b.n	8008984 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f7f9 f8f0 	bl	8001b64 <HAL_UART_TxCpltCallback>
}
 8008984:	bf00      	nop
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008998:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f7f9 f8f8 	bl	8001b90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089a0:	bf00      	nop
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d0:	2b80      	cmp	r3, #128	; 0x80
 80089d2:	d109      	bne.n	80089e8 <UART_DMAError+0x40>
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	2b21      	cmp	r3, #33	; 0x21
 80089d8:	d106      	bne.n	80089e8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80089e2:	6978      	ldr	r0, [r7, #20]
 80089e4:	f7ff ff58 	bl	8008898 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f2:	2b40      	cmp	r3, #64	; 0x40
 80089f4:	d109      	bne.n	8008a0a <UART_DMAError+0x62>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2b22      	cmp	r3, #34	; 0x22
 80089fa:	d106      	bne.n	8008a0a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008a04:	6978      	ldr	r0, [r7, #20]
 8008a06:	f7ff ff65 	bl	80088d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a10:	f043 0210 	orr.w	r2, r3, #16
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a1a:	6978      	ldr	r0, [r7, #20]
 8008a1c:	f7ff fa2c 	bl	8007e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a20:	bf00      	nop
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f7ff fa16 	bl	8007e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a4c:	bf00      	nop
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a6a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7f9 f872 	bl	8001b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a96:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a9e:	2b22      	cmp	r3, #34	; 0x22
 8008aa0:	d152      	bne.n	8008b48 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008aaa:	89bb      	ldrh	r3, [r7, #12]
 8008aac:	b2d9      	uxtb	r1, r3
 8008aae:	89fb      	ldrh	r3, [r7, #14]
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab6:	400a      	ands	r2, r1
 8008ab8:	b2d2      	uxtb	r2, r2
 8008aba:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d139      	bne.n	8008b58 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008af2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689a      	ldr	r2, [r3, #8]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f022 0201 	bic.w	r2, r2, #1
 8008b02:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d10f      	bne.n	8008b3a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0210 	bic.w	r2, r2, #16
 8008b28:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff f9aa 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
 8008b38:	e002      	b.n	8008b40 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7f9 f83e 	bl	8001bbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b46:	e007      	b.n	8008b58 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699a      	ldr	r2, [r3, #24]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f042 0208 	orr.w	r2, r2, #8
 8008b56:	619a      	str	r2, [r3, #24]
}
 8008b58:	bf00      	nop
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b6e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b76:	2b22      	cmp	r3, #34	; 0x22
 8008b78:	d152      	bne.n	8008c20 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b86:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b88:	89ba      	ldrh	r2, [r7, #12]
 8008b8a:	89fb      	ldrh	r3, [r7, #14]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b98:	1c9a      	adds	r2, r3, #2
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d139      	bne.n	8008c30 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bca:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689a      	ldr	r2, [r3, #8]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f022 0201 	bic.w	r2, r2, #1
 8008bda:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d10f      	bne.n	8008c12 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0210 	bic.w	r2, r2, #16
 8008c00:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff f93e 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
 8008c10:	e002      	b.n	8008c18 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7f8 ffd2 	bl	8001bbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c1e:	e007      	b.n	8008c30 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	699a      	ldr	r2, [r3, #24]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f042 0208 	orr.w	r2, r2, #8
 8008c2e:	619a      	str	r2, [r3, #24]
}
 8008c30:	bf00      	nop
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c46:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c66:	2b22      	cmp	r3, #34	; 0x22
 8008c68:	f040 80da 	bne.w	8008e20 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c72:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c74:	e0aa      	b.n	8008dcc <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c7e:	89bb      	ldrh	r3, [r7, #12]
 8008c80:	b2d9      	uxtb	r1, r3
 8008c82:	8b7b      	ldrh	r3, [r7, #26]
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c8a:	400a      	ands	r2, r1
 8008c8c:	b2d2      	uxtb	r2, r2
 8008c8e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c94:	1c5a      	adds	r2, r3, #1
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d04d      	beq.n	8008d5a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d010      	beq.n	8008cea <UART_RxISR_8BIT_FIFOEN+0xb2>
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00b      	beq.n	8008cea <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ce0:	f043 0201 	orr.w	r2, r3, #1
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d010      	beq.n	8008d16 <UART_RxISR_8BIT_FIFOEN+0xde>
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00b      	beq.n	8008d16 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2202      	movs	r2, #2
 8008d04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d0c:	f043 0204 	orr.w	r2, r3, #4
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d010      	beq.n	8008d42 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00b      	beq.n	8008d42 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2204      	movs	r2, #4
 8008d30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d38:	f043 0202 	orr.w	r2, r3, #2
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d006      	beq.n	8008d5a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7ff f893 	bl	8007e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d132      	bne.n	8008dcc <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d74:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	6812      	ldr	r2, [r2, #0]
 8008d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d84:	f023 0301 	bic.w	r3, r3, #1
 8008d88:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d10f      	bne.n	8008dc0 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0210 	bic.w	r2, r2, #16
 8008dae:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7ff f867 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
 8008dbe:	e002      	b.n	8008dc6 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7f8 fefb 	bl	8001bbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dcc:	89fb      	ldrh	r3, [r7, #14]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d005      	beq.n	8008dde <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	f003 0320 	and.w	r3, r3, #32
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f47f af4c 	bne.w	8008c76 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008de4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008de6:	897b      	ldrh	r3, [r7, #10]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d021      	beq.n	8008e30 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008df2:	897a      	ldrh	r2, [r7, #10]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d21b      	bcs.n	8008e30 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008e06:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a0b      	ldr	r2, [pc, #44]	; (8008e38 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8008e0c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f042 0220 	orr.w	r2, r2, #32
 8008e1c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e1e:	e007      	b.n	8008e30 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	699a      	ldr	r2, [r3, #24]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0208 	orr.w	r2, r2, #8
 8008e2e:	619a      	str	r2, [r3, #24]
}
 8008e30:	bf00      	nop
 8008e32:	3720      	adds	r7, #32
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	08008a89 	.word	0x08008a89

08008e3c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08a      	sub	sp, #40	; 0x28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e4a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e6a:	2b22      	cmp	r3, #34	; 0x22
 8008e6c:	f040 80da 	bne.w	8009024 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e76:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e78:	e0aa      	b.n	8008fd0 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e86:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8008e88:	8aba      	ldrh	r2, [r7, #20]
 8008e8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e98:	1c9a      	adds	r2, r3, #2
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d04d      	beq.n	8008f5e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d010      	beq.n	8008eee <UART_RxISR_16BIT_FIFOEN+0xb2>
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00b      	beq.n	8008eee <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2201      	movs	r2, #1
 8008edc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ee4:	f043 0201 	orr.w	r2, r3, #1
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d010      	beq.n	8008f1a <UART_RxISR_16BIT_FIFOEN+0xde>
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00b      	beq.n	8008f1a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2202      	movs	r2, #2
 8008f08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f10:	f043 0204 	orr.w	r2, r3, #4
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d010      	beq.n	8008f46 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00b      	beq.n	8008f46 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2204      	movs	r2, #4
 8008f34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f3c:	f043 0202 	orr.w	r2, r3, #2
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d006      	beq.n	8008f5e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7fe ff91 	bl	8007e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d132      	bne.n	8008fd0 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f78:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	6812      	ldr	r2, [r2, #0]
 8008f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f88:	f023 0301 	bic.w	r3, r3, #1
 8008f8c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d10f      	bne.n	8008fc4 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0210 	bic.w	r2, r2, #16
 8008fb2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7fe ff65 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
 8008fc2:	e002      	b.n	8008fca <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7f8 fdf9 	bl	8001bbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fd0:	8afb      	ldrh	r3, [r7, #22]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f47f af4c 	bne.w	8008e7a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fe8:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008fea:	89fb      	ldrh	r3, [r7, #14]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d021      	beq.n	8009034 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ff6:	89fa      	ldrh	r2, [r7, #14]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d21b      	bcs.n	8009034 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	689a      	ldr	r2, [r3, #8]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800900a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a0b      	ldr	r2, [pc, #44]	; (800903c <UART_RxISR_16BIT_FIFOEN+0x200>)
 8009010:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f042 0220 	orr.w	r2, r2, #32
 8009020:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009022:	e007      	b.n	8009034 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	699a      	ldr	r2, [r3, #24]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f042 0208 	orr.w	r2, r2, #8
 8009032:	619a      	str	r2, [r3, #24]
}
 8009034:	bf00      	nop
 8009036:	3728      	adds	r7, #40	; 0x28
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	08008b61 	.word	0x08008b61

08009040 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800908a:	2b01      	cmp	r3, #1
 800908c:	d101      	bne.n	8009092 <HAL_UARTEx_DisableFifoMode+0x16>
 800908e:	2302      	movs	r3, #2
 8009090:	e027      	b.n	80090e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2224      	movs	r2, #36	; 0x24
 800909e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0201 	bic.w	r2, r2, #1
 80090b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d101      	bne.n	8009106 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009102:	2302      	movs	r3, #2
 8009104:	e02d      	b.n	8009162 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2224      	movs	r2, #36	; 0x24
 8009112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 0201 	bic.w	r2, r2, #1
 800912c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	683a      	ldr	r2, [r7, #0]
 800913e:	430a      	orrs	r2, r1
 8009140:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f850 	bl	80091e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2220      	movs	r2, #32
 8009154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800917a:	2b01      	cmp	r3, #1
 800917c:	d101      	bne.n	8009182 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800917e:	2302      	movs	r3, #2
 8009180:	e02d      	b.n	80091de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2224      	movs	r2, #36	; 0x24
 800918e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0201 	bic.w	r2, r2, #1
 80091a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	430a      	orrs	r2, r1
 80091bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f812 	bl	80091e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2220      	movs	r2, #32
 80091d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d108      	bne.n	800920a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009208:	e031      	b.n	800926e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800920a:	2308      	movs	r3, #8
 800920c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800920e:	2308      	movs	r3, #8
 8009210:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	0e5b      	lsrs	r3, r3, #25
 800921a:	b2db      	uxtb	r3, r3
 800921c:	f003 0307 	and.w	r3, r3, #7
 8009220:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	0f5b      	lsrs	r3, r3, #29
 800922a:	b2db      	uxtb	r3, r3
 800922c:	f003 0307 	and.w	r3, r3, #7
 8009230:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009232:	7bbb      	ldrb	r3, [r7, #14]
 8009234:	7b3a      	ldrb	r2, [r7, #12]
 8009236:	4911      	ldr	r1, [pc, #68]	; (800927c <UARTEx_SetNbDataToProcess+0x94>)
 8009238:	5c8a      	ldrb	r2, [r1, r2]
 800923a:	fb02 f303 	mul.w	r3, r2, r3
 800923e:	7b3a      	ldrb	r2, [r7, #12]
 8009240:	490f      	ldr	r1, [pc, #60]	; (8009280 <UARTEx_SetNbDataToProcess+0x98>)
 8009242:	5c8a      	ldrb	r2, [r1, r2]
 8009244:	fb93 f3f2 	sdiv	r3, r3, r2
 8009248:	b29a      	uxth	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	7b7a      	ldrb	r2, [r7, #13]
 8009254:	4909      	ldr	r1, [pc, #36]	; (800927c <UARTEx_SetNbDataToProcess+0x94>)
 8009256:	5c8a      	ldrb	r2, [r1, r2]
 8009258:	fb02 f303 	mul.w	r3, r2, r3
 800925c:	7b7a      	ldrb	r2, [r7, #13]
 800925e:	4908      	ldr	r1, [pc, #32]	; (8009280 <UARTEx_SetNbDataToProcess+0x98>)
 8009260:	5c8a      	ldrb	r2, [r1, r2]
 8009262:	fb93 f3f2 	sdiv	r3, r3, r2
 8009266:	b29a      	uxth	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800926e:	bf00      	nop
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	0800d54c 	.word	0x0800d54c
 8009280:	0800d554 	.word	0x0800d554

08009284 <arm_rfft_32_fast_init_f32>:
 8009284:	b180      	cbz	r0, 80092a8 <arm_rfft_32_fast_init_f32+0x24>
 8009286:	4603      	mov	r3, r0
 8009288:	2220      	movs	r2, #32
 800928a:	2010      	movs	r0, #16
 800928c:	4908      	ldr	r1, [pc, #32]	; (80092b0 <arm_rfft_32_fast_init_f32+0x2c>)
 800928e:	b430      	push	{r4, r5}
 8009290:	2514      	movs	r5, #20
 8009292:	4c08      	ldr	r4, [pc, #32]	; (80092b4 <arm_rfft_32_fast_init_f32+0x30>)
 8009294:	821a      	strh	r2, [r3, #16]
 8009296:	4a08      	ldr	r2, [pc, #32]	; (80092b8 <arm_rfft_32_fast_init_f32+0x34>)
 8009298:	8018      	strh	r0, [r3, #0]
 800929a:	2000      	movs	r0, #0
 800929c:	819d      	strh	r5, [r3, #12]
 800929e:	615a      	str	r2, [r3, #20]
 80092a0:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80092a4:	bc30      	pop	{r4, r5}
 80092a6:	4770      	bx	lr
 80092a8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	08012e44 	.word	0x08012e44
 80092b4:	0800e50c 	.word	0x0800e50c
 80092b8:	0801bbc4 	.word	0x0801bbc4

080092bc <arm_rfft_64_fast_init_f32>:
 80092bc:	b180      	cbz	r0, 80092e0 <arm_rfft_64_fast_init_f32+0x24>
 80092be:	4603      	mov	r3, r0
 80092c0:	2240      	movs	r2, #64	; 0x40
 80092c2:	2020      	movs	r0, #32
 80092c4:	4908      	ldr	r1, [pc, #32]	; (80092e8 <arm_rfft_64_fast_init_f32+0x2c>)
 80092c6:	b430      	push	{r4, r5}
 80092c8:	2530      	movs	r5, #48	; 0x30
 80092ca:	4c08      	ldr	r4, [pc, #32]	; (80092ec <arm_rfft_64_fast_init_f32+0x30>)
 80092cc:	821a      	strh	r2, [r3, #16]
 80092ce:	4a08      	ldr	r2, [pc, #32]	; (80092f0 <arm_rfft_64_fast_init_f32+0x34>)
 80092d0:	8018      	strh	r0, [r3, #0]
 80092d2:	2000      	movs	r0, #0
 80092d4:	819d      	strh	r5, [r3, #12]
 80092d6:	615a      	str	r2, [r3, #20]
 80092d8:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80092dc:	bc30      	pop	{r4, r5}
 80092de:	4770      	bx	lr
 80092e0:	f04f 30ff 	mov.w	r0, #4294967295
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	080176c4 	.word	0x080176c4
 80092ec:	08010664 	.word	0x08010664
 80092f0:	08020444 	.word	0x08020444

080092f4 <arm_rfft_256_fast_init_f32>:
 80092f4:	b188      	cbz	r0, 800931a <arm_rfft_256_fast_init_f32+0x26>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092fc:	2080      	movs	r0, #128	; 0x80
 80092fe:	4908      	ldr	r1, [pc, #32]	; (8009320 <arm_rfft_256_fast_init_f32+0x2c>)
 8009300:	b430      	push	{r4, r5}
 8009302:	25d0      	movs	r5, #208	; 0xd0
 8009304:	4c07      	ldr	r4, [pc, #28]	; (8009324 <arm_rfft_256_fast_init_f32+0x30>)
 8009306:	821a      	strh	r2, [r3, #16]
 8009308:	4a07      	ldr	r2, [pc, #28]	; (8009328 <arm_rfft_256_fast_init_f32+0x34>)
 800930a:	8018      	strh	r0, [r3, #0]
 800930c:	2000      	movs	r0, #0
 800930e:	819d      	strh	r5, [r3, #12]
 8009310:	615a      	str	r2, [r3, #20]
 8009312:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009316:	bc30      	pop	{r4, r5}
 8009318:	4770      	bx	lr
 800931a:	f04f 30ff 	mov.w	r0, #4294967295
 800931e:	4770      	bx	lr
 8009320:	08012a44 	.word	0x08012a44
 8009324:	0800e36c 	.word	0x0800e36c
 8009328:	0801b7c4 	.word	0x0801b7c4

0800932c <arm_rfft_512_fast_init_f32>:
 800932c:	b198      	cbz	r0, 8009356 <arm_rfft_512_fast_init_f32+0x2a>
 800932e:	4603      	mov	r3, r0
 8009330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009334:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009338:	4908      	ldr	r1, [pc, #32]	; (800935c <arm_rfft_512_fast_init_f32+0x30>)
 800933a:	b430      	push	{r4, r5}
 800933c:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8009340:	4c07      	ldr	r4, [pc, #28]	; (8009360 <arm_rfft_512_fast_init_f32+0x34>)
 8009342:	821a      	strh	r2, [r3, #16]
 8009344:	4a07      	ldr	r2, [pc, #28]	; (8009364 <arm_rfft_512_fast_init_f32+0x38>)
 8009346:	8018      	strh	r0, [r3, #0]
 8009348:	2000      	movs	r0, #0
 800934a:	819d      	strh	r5, [r3, #12]
 800934c:	615a      	str	r2, [r3, #20]
 800934e:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009352:	bc30      	pop	{r4, r5}
 8009354:	4770      	bx	lr
 8009356:	f04f 30ff 	mov.w	r0, #4294967295
 800935a:	4770      	bx	lr
 800935c:	08016ec4 	.word	0x08016ec4
 8009360:	080102f4 	.word	0x080102f4
 8009364:	0801fc44 	.word	0x0801fc44

08009368 <arm_rfft_1024_fast_init_f32>:
 8009368:	b198      	cbz	r0, 8009392 <arm_rfft_1024_fast_init_f32+0x2a>
 800936a:	4603      	mov	r3, r0
 800936c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009370:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009374:	4908      	ldr	r1, [pc, #32]	; (8009398 <arm_rfft_1024_fast_init_f32+0x30>)
 8009376:	b430      	push	{r4, r5}
 8009378:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800937c:	4c07      	ldr	r4, [pc, #28]	; (800939c <arm_rfft_1024_fast_init_f32+0x34>)
 800937e:	821a      	strh	r2, [r3, #16]
 8009380:	4a07      	ldr	r2, [pc, #28]	; (80093a0 <arm_rfft_1024_fast_init_f32+0x38>)
 8009382:	8018      	strh	r0, [r3, #0]
 8009384:	2000      	movs	r0, #0
 8009386:	819d      	strh	r5, [r3, #12]
 8009388:	615a      	str	r2, [r3, #20]
 800938a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800938e:	bc30      	pop	{r4, r5}
 8009390:	4770      	bx	lr
 8009392:	f04f 30ff 	mov.w	r0, #4294967295
 8009396:	4770      	bx	lr
 8009398:	080177c4 	.word	0x080177c4
 800939c:	080106c4 	.word	0x080106c4
 80093a0:	080187c4 	.word	0x080187c4

080093a4 <arm_rfft_2048_fast_init_f32>:
 80093a4:	b198      	cbz	r0, 80093ce <arm_rfft_2048_fast_init_f32+0x2a>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80093b0:	4908      	ldr	r1, [pc, #32]	; (80093d4 <arm_rfft_2048_fast_init_f32+0x30>)
 80093b2:	b430      	push	{r4, r5}
 80093b4:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 80093b8:	4c07      	ldr	r4, [pc, #28]	; (80093d8 <arm_rfft_2048_fast_init_f32+0x34>)
 80093ba:	821a      	strh	r2, [r3, #16]
 80093bc:	4a07      	ldr	r2, [pc, #28]	; (80093dc <arm_rfft_2048_fast_init_f32+0x38>)
 80093be:	8018      	strh	r0, [r3, #0]
 80093c0:	2000      	movs	r0, #0
 80093c2:	819d      	strh	r5, [r3, #12]
 80093c4:	615a      	str	r2, [r3, #20]
 80093c6:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80093ca:	bc30      	pop	{r4, r5}
 80093cc:	4770      	bx	lr
 80093ce:	f04f 30ff 	mov.w	r0, #4294967295
 80093d2:	4770      	bx	lr
 80093d4:	08010a44 	.word	0x08010a44
 80093d8:	0800d55c 	.word	0x0800d55c
 80093dc:	080197c4 	.word	0x080197c4

080093e0 <arm_rfft_4096_fast_init_f32>:
 80093e0:	b198      	cbz	r0, 800940a <arm_rfft_4096_fast_init_f32+0x2a>
 80093e2:	4603      	mov	r3, r0
 80093e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80093e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80093ec:	4908      	ldr	r1, [pc, #32]	; (8009410 <arm_rfft_4096_fast_init_f32+0x30>)
 80093ee:	b430      	push	{r4, r5}
 80093f0:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 80093f4:	4c07      	ldr	r4, [pc, #28]	; (8009414 <arm_rfft_4096_fast_init_f32+0x34>)
 80093f6:	821a      	strh	r2, [r3, #16]
 80093f8:	4a07      	ldr	r2, [pc, #28]	; (8009418 <arm_rfft_4096_fast_init_f32+0x38>)
 80093fa:	8018      	strh	r0, [r3, #0]
 80093fc:	2000      	movs	r0, #0
 80093fe:	819d      	strh	r5, [r3, #12]
 8009400:	615a      	str	r2, [r3, #20]
 8009402:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009406:	bc30      	pop	{r4, r5}
 8009408:	4770      	bx	lr
 800940a:	f04f 30ff 	mov.w	r0, #4294967295
 800940e:	4770      	bx	lr
 8009410:	08012ec4 	.word	0x08012ec4
 8009414:	0800e534 	.word	0x0800e534
 8009418:	0801bc44 	.word	0x0801bc44

0800941c <arm_rfft_fast_init_f32>:
 800941c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009420:	d01f      	beq.n	8009462 <arm_rfft_fast_init_f32+0x46>
 8009422:	d90b      	bls.n	800943c <arm_rfft_fast_init_f32+0x20>
 8009424:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009428:	d019      	beq.n	800945e <arm_rfft_fast_init_f32+0x42>
 800942a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800942e:	d012      	beq.n	8009456 <arm_rfft_fast_init_f32+0x3a>
 8009430:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009434:	d00d      	beq.n	8009452 <arm_rfft_fast_init_f32+0x36>
 8009436:	f04f 30ff 	mov.w	r0, #4294967295
 800943a:	4770      	bx	lr
 800943c:	2940      	cmp	r1, #64	; 0x40
 800943e:	d00c      	beq.n	800945a <arm_rfft_fast_init_f32+0x3e>
 8009440:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009444:	d003      	beq.n	800944e <arm_rfft_fast_init_f32+0x32>
 8009446:	2920      	cmp	r1, #32
 8009448:	d1f5      	bne.n	8009436 <arm_rfft_fast_init_f32+0x1a>
 800944a:	4b07      	ldr	r3, [pc, #28]	; (8009468 <arm_rfft_fast_init_f32+0x4c>)
 800944c:	4718      	bx	r3
 800944e:	4b07      	ldr	r3, [pc, #28]	; (800946c <arm_rfft_fast_init_f32+0x50>)
 8009450:	4718      	bx	r3
 8009452:	4b07      	ldr	r3, [pc, #28]	; (8009470 <arm_rfft_fast_init_f32+0x54>)
 8009454:	4718      	bx	r3
 8009456:	4b07      	ldr	r3, [pc, #28]	; (8009474 <arm_rfft_fast_init_f32+0x58>)
 8009458:	4718      	bx	r3
 800945a:	4b07      	ldr	r3, [pc, #28]	; (8009478 <arm_rfft_fast_init_f32+0x5c>)
 800945c:	e7f6      	b.n	800944c <arm_rfft_fast_init_f32+0x30>
 800945e:	4b07      	ldr	r3, [pc, #28]	; (800947c <arm_rfft_fast_init_f32+0x60>)
 8009460:	e7f4      	b.n	800944c <arm_rfft_fast_init_f32+0x30>
 8009462:	4b07      	ldr	r3, [pc, #28]	; (8009480 <arm_rfft_fast_init_f32+0x64>)
 8009464:	e7f2      	b.n	800944c <arm_rfft_fast_init_f32+0x30>
 8009466:	bf00      	nop
 8009468:	08009285 	.word	0x08009285
 800946c:	080092f5 	.word	0x080092f5
 8009470:	08009369 	.word	0x08009369
 8009474:	080093e1 	.word	0x080093e1
 8009478:	080092bd 	.word	0x080092bd
 800947c:	080093a5 	.word	0x080093a5
 8009480:	0800932d 	.word	0x0800932d

08009484 <stage_rfft_f32>:
 8009484:	b470      	push	{r4, r5, r6}
 8009486:	edd1 7a00 	vldr	s15, [r1]
 800948a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800948e:	ed91 7a01 	vldr	s14, [r1, #4]
 8009492:	f101 0510 	add.w	r5, r1, #16
 8009496:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800949a:	8806      	ldrh	r6, [r0, #0]
 800949c:	ee37 7a07 	vadd.f32	s14, s14, s14
 80094a0:	6943      	ldr	r3, [r0, #20]
 80094a2:	1e70      	subs	r0, r6, #1
 80094a4:	eeb0 4a46 	vmov.f32	s8, s12
 80094a8:	f102 0410 	add.w	r4, r2, #16
 80094ac:	3310      	adds	r3, #16
 80094ae:	ee77 6a87 	vadd.f32	s13, s15, s14
 80094b2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80094b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094ba:	3908      	subs	r1, #8
 80094bc:	ee26 7a86 	vmul.f32	s14, s13, s12
 80094c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80094c4:	ed82 7a00 	vstr	s14, [r2]
 80094c8:	edc2 7a01 	vstr	s15, [r2, #4]
 80094cc:	ed15 6a02 	vldr	s12, [r5, #-8]
 80094d0:	3801      	subs	r0, #1
 80094d2:	ed91 7a02 	vldr	s14, [r1, #8]
 80094d6:	f105 0508 	add.w	r5, r5, #8
 80094da:	ed53 6a02 	vldr	s13, [r3, #-8]
 80094de:	f1a1 0108 	sub.w	r1, r1, #8
 80094e2:	ee77 5a46 	vsub.f32	s11, s14, s12
 80094e6:	edd1 4a05 	vldr	s9, [r1, #20]
 80094ea:	ed55 7a03 	vldr	s15, [r5, #-12]
 80094ee:	ee37 7a06 	vadd.f32	s14, s14, s12
 80094f2:	ed13 6a01 	vldr	s12, [r3, #-4]
 80094f6:	f104 0408 	add.w	r4, r4, #8
 80094fa:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80094fe:	f103 0308 	add.w	r3, r3, #8
 8009502:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009506:	ee66 5a25 	vmul.f32	s11, s12, s11
 800950a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800950e:	ee37 7a23 	vadd.f32	s14, s14, s7
 8009512:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009516:	ee26 6a05 	vmul.f32	s12, s12, s10
 800951a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800951e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009522:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009526:	ee27 7a04 	vmul.f32	s14, s14, s8
 800952a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800952e:	ed04 7a04 	vstr	s14, [r4, #-16]
 8009532:	ed44 7a03 	vstr	s15, [r4, #-12]
 8009536:	d1c9      	bne.n	80094cc <stage_rfft_f32+0x48>
 8009538:	bc70      	pop	{r4, r5, r6}
 800953a:	4770      	bx	lr

0800953c <merge_rfft_f32>:
 800953c:	b410      	push	{r4}
 800953e:	edd1 7a00 	vldr	s15, [r1]
 8009542:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8009546:	edd1 6a01 	vldr	s13, [r1, #4]
 800954a:	8804      	ldrh	r4, [r0, #0]
 800954c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009550:	6940      	ldr	r0, [r0, #20]
 8009552:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009556:	3c01      	subs	r4, #1
 8009558:	ee27 7a04 	vmul.f32	s14, s14, s8
 800955c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009560:	ed82 7a00 	vstr	s14, [r2]
 8009564:	edc2 7a01 	vstr	s15, [r2, #4]
 8009568:	b3dc      	cbz	r4, 80095e2 <merge_rfft_f32+0xa6>
 800956a:	00e3      	lsls	r3, r4, #3
 800956c:	3010      	adds	r0, #16
 800956e:	3210      	adds	r2, #16
 8009570:	3b08      	subs	r3, #8
 8009572:	440b      	add	r3, r1
 8009574:	3110      	adds	r1, #16
 8009576:	ed11 6a02 	vldr	s12, [r1, #-8]
 800957a:	3c01      	subs	r4, #1
 800957c:	ed93 7a02 	vldr	s14, [r3, #8]
 8009580:	f101 0108 	add.w	r1, r1, #8
 8009584:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009588:	f1a3 0308 	sub.w	r3, r3, #8
 800958c:	ee76 5a47 	vsub.f32	s11, s12, s14
 8009590:	edd3 4a05 	vldr	s9, [r3, #20]
 8009594:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009598:	ee37 7a06 	vadd.f32	s14, s14, s12
 800959c:	ed10 6a01 	vldr	s12, [r0, #-4]
 80095a0:	f102 0208 	add.w	r2, r2, #8
 80095a4:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80095a8:	f100 0008 	add.w	r0, r0, #8
 80095ac:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80095b0:	ee66 5a25 	vmul.f32	s11, s12, s11
 80095b4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80095b8:	ee37 7a63 	vsub.f32	s14, s14, s7
 80095bc:	ee66 6a85 	vmul.f32	s13, s13, s10
 80095c0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80095c4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80095c8:	ee37 7a46 	vsub.f32	s14, s14, s12
 80095cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80095d0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80095d4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80095d8:	ed02 7a04 	vstr	s14, [r2, #-16]
 80095dc:	ed42 7a03 	vstr	s15, [r2, #-12]
 80095e0:	d1c9      	bne.n	8009576 <merge_rfft_f32+0x3a>
 80095e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <arm_rfft_fast_f32>:
 80095e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ec:	8a05      	ldrh	r5, [r0, #16]
 80095ee:	4604      	mov	r4, r0
 80095f0:	4617      	mov	r7, r2
 80095f2:	461e      	mov	r6, r3
 80095f4:	086d      	lsrs	r5, r5, #1
 80095f6:	8005      	strh	r5, [r0, #0]
 80095f8:	b14b      	cbz	r3, 800960e <arm_rfft_fast_f32+0x26>
 80095fa:	f7ff ff9f 	bl	800953c <merge_rfft_f32>
 80095fe:	4632      	mov	r2, r6
 8009600:	4639      	mov	r1, r7
 8009602:	4620      	mov	r0, r4
 8009604:	2301      	movs	r3, #1
 8009606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800960a:	f000 bb35 	b.w	8009c78 <arm_cfft_f32>
 800960e:	4688      	mov	r8, r1
 8009610:	461a      	mov	r2, r3
 8009612:	2301      	movs	r3, #1
 8009614:	f000 fb30 	bl	8009c78 <arm_cfft_f32>
 8009618:	463a      	mov	r2, r7
 800961a:	4641      	mov	r1, r8
 800961c:	4620      	mov	r0, r4
 800961e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009622:	f7ff bf2f 	b.w	8009484 <stage_rfft_f32>
 8009626:	bf00      	nop

08009628 <arm_cfft_radix8by2_f32>:
 8009628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800962c:	4607      	mov	r7, r0
 800962e:	4608      	mov	r0, r1
 8009630:	ed2d 8b06 	vpush	{d8-d10}
 8009634:	f8b7 c000 	ldrh.w	ip, [r7]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800963e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8009642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009646:	f000 80ac 	beq.w	80097a2 <arm_cfft_radix8by2_f32+0x17a>
 800964a:	008c      	lsls	r4, r1, #2
 800964c:	f100 0310 	add.w	r3, r0, #16
 8009650:	3210      	adds	r2, #16
 8009652:	f108 0610 	add.w	r6, r8, #16
 8009656:	3410      	adds	r4, #16
 8009658:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800965c:	1905      	adds	r5, r0, r4
 800965e:	4444      	add	r4, r8
 8009660:	ed16 7a04 	vldr	s14, [r6, #-16]
 8009664:	3310      	adds	r3, #16
 8009666:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800966a:	3510      	adds	r5, #16
 800966c:	ed56 0a03 	vldr	s1, [r6, #-12]
 8009670:	3210      	adds	r2, #16
 8009672:	ee74 9a87 	vadd.f32	s19, s9, s14
 8009676:	ed56 7a02 	vldr	s15, [r6, #-8]
 800967a:	ed56 2a01 	vldr	s5, [r6, #-4]
 800967e:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8009682:	ed54 5a04 	vldr	s11, [r4, #-16]
 8009686:	3610      	adds	r6, #16
 8009688:	ed14 5a03 	vldr	s10, [r4, #-12]
 800968c:	3410      	adds	r4, #16
 800968e:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 8009692:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8009696:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800969a:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800969e:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 80096a2:	ee36 9aa5 	vadd.f32	s18, s13, s11
 80096a6:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 80096aa:	ee33 8a83 	vadd.f32	s16, s7, s6
 80096ae:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 80096b2:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80096b6:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 80096ba:	ee34 0a06 	vadd.f32	s0, s8, s12
 80096be:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 80096c2:	ee77 aa20 	vadd.f32	s21, s14, s1
 80096c6:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 80096ca:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80096ce:	ee72 9a22 	vadd.f32	s19, s4, s5
 80096d2:	ee71 8a05 	vadd.f32	s17, s2, s10
 80096d6:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 80096da:	ee37 7a60 	vsub.f32	s14, s14, s1
 80096de:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 80096e2:	ee35 5a41 	vsub.f32	s10, s10, s2
 80096e6:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 80096ea:	ee36 6a44 	vsub.f32	s12, s12, s8
 80096ee:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 80096f2:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 80096f6:	ee71 1ae7 	vsub.f32	s3, s3, s15
 80096fa:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 80096fe:	ee72 7a62 	vsub.f32	s15, s4, s5
 8009702:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 8009706:	ee73 2a63 	vsub.f32	s5, s6, s7
 800970a:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800970e:	4563      	cmp	r3, ip
 8009710:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8009714:	ee24 3a84 	vmul.f32	s6, s9, s8
 8009718:	ee27 2a26 	vmul.f32	s4, s14, s13
 800971c:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8009720:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8009724:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009728:	ee65 5a84 	vmul.f32	s11, s11, s8
 800972c:	ee65 6a26 	vmul.f32	s13, s10, s13
 8009730:	ee25 5a04 	vmul.f32	s10, s10, s8
 8009734:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009738:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800973c:	ee33 4a02 	vadd.f32	s8, s6, s4
 8009740:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8009744:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 8009748:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800974c:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 8009750:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 8009754:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8009758:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800975c:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8009760:	ee27 4a87 	vmul.f32	s8, s15, s14
 8009764:	ee61 5a87 	vmul.f32	s11, s3, s14
 8009768:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800976c:	ee22 5a87 	vmul.f32	s10, s5, s14
 8009770:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009774:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009778:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800977c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009780:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009784:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009788:	ee37 7a26 	vadd.f32	s14, s14, s13
 800978c:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 8009790:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 8009794:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 8009798:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800979c:	f47f af60 	bne.w	8009660 <arm_cfft_radix8by2_f32+0x38>
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	b28c      	uxth	r4, r1
 80097a4:	2302      	movs	r3, #2
 80097a6:	4621      	mov	r1, r4
 80097a8:	f000 fc28 	bl	8009ffc <arm_radix8_butterfly_f32>
 80097ac:	4621      	mov	r1, r4
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	4640      	mov	r0, r8
 80097b2:	2302      	movs	r3, #2
 80097b4:	ecbd 8b06 	vpop	{d8-d10}
 80097b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097bc:	f000 bc1e 	b.w	8009ffc <arm_radix8_butterfly_f32>

080097c0 <arm_cfft_radix8by4_f32>:
 80097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	ed2d 8b04 	vpush	{d8-d9}
 80097c8:	8804      	ldrh	r4, [r0, #0]
 80097ca:	b08d      	sub	sp, #52	; 0x34
 80097cc:	6842      	ldr	r2, [r0, #4]
 80097ce:	460d      	mov	r5, r1
 80097d0:	0864      	lsrs	r4, r4, #1
 80097d2:	edd1 7a00 	vldr	s15, [r1]
 80097d6:	edd1 5a01 	vldr	s11, [r1, #4]
 80097da:	00a3      	lsls	r3, r4, #2
 80097dc:	18ce      	adds	r6, r1, r3
 80097de:	18f7      	adds	r7, r6, r3
 80097e0:	ed96 7a00 	vldr	s14, [r6]
 80097e4:	ed96 4a01 	vldr	s8, [r6, #4]
 80097e8:	ed97 6a00 	vldr	s12, [r7]
 80097ec:	edd7 4a01 	vldr	s9, [r7, #4]
 80097f0:	ee77 6a86 	vadd.f32	s13, s15, s12
 80097f4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80097f8:	ee35 6aa4 	vadd.f32	s12, s11, s9
 80097fc:	ee77 2a26 	vadd.f32	s5, s14, s13
 8009800:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8009804:	ee74 3a27 	vadd.f32	s7, s8, s15
 8009808:	ee76 4a44 	vsub.f32	s9, s12, s8
 800980c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8009810:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8009814:	ee35 4ac7 	vsub.f32	s8, s11, s14
 8009818:	ee37 7a25 	vadd.f32	s14, s14, s11
 800981c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009820:	0860      	lsrs	r0, r4, #1
 8009822:	f102 0408 	add.w	r4, r2, #8
 8009826:	9405      	str	r4, [sp, #20]
 8009828:	f102 0410 	add.w	r4, r2, #16
 800982c:	9009      	str	r0, [sp, #36]	; 0x24
 800982e:	f1a0 0902 	sub.w	r9, r0, #2
 8009832:	9403      	str	r4, [sp, #12]
 8009834:	18fc      	adds	r4, r7, r3
 8009836:	f102 0018 	add.w	r0, r2, #24
 800983a:	ed94 5a00 	vldr	s10, [r4]
 800983e:	ed94 3a01 	vldr	s6, [r4, #4]
 8009842:	ee72 2a85 	vadd.f32	s5, s5, s10
 8009846:	9004      	str	r0, [sp, #16]
 8009848:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800984c:	4620      	mov	r0, r4
 800984e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8009852:	9408      	str	r4, [sp, #32]
 8009854:	ee12 ca90 	vmov	ip, s5
 8009858:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800985c:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009860:	f845 cb08 	str.w	ip, [r5], #8
 8009864:	ee13 ca90 	vmov	ip, s7
 8009868:	ed96 2a01 	vldr	s4, [r6, #4]
 800986c:	ee74 4a05 	vadd.f32	s9, s8, s10
 8009870:	edd4 2a01 	vldr	s5, [r4, #4]
 8009874:	ee37 7a45 	vsub.f32	s14, s14, s10
 8009878:	ee36 6a02 	vadd.f32	s12, s12, s4
 800987c:	9500      	str	r5, [sp, #0]
 800987e:	460d      	mov	r5, r1
 8009880:	ee36 6a22 	vadd.f32	s12, s12, s5
 8009884:	ed81 6a01 	vstr	s12, [r1, #4]
 8009888:	4631      	mov	r1, r6
 800988a:	f841 cb08 	str.w	ip, [r1], #8
 800988e:	ee16 ca90 	vmov	ip, s13
 8009892:	9106      	str	r1, [sp, #24]
 8009894:	4639      	mov	r1, r7
 8009896:	edc6 4a01 	vstr	s9, [r6, #4]
 800989a:	f841 cb08 	str.w	ip, [r1], #8
 800989e:	9102      	str	r1, [sp, #8]
 80098a0:	ee17 1a90 	vmov	r1, s15
 80098a4:	edc7 5a01 	vstr	s11, [r7, #4]
 80098a8:	f840 1b08 	str.w	r1, [r0], #8
 80098ac:	ea5f 0159 	movs.w	r1, r9, lsr #1
 80098b0:	9001      	str	r0, [sp, #4]
 80098b2:	ed84 7a01 	vstr	s14, [r4, #4]
 80098b6:	9107      	str	r1, [sp, #28]
 80098b8:	f000 8135 	beq.w	8009b26 <arm_cfft_radix8by4_f32+0x366>
 80098bc:	3b0c      	subs	r3, #12
 80098be:	f102 0920 	add.w	r9, r2, #32
 80098c2:	f102 0830 	add.w	r8, r2, #48	; 0x30
 80098c6:	4622      	mov	r2, r4
 80098c8:	468b      	mov	fp, r1
 80098ca:	f105 0e10 	add.w	lr, r5, #16
 80098ce:	4423      	add	r3, r4
 80098d0:	f1a6 0c0c 	sub.w	ip, r6, #12
 80098d4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80098d8:	f106 0010 	add.w	r0, r6, #16
 80098dc:	f1a7 010c 	sub.w	r1, r7, #12
 80098e0:	f107 0510 	add.w	r5, r7, #16
 80098e4:	3c0c      	subs	r4, #12
 80098e6:	3210      	adds	r2, #16
 80098e8:	ed15 7a02 	vldr	s14, [r5, #-8]
 80098ec:	f1bb 0b01 	subs.w	fp, fp, #1
 80098f0:	ed5e 7a02 	vldr	s15, [lr, #-8]
 80098f4:	f1ac 0c08 	sub.w	ip, ip, #8
 80098f8:	ed50 6a02 	vldr	s13, [r0, #-8]
 80098fc:	f10e 0e08 	add.w	lr, lr, #8
 8009900:	ee77 1a87 	vadd.f32	s3, s15, s14
 8009904:	ed52 4a02 	vldr	s9, [r2, #-8]
 8009908:	ed55 5a01 	vldr	s11, [r5, #-4]
 800990c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009910:	ed1e 7a03 	vldr	s14, [lr, #-12]
 8009914:	f10a 0a08 	add.w	sl, sl, #8
 8009918:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800991c:	ed10 3a01 	vldr	s6, [r0, #-4]
 8009920:	ee37 4a25 	vadd.f32	s8, s14, s11
 8009924:	ed52 3a01 	vldr	s7, [r2, #-4]
 8009928:	ee37 7a65 	vsub.f32	s14, s14, s11
 800992c:	f100 0008 	add.w	r0, r0, #8
 8009930:	ee36 6a24 	vadd.f32	s12, s12, s9
 8009934:	f1a1 0108 	sub.w	r1, r1, #8
 8009938:	ee73 2a27 	vadd.f32	s5, s6, s15
 800993c:	f109 0910 	add.w	r9, r9, #16
 8009940:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8009944:	f105 0508 	add.w	r5, r5, #8
 8009948:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800994c:	ee37 5a66 	vsub.f32	s10, s14, s13
 8009950:	ed50 5a03 	vldr	s11, [r0, #-12]
 8009954:	ee71 1ae6 	vsub.f32	s3, s3, s13
 8009958:	ed12 6a01 	vldr	s12, [r2, #-4]
 800995c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009960:	ee74 5a25 	vadd.f32	s11, s8, s11
 8009964:	f1a4 0408 	sub.w	r4, r4, #8
 8009968:	ee34 4a43 	vsub.f32	s8, s8, s6
 800996c:	f108 0818 	add.w	r8, r8, #24
 8009970:	ee32 0ae3 	vsub.f32	s0, s5, s7
 8009974:	f102 0208 	add.w	r2, r2, #8
 8009978:	ee75 5a86 	vadd.f32	s11, s11, s12
 800997c:	f1a3 0308 	sub.w	r3, r3, #8
 8009980:	ee34 6a63 	vsub.f32	s12, s8, s7
 8009984:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8009988:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800998c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009990:	ed94 4a04 	vldr	s8, [r4, #16]
 8009994:	ee71 1ae4 	vsub.f32	s3, s3, s9
 8009998:	ed9c 3a04 	vldr	s6, [ip, #16]
 800999c:	ee37 7a64 	vsub.f32	s14, s14, s9
 80099a0:	edd1 7a04 	vldr	s15, [r1, #16]
 80099a4:	ee73 6a04 	vadd.f32	s13, s6, s8
 80099a8:	ed93 8a04 	vldr	s16, [r3, #16]
 80099ac:	edd4 5a03 	vldr	s11, [r4, #12]
 80099b0:	ee33 3a44 	vsub.f32	s6, s6, s8
 80099b4:	ed9c 2a03 	vldr	s4, [ip, #12]
 80099b8:	ee77 8ac8 	vsub.f32	s17, s15, s16
 80099bc:	ee77 0aa6 	vadd.f32	s1, s15, s13
 80099c0:	ed91 1a03 	vldr	s2, [r1, #12]
 80099c4:	ee32 4a25 	vadd.f32	s8, s4, s11
 80099c8:	edd3 2a03 	vldr	s5, [r3, #12]
 80099cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80099d0:	ee70 0a88 	vadd.f32	s1, s1, s16
 80099d4:	ee73 4a41 	vsub.f32	s9, s6, s2
 80099d8:	ee32 2a65 	vsub.f32	s4, s4, s11
 80099dc:	edcc 0a04 	vstr	s1, [ip, #16]
 80099e0:	ee74 0a41 	vsub.f32	s1, s8, s2
 80099e4:	edd1 6a03 	vldr	s13, [r1, #12]
 80099e8:	ee74 4aa2 	vadd.f32	s9, s9, s5
 80099ec:	ed93 9a03 	vldr	s18, [r3, #12]
 80099f0:	ee78 5a82 	vadd.f32	s11, s17, s4
 80099f4:	ee34 4a26 	vadd.f32	s8, s8, s13
 80099f8:	ee70 0ae2 	vsub.f32	s1, s1, s5
 80099fc:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8009a00:	ee34 4a09 	vadd.f32	s8, s8, s18
 8009a04:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8009a08:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8009a0c:	ed8c 4a03 	vstr	s8, [ip, #12]
 8009a10:	ee38 2ac2 	vsub.f32	s4, s17, s4
 8009a14:	ed1a 1a03 	vldr	s2, [sl, #-12]
 8009a18:	ed1a 4a04 	vldr	s8, [sl, #-16]
 8009a1c:	ee60 2a01 	vmul.f32	s5, s0, s2
 8009a20:	ee64 6a81 	vmul.f32	s13, s9, s2
 8009a24:	ee20 8a04 	vmul.f32	s16, s0, s8
 8009a28:	ee64 4a84 	vmul.f32	s9, s9, s8
 8009a2c:	ee25 0a01 	vmul.f32	s0, s10, s2
 8009a30:	ee25 5a04 	vmul.f32	s10, s10, s8
 8009a34:	ee25 4a84 	vmul.f32	s8, s11, s8
 8009a38:	ee65 5a81 	vmul.f32	s11, s11, s2
 8009a3c:	ee35 5a62 	vsub.f32	s10, s10, s5
 8009a40:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8009a44:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8009a48:	ee38 1a00 	vadd.f32	s2, s16, s0
 8009a4c:	ed00 5a03 	vstr	s10, [r0, #-12]
 8009a50:	ed00 1a04 	vstr	s2, [r0, #-16]
 8009a54:	ed81 4a04 	vstr	s8, [r1, #16]
 8009a58:	edc1 5a03 	vstr	s11, [r1, #12]
 8009a5c:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 8009a60:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 8009a64:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 8009a68:	ee66 2a25 	vmul.f32	s5, s12, s11
 8009a6c:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8009a70:	ee21 4a85 	vmul.f32	s8, s3, s10
 8009a74:	ee60 7a85 	vmul.f32	s15, s1, s10
 8009a78:	ee61 1aa5 	vmul.f32	s3, s3, s11
 8009a7c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009a80:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8009a84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009a88:	ee34 5a22 	vadd.f32	s10, s8, s5
 8009a8c:	ee36 6a61 	vsub.f32	s12, s12, s3
 8009a90:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8009a94:	ed05 5a04 	vstr	s10, [r5, #-16]
 8009a98:	ed05 6a03 	vstr	s12, [r5, #-12]
 8009a9c:	edc4 5a04 	vstr	s11, [r4, #16]
 8009aa0:	edc4 6a03 	vstr	s13, [r4, #12]
 8009aa4:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 8009aa8:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 8009aac:	ee23 6aa2 	vmul.f32	s12, s7, s5
 8009ab0:	ee67 5a27 	vmul.f32	s11, s14, s15
 8009ab4:	ee63 6a27 	vmul.f32	s13, s6, s15
 8009ab8:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8009abc:	ee27 7a22 	vmul.f32	s14, s14, s5
 8009ac0:	ee62 7a27 	vmul.f32	s15, s4, s15
 8009ac4:	ee23 3a22 	vmul.f32	s6, s6, s5
 8009ac8:	ee22 2a22 	vmul.f32	s4, s4, s5
 8009acc:	ee36 6a25 	vadd.f32	s12, s12, s11
 8009ad0:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009ad4:	ee36 2ac2 	vsub.f32	s4, s13, s4
 8009ad8:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009adc:	ed02 6a04 	vstr	s12, [r2, #-16]
 8009ae0:	ed02 7a03 	vstr	s14, [r2, #-12]
 8009ae4:	ed83 2a04 	vstr	s4, [r3, #16]
 8009ae8:	edc3 7a03 	vstr	s15, [r3, #12]
 8009aec:	f47f aefc 	bne.w	80098e8 <arm_cfft_radix8by4_f32+0x128>
 8009af0:	9907      	ldr	r1, [sp, #28]
 8009af2:	9803      	ldr	r0, [sp, #12]
 8009af4:	00cb      	lsls	r3, r1, #3
 8009af6:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009afa:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009afe:	9103      	str	r1, [sp, #12]
 8009b00:	9900      	ldr	r1, [sp, #0]
 8009b02:	4419      	add	r1, r3
 8009b04:	9100      	str	r1, [sp, #0]
 8009b06:	9905      	ldr	r1, [sp, #20]
 8009b08:	4419      	add	r1, r3
 8009b0a:	9105      	str	r1, [sp, #20]
 8009b0c:	9906      	ldr	r1, [sp, #24]
 8009b0e:	4419      	add	r1, r3
 8009b10:	9106      	str	r1, [sp, #24]
 8009b12:	9902      	ldr	r1, [sp, #8]
 8009b14:	4419      	add	r1, r3
 8009b16:	9102      	str	r1, [sp, #8]
 8009b18:	9901      	ldr	r1, [sp, #4]
 8009b1a:	4419      	add	r1, r3
 8009b1c:	9b04      	ldr	r3, [sp, #16]
 8009b1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b22:	9101      	str	r1, [sp, #4]
 8009b24:	9304      	str	r3, [sp, #16]
 8009b26:	9b00      	ldr	r3, [sp, #0]
 8009b28:	9902      	ldr	r1, [sp, #8]
 8009b2a:	ed93 7a00 	vldr	s14, [r3]
 8009b2e:	edd1 7a00 	vldr	s15, [r1]
 8009b32:	9a06      	ldr	r2, [sp, #24]
 8009b34:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009b38:	9d01      	ldr	r5, [sp, #4]
 8009b3a:	edd2 6a00 	vldr	s13, [r2]
 8009b3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b42:	9b02      	ldr	r3, [sp, #8]
 8009b44:	ee76 3a86 	vadd.f32	s7, s13, s12
 8009b48:	ed95 3a00 	vldr	s6, [r5]
 8009b4c:	ed93 5a01 	vldr	s10, [r3, #4]
 8009b50:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009b54:	9b00      	ldr	r3, [sp, #0]
 8009b56:	ee73 3a83 	vadd.f32	s7, s7, s6
 8009b5a:	edd5 2a01 	vldr	s5, [r5, #4]
 8009b5e:	ed93 4a01 	vldr	s8, [r3, #4]
 8009b62:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009b66:	9b00      	ldr	r3, [sp, #0]
 8009b68:	ee74 5a05 	vadd.f32	s11, s8, s10
 8009b6c:	edd2 7a01 	vldr	s15, [r2, #4]
 8009b70:	edc3 3a00 	vstr	s7, [r3]
 8009b74:	ee34 4a45 	vsub.f32	s8, s8, s10
 8009b78:	edd2 3a01 	vldr	s7, [r2, #4]
 8009b7c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009b80:	ed95 2a01 	vldr	s4, [r5, #4]
 8009b84:	ee75 3aa3 	vadd.f32	s7, s11, s7
 8009b88:	9d05      	ldr	r5, [sp, #20]
 8009b8a:	ee34 5a66 	vsub.f32	s10, s8, s13
 8009b8e:	9b00      	ldr	r3, [sp, #0]
 8009b90:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8009b94:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8009b98:	ee73 3a82 	vadd.f32	s7, s7, s4
 8009b9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009b9e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8009ba8:	edc3 3a01 	vstr	s7, [r3, #4]
 8009bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bb0:	edd5 3a00 	vldr	s7, [r5]
 8009bb4:	ee76 6a84 	vadd.f32	s13, s13, s8
 8009bb8:	ed95 7a01 	vldr	s14, [r5, #4]
 8009bbc:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8009bc0:	ee24 4aa3 	vmul.f32	s8, s9, s7
 8009bc4:	2304      	movs	r3, #4
 8009bc6:	ee64 4a87 	vmul.f32	s9, s9, s14
 8009bca:	ee25 7a07 	vmul.f32	s14, s10, s14
 8009bce:	ee25 5a23 	vmul.f32	s10, s10, s7
 8009bd2:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8009bd6:	ee34 7a07 	vadd.f32	s14, s8, s14
 8009bda:	ee35 5a64 	vsub.f32	s10, s10, s9
 8009bde:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8009be2:	ed82 7a00 	vstr	s14, [r2]
 8009be6:	ed82 5a01 	vstr	s10, [r2, #4]
 8009bea:	9a03      	ldr	r2, [sp, #12]
 8009bec:	edd2 4a01 	vldr	s9, [r2, #4]
 8009bf0:	ed92 7a00 	vldr	s14, [r2]
 8009bf4:	9a02      	ldr	r2, [sp, #8]
 8009bf6:	ee26 5a07 	vmul.f32	s10, s12, s14
 8009bfa:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009bfe:	ee25 7a87 	vmul.f32	s14, s11, s14
 8009c02:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8009c06:	ee37 6a46 	vsub.f32	s12, s14, s12
 8009c0a:	ee75 5a25 	vadd.f32	s11, s10, s11
 8009c0e:	edc2 5a00 	vstr	s11, [r2]
 8009c12:	ed82 6a01 	vstr	s12, [r2, #4]
 8009c16:	9a04      	ldr	r2, [sp, #16]
 8009c18:	9d01      	ldr	r5, [sp, #4]
 8009c1a:	edd2 5a01 	vldr	s11, [r2, #4]
 8009c1e:	ed92 7a00 	vldr	s14, [r2]
 8009c22:	ee27 6a87 	vmul.f32	s12, s15, s14
 8009c26:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009c2a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009c2e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c36:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009c3a:	edc5 7a01 	vstr	s15, [r5, #4]
 8009c3e:	edc5 6a00 	vstr	s13, [r5]
 8009c42:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009c44:	686a      	ldr	r2, [r5, #4]
 8009c46:	f000 f9d9 	bl	8009ffc <arm_radix8_butterfly_f32>
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	686a      	ldr	r2, [r5, #4]
 8009c50:	2304      	movs	r3, #4
 8009c52:	f000 f9d3 	bl	8009ffc <arm_radix8_butterfly_f32>
 8009c56:	4638      	mov	r0, r7
 8009c58:	4621      	mov	r1, r4
 8009c5a:	686a      	ldr	r2, [r5, #4]
 8009c5c:	2304      	movs	r3, #4
 8009c5e:	f000 f9cd 	bl	8009ffc <arm_radix8_butterfly_f32>
 8009c62:	4621      	mov	r1, r4
 8009c64:	686a      	ldr	r2, [r5, #4]
 8009c66:	2304      	movs	r3, #4
 8009c68:	9808      	ldr	r0, [sp, #32]
 8009c6a:	b00d      	add	sp, #52	; 0x34
 8009c6c:	ecbd 8b04 	vpop	{d8-d9}
 8009c70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	f000 b9c2 	b.w	8009ffc <arm_radix8_butterfly_f32>

08009c78 <arm_cfft_f32>:
 8009c78:	2a01      	cmp	r2, #1
 8009c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c7e:	4606      	mov	r6, r0
 8009c80:	4617      	mov	r7, r2
 8009c82:	460c      	mov	r4, r1
 8009c84:	4698      	mov	r8, r3
 8009c86:	8805      	ldrh	r5, [r0, #0]
 8009c88:	d055      	beq.n	8009d36 <arm_cfft_f32+0xbe>
 8009c8a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8009c8e:	d061      	beq.n	8009d54 <arm_cfft_f32+0xdc>
 8009c90:	d916      	bls.n	8009cc0 <arm_cfft_f32+0x48>
 8009c92:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8009c96:	d01a      	beq.n	8009cce <arm_cfft_f32+0x56>
 8009c98:	d946      	bls.n	8009d28 <arm_cfft_f32+0xb0>
 8009c9a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8009c9e:	d059      	beq.n	8009d54 <arm_cfft_f32+0xdc>
 8009ca0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8009ca4:	d105      	bne.n	8009cb2 <arm_cfft_f32+0x3a>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	6872      	ldr	r2, [r6, #4]
 8009caa:	4629      	mov	r1, r5
 8009cac:	4620      	mov	r0, r4
 8009cae:	f000 f9a5 	bl	8009ffc <arm_radix8_butterfly_f32>
 8009cb2:	f1b8 0f00 	cmp.w	r8, #0
 8009cb6:	d111      	bne.n	8009cdc <arm_cfft_f32+0x64>
 8009cb8:	2f01      	cmp	r7, #1
 8009cba:	d016      	beq.n	8009cea <arm_cfft_f32+0x72>
 8009cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc0:	2d20      	cmp	r5, #32
 8009cc2:	d047      	beq.n	8009d54 <arm_cfft_f32+0xdc>
 8009cc4:	d934      	bls.n	8009d30 <arm_cfft_f32+0xb8>
 8009cc6:	2d40      	cmp	r5, #64	; 0x40
 8009cc8:	d0ed      	beq.n	8009ca6 <arm_cfft_f32+0x2e>
 8009cca:	2d80      	cmp	r5, #128	; 0x80
 8009ccc:	d1f1      	bne.n	8009cb2 <arm_cfft_f32+0x3a>
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f7ff fca9 	bl	8009628 <arm_cfft_radix8by2_f32>
 8009cd6:	f1b8 0f00 	cmp.w	r8, #0
 8009cda:	d0ed      	beq.n	8009cb8 <arm_cfft_f32+0x40>
 8009cdc:	68b2      	ldr	r2, [r6, #8]
 8009cde:	4620      	mov	r0, r4
 8009ce0:	89b1      	ldrh	r1, [r6, #12]
 8009ce2:	f000 f83f 	bl	8009d64 <arm_bitreversal_32>
 8009ce6:	2f01      	cmp	r7, #1
 8009ce8:	d1e8      	bne.n	8009cbc <arm_cfft_f32+0x44>
 8009cea:	ee07 5a90 	vmov	s15, r5
 8009cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009cfa:	2d00      	cmp	r5, #0
 8009cfc:	d0de      	beq.n	8009cbc <arm_cfft_f32+0x44>
 8009cfe:	f104 0108 	add.w	r1, r4, #8
 8009d02:	2300      	movs	r3, #0
 8009d04:	ed11 7a02 	vldr	s14, [r1, #-8]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009d0e:	3108      	adds	r1, #8
 8009d10:	429d      	cmp	r5, r3
 8009d12:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009d16:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009d1a:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009d1e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009d22:	d1ef      	bne.n	8009d04 <arm_cfft_f32+0x8c>
 8009d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d28:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009d2c:	d0bb      	beq.n	8009ca6 <arm_cfft_f32+0x2e>
 8009d2e:	e7c0      	b.n	8009cb2 <arm_cfft_f32+0x3a>
 8009d30:	2d10      	cmp	r5, #16
 8009d32:	d0cc      	beq.n	8009cce <arm_cfft_f32+0x56>
 8009d34:	e7bd      	b.n	8009cb2 <arm_cfft_f32+0x3a>
 8009d36:	b195      	cbz	r5, 8009d5e <arm_cfft_f32+0xe6>
 8009d38:	f101 030c 	add.w	r3, r1, #12
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009d42:	3201      	adds	r2, #1
 8009d44:	3308      	adds	r3, #8
 8009d46:	eef1 7a67 	vneg.f32	s15, s15
 8009d4a:	4295      	cmp	r5, r2
 8009d4c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009d50:	d1f5      	bne.n	8009d3e <arm_cfft_f32+0xc6>
 8009d52:	e79a      	b.n	8009c8a <arm_cfft_f32+0x12>
 8009d54:	4621      	mov	r1, r4
 8009d56:	4630      	mov	r0, r6
 8009d58:	f7ff fd32 	bl	80097c0 <arm_cfft_radix8by4_f32>
 8009d5c:	e7a9      	b.n	8009cb2 <arm_cfft_f32+0x3a>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0ac      	beq.n	8009cbc <arm_cfft_f32+0x44>
 8009d62:	e7bb      	b.n	8009cdc <arm_cfft_f32+0x64>

08009d64 <arm_bitreversal_32>:
 8009d64:	b321      	cbz	r1, 8009db0 <arm_bitreversal_32+0x4c>
 8009d66:	f102 0c02 	add.w	ip, r2, #2
 8009d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6e:	4690      	mov	r8, r2
 8009d70:	2500      	movs	r5, #0
 8009d72:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 8009d76:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 8009d7a:	3502      	adds	r5, #2
 8009d7c:	08a4      	lsrs	r4, r4, #2
 8009d7e:	089b      	lsrs	r3, r3, #2
 8009d80:	428d      	cmp	r5, r1
 8009d82:	ea4f 0784 	mov.w	r7, r4, lsl #2
 8009d86:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8009d8a:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8009d8e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8009d92:	f107 0704 	add.w	r7, r7, #4
 8009d96:	f106 0604 	add.w	r6, r6, #4
 8009d9a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8009d9e:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 8009da2:	59c4      	ldr	r4, [r0, r7]
 8009da4:	5983      	ldr	r3, [r0, r6]
 8009da6:	51c3      	str	r3, [r0, r7]
 8009da8:	5184      	str	r4, [r0, r6]
 8009daa:	d3e2      	bcc.n	8009d72 <arm_bitreversal_32+0xe>
 8009dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop

08009db4 <arm_cmplx_mag_f32>:
 8009db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db8:	0897      	lsrs	r7, r2, #2
 8009dba:	ed2d 8b02 	vpush	{d8}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	d077      	beq.n	8009eb2 <arm_cmplx_mag_f32+0xfe>
 8009dc2:	f100 0420 	add.w	r4, r0, #32
 8009dc6:	f101 0510 	add.w	r5, r1, #16
 8009dca:	463e      	mov	r6, r7
 8009dcc:	f04f 0800 	mov.w	r8, #0
 8009dd0:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8009dd4:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8009dd8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ddc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009de0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009de4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dec:	f2c0 80c1 	blt.w	8009f72 <arm_cmplx_mag_f32+0x1be>
 8009df0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009df4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfc:	f100 80d4 	bmi.w	8009fa8 <arm_cmplx_mag_f32+0x1f4>
 8009e00:	ed05 8a04 	vstr	s16, [r5, #-16]
 8009e04:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8009e08:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8009e0c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009e10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009e14:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009e18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e20:	f2c0 80a4 	blt.w	8009f6c <arm_cmplx_mag_f32+0x1b8>
 8009e24:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009e28:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e30:	f100 80a8 	bmi.w	8009f84 <arm_cmplx_mag_f32+0x1d0>
 8009e34:	ed05 8a03 	vstr	s16, [r5, #-12]
 8009e38:	ed14 0a04 	vldr	s0, [r4, #-16]
 8009e3c:	ed54 7a03 	vldr	s15, [r4, #-12]
 8009e40:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009e44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009e48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009e4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e54:	f2c0 8087 	blt.w	8009f66 <arm_cmplx_mag_f32+0x1b2>
 8009e58:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009e5c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e64:	f100 8097 	bmi.w	8009f96 <arm_cmplx_mag_f32+0x1e2>
 8009e68:	ed05 8a02 	vstr	s16, [r5, #-8]
 8009e6c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009e70:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009e74:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009e78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009e7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009e80:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e88:	db6a      	blt.n	8009f60 <arm_cmplx_mag_f32+0x1ac>
 8009e8a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009e8e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e96:	f100 8090 	bmi.w	8009fba <arm_cmplx_mag_f32+0x206>
 8009e9a:	ed05 8a01 	vstr	s16, [r5, #-4]
 8009e9e:	3e01      	subs	r6, #1
 8009ea0:	f104 0420 	add.w	r4, r4, #32
 8009ea4:	f105 0510 	add.w	r5, r5, #16
 8009ea8:	d192      	bne.n	8009dd0 <arm_cmplx_mag_f32+0x1c>
 8009eaa:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8009eae:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8009eb2:	f012 0203 	ands.w	r2, r2, #3
 8009eb6:	d04e      	beq.n	8009f56 <arm_cmplx_mag_f32+0x1a2>
 8009eb8:	ed90 0a00 	vldr	s0, [r0]
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	edd0 7a01 	vldr	s15, [r0, #4]
 8009ec2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ec6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009eca:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009ece:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed6:	db4f      	blt.n	8009f78 <arm_cmplx_mag_f32+0x1c4>
 8009ed8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009edc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee4:	d472      	bmi.n	8009fcc <arm_cmplx_mag_f32+0x218>
 8009ee6:	ed81 8a00 	vstr	s16, [r1]
 8009eea:	3a01      	subs	r2, #1
 8009eec:	d033      	beq.n	8009f56 <arm_cmplx_mag_f32+0x1a2>
 8009eee:	ed90 0a02 	vldr	s0, [r0, #8]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	edd0 7a03 	vldr	s15, [r0, #12]
 8009ef8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009efc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009f00:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009f04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f0c:	db36      	blt.n	8009f7c <arm_cmplx_mag_f32+0x1c8>
 8009f0e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009f12:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f1a:	d460      	bmi.n	8009fde <arm_cmplx_mag_f32+0x22a>
 8009f1c:	ed81 8a01 	vstr	s16, [r1, #4]
 8009f20:	2a01      	cmp	r2, #1
 8009f22:	d018      	beq.n	8009f56 <arm_cmplx_mag_f32+0x1a2>
 8009f24:	ed90 0a04 	vldr	s0, [r0, #16]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	edd0 7a05 	vldr	s15, [r0, #20]
 8009f2e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009f32:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009f36:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009f3a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f42:	db1d      	blt.n	8009f80 <arm_cmplx_mag_f32+0x1cc>
 8009f44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009f48:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f50:	d44e      	bmi.n	8009ff0 <arm_cmplx_mag_f32+0x23c>
 8009f52:	ed81 8a02 	vstr	s16, [r1, #8]
 8009f56:	b004      	add	sp, #16
 8009f58:	ecbd 8b02 	vpop	{d8}
 8009f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f60:	f845 8c04 	str.w	r8, [r5, #-4]
 8009f64:	e79b      	b.n	8009e9e <arm_cmplx_mag_f32+0xea>
 8009f66:	f845 8c08 	str.w	r8, [r5, #-8]
 8009f6a:	e77f      	b.n	8009e6c <arm_cmplx_mag_f32+0xb8>
 8009f6c:	f845 8c0c 	str.w	r8, [r5, #-12]
 8009f70:	e762      	b.n	8009e38 <arm_cmplx_mag_f32+0x84>
 8009f72:	f845 8c10 	str.w	r8, [r5, #-16]
 8009f76:	e745      	b.n	8009e04 <arm_cmplx_mag_f32+0x50>
 8009f78:	600b      	str	r3, [r1, #0]
 8009f7a:	e7b6      	b.n	8009eea <arm_cmplx_mag_f32+0x136>
 8009f7c:	604b      	str	r3, [r1, #4]
 8009f7e:	e7cf      	b.n	8009f20 <arm_cmplx_mag_f32+0x16c>
 8009f80:	608b      	str	r3, [r1, #8]
 8009f82:	e7e8      	b.n	8009f56 <arm_cmplx_mag_f32+0x1a2>
 8009f84:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009f88:	9001      	str	r0, [sp, #4]
 8009f8a:	f000 fb4b 	bl	800a624 <sqrtf>
 8009f8e:	9801      	ldr	r0, [sp, #4]
 8009f90:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009f94:	e74e      	b.n	8009e34 <arm_cmplx_mag_f32+0x80>
 8009f96:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009f9a:	9001      	str	r0, [sp, #4]
 8009f9c:	f000 fb42 	bl	800a624 <sqrtf>
 8009fa0:	9801      	ldr	r0, [sp, #4]
 8009fa2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009fa6:	e75f      	b.n	8009e68 <arm_cmplx_mag_f32+0xb4>
 8009fa8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009fac:	9001      	str	r0, [sp, #4]
 8009fae:	f000 fb39 	bl	800a624 <sqrtf>
 8009fb2:	9801      	ldr	r0, [sp, #4]
 8009fb4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009fb8:	e722      	b.n	8009e00 <arm_cmplx_mag_f32+0x4c>
 8009fba:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009fbe:	9001      	str	r0, [sp, #4]
 8009fc0:	f000 fb30 	bl	800a624 <sqrtf>
 8009fc4:	9801      	ldr	r0, [sp, #4]
 8009fc6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009fca:	e766      	b.n	8009e9a <arm_cmplx_mag_f32+0xe6>
 8009fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fd0:	9201      	str	r2, [sp, #4]
 8009fd2:	f000 fb27 	bl	800a624 <sqrtf>
 8009fd6:	9903      	ldr	r1, [sp, #12]
 8009fd8:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009fdc:	e783      	b.n	8009ee6 <arm_cmplx_mag_f32+0x132>
 8009fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fe2:	9201      	str	r2, [sp, #4]
 8009fe4:	f000 fb1e 	bl	800a624 <sqrtf>
 8009fe8:	9903      	ldr	r1, [sp, #12]
 8009fea:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009fee:	e795      	b.n	8009f1c <arm_cmplx_mag_f32+0x168>
 8009ff0:	9101      	str	r1, [sp, #4]
 8009ff2:	f000 fb17 	bl	800a624 <sqrtf>
 8009ff6:	9901      	ldr	r1, [sp, #4]
 8009ff8:	e7ab      	b.n	8009f52 <arm_cmplx_mag_f32+0x19e>
 8009ffa:	bf00      	nop

08009ffc <arm_radix8_butterfly_f32>:
 8009ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a000:	ed2d 8b10 	vpush	{d8-d15}
 800a004:	b095      	sub	sp, #84	; 0x54
 800a006:	468a      	mov	sl, r1
 800a008:	468b      	mov	fp, r1
 800a00a:	eddf 8abb 	vldr	s17, [pc, #748]	; 800a2f8 <arm_radix8_butterfly_f32+0x2fc>
 800a00e:	9012      	str	r0, [sp, #72]	; 0x48
 800a010:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800a014:	4603      	mov	r3, r0
 800a016:	3304      	adds	r3, #4
 800a018:	9313      	str	r3, [sp, #76]	; 0x4c
 800a01a:	ea4f 02db 	mov.w	r2, fp, lsr #3
 800a01e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a020:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a024:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800a028:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800a02c:	920f      	str	r2, [sp, #60]	; 0x3c
 800a02e:	9303      	str	r3, [sp, #12]
 800a030:	0153      	lsls	r3, r2, #5
 800a032:	0114      	lsls	r4, r2, #4
 800a034:	eba9 0002 	sub.w	r0, r9, r2
 800a038:	18ce      	adds	r6, r1, r3
 800a03a:	9302      	str	r3, [sp, #8]
 800a03c:	0097      	lsls	r7, r2, #2
 800a03e:	4613      	mov	r3, r2
 800a040:	eb06 0509 	add.w	r5, r6, r9
 800a044:	9004      	str	r0, [sp, #16]
 800a046:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 800a04a:	1bd2      	subs	r2, r2, r7
 800a04c:	eb05 0109 	add.w	r1, r5, r9
 800a050:	441f      	add	r7, r3
 800a052:	9405      	str	r4, [sp, #20]
 800a054:	f109 0004 	add.w	r0, r9, #4
 800a058:	9101      	str	r1, [sp, #4]
 800a05a:	1d21      	adds	r1, r4, #4
 800a05c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a05e:	f04f 0e00 	mov.w	lr, #0
 800a062:	9c01      	ldr	r4, [sp, #4]
 800a064:	4418      	add	r0, r3
 800a066:	4419      	add	r1, r3
 800a068:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800a06c:	9b02      	ldr	r3, [sp, #8]
 800a06e:	00fc      	lsls	r4, r7, #3
 800a070:	18d7      	adds	r7, r2, r3
 800a072:	9b04      	ldr	r3, [sp, #16]
 800a074:	9406      	str	r4, [sp, #24]
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	9c01      	ldr	r4, [sp, #4]
 800a07a:	9307      	str	r3, [sp, #28]
 800a07c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800a080:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800a084:	9304      	str	r3, [sp, #16]
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	edd6 6a00 	vldr	s13, [r6]
 800a08c:	44de      	add	lr, fp
 800a08e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800a092:	ed94 7a00 	vldr	s14, [r4]
 800a096:	45f2      	cmp	sl, lr
 800a098:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a09c:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800a0a0:	edd5 2a00 	vldr	s5, [r5]
 800a0a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a0a8:	edd7 3a00 	vldr	s7, [r7]
 800a0ac:	ed11 5a01 	vldr	s10, [r1, #-4]
 800a0b0:	ee36 3a22 	vadd.f32	s6, s12, s5
 800a0b4:	edd2 6a00 	vldr	s13, [r2]
 800a0b8:	ee75 5a07 	vadd.f32	s11, s10, s14
 800a0bc:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800a0c0:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800a0c4:	ee72 4a25 	vadd.f32	s9, s4, s11
 800a0c8:	ee73 3a04 	vadd.f32	s7, s6, s8
 800a0cc:	ee35 5a47 	vsub.f32	s10, s10, s14
 800a0d0:	ee36 7a62 	vsub.f32	s14, s12, s5
 800a0d4:	ee32 2a65 	vsub.f32	s4, s4, s11
 800a0d8:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800a0dc:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800a0e0:	ee37 6a66 	vsub.f32	s12, s14, s13
 800a0e4:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800a0e8:	ee33 3a44 	vsub.f32	s6, s6, s8
 800a0ec:	edc6 4a00 	vstr	s9, [r6]
 800a0f0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a0f4:	ed97 4a01 	vldr	s8, [r7, #4]
 800a0f8:	ee66 6a28 	vmul.f32	s13, s12, s17
 800a0fc:	edd0 5a00 	vldr	s11, [r0]
 800a100:	ed95 6a01 	vldr	s12, [r5, #4]
 800a104:	ee27 7a28 	vmul.f32	s14, s14, s17
 800a108:	edd2 3a01 	vldr	s7, [r2, #4]
 800a10c:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800a110:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800a114:	ed96 1a01 	vldr	s2, [r6, #4]
 800a118:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800a11c:	edd4 0a01 	vldr	s1, [r4, #4]
 800a120:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a124:	eddc 6a00 	vldr	s13, [ip]
 800a128:	ee75 5a86 	vadd.f32	s11, s11, s12
 800a12c:	ed91 6a00 	vldr	s12, [r1]
 800a130:	ee73 3a84 	vadd.f32	s7, s7, s8
 800a134:	ee74 1a80 	vadd.f32	s3, s9, s0
 800a138:	ee36 4a81 	vadd.f32	s8, s13, s2
 800a13c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800a140:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800a144:	ee36 1a20 	vadd.f32	s2, s12, s1
 800a148:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800a14c:	ee36 6a60 	vsub.f32	s12, s12, s1
 800a150:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800a154:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800a158:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800a15c:	ee74 3a01 	vadd.f32	s7, s8, s2
 800a160:	ee34 4a41 	vsub.f32	s8, s8, s2
 800a164:	ee36 1a21 	vadd.f32	s2, s12, s3
 800a168:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800a16c:	ee36 6a61 	vsub.f32	s12, s12, s3
 800a170:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800a174:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800a178:	ed8c 0a00 	vstr	s0, [ip]
 800a17c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800a180:	449c      	add	ip, r3
 800a182:	ee75 4a07 	vadd.f32	s9, s10, s14
 800a186:	edc6 3a01 	vstr	s7, [r6, #4]
 800a18a:	ee35 7a47 	vsub.f32	s14, s10, s14
 800a18e:	441e      	add	r6, r3
 800a190:	ee32 5a25 	vadd.f32	s10, s4, s11
 800a194:	ee72 5a65 	vsub.f32	s11, s4, s11
 800a198:	ee72 3a81 	vadd.f32	s7, s5, s2
 800a19c:	ed01 5a01 	vstr	s10, [r1, #-4]
 800a1a0:	ee34 2a43 	vsub.f32	s4, s8, s6
 800a1a4:	edc4 5a00 	vstr	s11, [r4]
 800a1a8:	ee37 5a86 	vadd.f32	s10, s15, s12
 800a1ac:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800a1b0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a1b4:	ed81 2a00 	vstr	s4, [r1]
 800a1b8:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800a1bc:	4419      	add	r1, r3
 800a1be:	ee33 4a04 	vadd.f32	s8, s6, s8
 800a1c2:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800a1c6:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800a1ca:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a1ce:	ed84 4a01 	vstr	s8, [r4, #4]
 800a1d2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800a1d6:	441c      	add	r4, r3
 800a1d8:	edc7 2a00 	vstr	s5, [r7]
 800a1dc:	ed85 5a00 	vstr	s10, [r5]
 800a1e0:	edc2 7a00 	vstr	s15, [r2]
 800a1e4:	edc0 5a00 	vstr	s11, [r0]
 800a1e8:	4418      	add	r0, r3
 800a1ea:	edc7 4a01 	vstr	s9, [r7, #4]
 800a1ee:	441f      	add	r7, r3
 800a1f0:	ed85 6a01 	vstr	s12, [r5, #4]
 800a1f4:	441d      	add	r5, r3
 800a1f6:	ed82 7a01 	vstr	s14, [r2, #4]
 800a1fa:	441a      	add	r2, r3
 800a1fc:	f63f af44 	bhi.w	800a088 <arm_radix8_butterfly_f32+0x8c>
 800a200:	469c      	mov	ip, r3
 800a202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a204:	2b07      	cmp	r3, #7
 800a206:	f240 81b6 	bls.w	800a576 <arm_radix8_butterfly_f32+0x57a>
 800a20a:	9a02      	ldr	r2, [sp, #8]
 800a20c:	f109 0608 	add.w	r6, r9, #8
 800a210:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a212:	f108 0408 	add.w	r4, r8, #8
 800a216:	3208      	adds	r2, #8
 800a218:	9f06      	ldr	r7, [sp, #24]
 800a21a:	9d04      	ldr	r5, [sp, #16]
 800a21c:	189a      	adds	r2, r3, r2
 800a21e:	3708      	adds	r7, #8
 800a220:	3508      	adds	r5, #8
 800a222:	9807      	ldr	r0, [sp, #28]
 800a224:	920c      	str	r2, [sp, #48]	; 0x30
 800a226:	199a      	adds	r2, r3, r6
 800a228:	9905      	ldr	r1, [sp, #20]
 800a22a:	3008      	adds	r0, #8
 800a22c:	920b      	str	r2, [sp, #44]	; 0x2c
 800a22e:	19da      	adds	r2, r3, r7
 800a230:	310c      	adds	r1, #12
 800a232:	920a      	str	r2, [sp, #40]	; 0x28
 800a234:	195a      	adds	r2, r3, r5
 800a236:	9209      	str	r2, [sp, #36]	; 0x24
 800a238:	191a      	adds	r2, r3, r4
 800a23a:	9208      	str	r2, [sp, #32]
 800a23c:	181a      	adds	r2, r3, r0
 800a23e:	9207      	str	r2, [sp, #28]
 800a240:	185a      	adds	r2, r3, r1
 800a242:	330c      	adds	r3, #12
 800a244:	9205      	str	r2, [sp, #20]
 800a246:	9306      	str	r3, [sp, #24]
 800a248:	2301      	movs	r3, #1
 800a24a:	9304      	str	r3, [sp, #16]
 800a24c:	2300      	movs	r3, #0
 800a24e:	930d      	str	r3, [sp, #52]	; 0x34
 800a250:	4663      	mov	r3, ip
 800a252:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a254:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a256:	f8dd c014 	ldr.w	ip, [sp, #20]
 800a25a:	440a      	add	r2, r1
 800a25c:	9f06      	ldr	r7, [sp, #24]
 800a25e:	9e07      	ldr	r6, [sp, #28]
 800a260:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800a264:	920d      	str	r2, [sp, #52]	; 0x34
 800a266:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 800a26a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a26c:	9d08      	ldr	r5, [sp, #32]
 800a26e:	4442      	add	r2, r8
 800a270:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a272:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a274:	eb02 0108 	add.w	r1, r2, r8
 800a278:	ed92 ea00 	vldr	s28, [r2]
 800a27c:	eb01 0208 	add.w	r2, r1, r8
 800a280:	edd1 da00 	vldr	s27, [r1]
 800a284:	eb02 0108 	add.w	r1, r2, r8
 800a288:	ed92 da00 	vldr	s26, [r2]
 800a28c:	eb01 0208 	add.w	r2, r1, r8
 800a290:	edd1 ca00 	vldr	s25, [r1]
 800a294:	eb02 0108 	add.w	r1, r2, r8
 800a298:	ed92 ca00 	vldr	s24, [r2]
 800a29c:	eb01 0208 	add.w	r2, r1, r8
 800a2a0:	edd1 ba00 	vldr	s23, [r1]
 800a2a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2a6:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800a2aa:	ed92 ba00 	vldr	s22, [r2]
 800a2ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2b0:	eb0e 0908 	add.w	r9, lr, r8
 800a2b4:	910e      	str	r1, [sp, #56]	; 0x38
 800a2b6:	9201      	str	r2, [sp, #4]
 800a2b8:	eb09 0208 	add.w	r2, r9, r8
 800a2bc:	ed99 aa01 	vldr	s20, [r9, #4]
 800a2c0:	edde aa01 	vldr	s21, [lr, #4]
 800a2c4:	eb02 0908 	add.w	r9, r2, r8
 800a2c8:	edd2 9a01 	vldr	s19, [r2, #4]
 800a2cc:	f8dd e010 	ldr.w	lr, [sp, #16]
 800a2d0:	eb09 0208 	add.w	r2, r9, r8
 800a2d4:	ed99 9a01 	vldr	s18, [r9, #4]
 800a2d8:	eb02 0908 	add.w	r9, r2, r8
 800a2dc:	ed92 8a01 	vldr	s16, [r2, #4]
 800a2e0:	9a01      	ldr	r2, [sp, #4]
 800a2e2:	edd9 7a01 	vldr	s15, [r9, #4]
 800a2e6:	44c8      	add	r8, r9
 800a2e8:	edcd 7a02 	vstr	s15, [sp, #8]
 800a2ec:	edd8 7a01 	vldr	s15, [r8, #4]
 800a2f0:	edcd 7a03 	vstr	s15, [sp, #12]
 800a2f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a2f6:	e001      	b.n	800a2fc <arm_radix8_butterfly_f32+0x300>
 800a2f8:	3f3504f3 	.word	0x3f3504f3
 800a2fc:	ed92 7a00 	vldr	s14, [r2]
 800a300:	44de      	add	lr, fp
 800a302:	ed17 1a01 	vldr	s2, [r7, #-4]
 800a306:	ed90 5a00 	vldr	s10, [r0]
 800a30a:	45f2      	cmp	sl, lr
 800a30c:	ed1c fa01 	vldr	s30, [ip, #-4]
 800a310:	ee31 3a07 	vadd.f32	s6, s2, s14
 800a314:	edd6 5a00 	vldr	s11, [r6]
 800a318:	ee31 1a47 	vsub.f32	s2, s2, s14
 800a31c:	edd4 7a00 	vldr	s15, [r4]
 800a320:	ed95 7a00 	vldr	s14, [r5]
 800a324:	ed91 4a00 	vldr	s8, [r1]
 800a328:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800a32c:	ee77 6a25 	vadd.f32	s13, s14, s11
 800a330:	edd7 ea00 	vldr	s29, [r7]
 800a334:	ee74 fa05 	vadd.f32	s31, s8, s10
 800a338:	ee73 1a06 	vadd.f32	s3, s6, s12
 800a33c:	ee34 4a45 	vsub.f32	s8, s8, s10
 800a340:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800a344:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a348:	ee33 3a46 	vsub.f32	s6, s6, s12
 800a34c:	ee31 6a85 	vadd.f32	s12, s3, s10
 800a350:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800a354:	ee34 fa07 	vadd.f32	s30, s8, s14
 800a358:	ed07 6a01 	vstr	s12, [r7, #-4]
 800a35c:	ee34 4a47 	vsub.f32	s8, s8, s14
 800a360:	edd5 3a01 	vldr	s7, [r5, #4]
 800a364:	ee7f fae6 	vsub.f32	s31, s31, s13
 800a368:	ed90 7a01 	vldr	s14, [r0, #4]
 800a36c:	ee2f fa28 	vmul.f32	s30, s30, s17
 800a370:	edd1 5a01 	vldr	s11, [r1, #4]
 800a374:	ee24 4a28 	vmul.f32	s8, s8, s17
 800a378:	ed96 6a01 	vldr	s12, [r6, #4]
 800a37c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800a380:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800a384:	edd2 6a01 	vldr	s13, [r2, #4]
 800a388:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800a38c:	edd4 4a01 	vldr	s9, [r4, #4]
 800a390:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a394:	ed9c 7a00 	vldr	s14, [ip]
 800a398:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800a39c:	ee33 6a86 	vadd.f32	s12, s7, s12
 800a3a0:	ee37 facf 	vsub.f32	s30, s15, s30
 800a3a4:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800a3a8:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800a3ac:	ee7e eae6 	vsub.f32	s29, s29, s13
 800a3b0:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800a3b4:	ee77 6a24 	vadd.f32	s13, s14, s9
 800a3b8:	ee75 0a86 	vadd.f32	s1, s11, s12
 800a3bc:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a3c0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800a3c4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800a3c8:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800a3cc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a3d0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800a3d4:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800a3d8:	ee77 4a22 	vadd.f32	s9, s14, s5
 800a3dc:	ee7e eae7 	vsub.f32	s29, s29, s15
 800a3e0:	ee77 7a62 	vsub.f32	s15, s14, s5
 800a3e4:	ee71 2a04 	vadd.f32	s5, s2, s8
 800a3e8:	ee31 7a44 	vsub.f32	s14, s2, s8
 800a3ec:	ee30 1a60 	vsub.f32	s2, s0, s1
 800a3f0:	ee73 1a06 	vadd.f32	s3, s6, s12
 800a3f4:	ee33 6a46 	vsub.f32	s12, s6, s12
 800a3f8:	ee33 3aef 	vsub.f32	s6, s7, s31
 800a3fc:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800a400:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800a404:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800a408:	ee72 5a25 	vadd.f32	s11, s4, s11
 800a40c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800a410:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800a414:	ee77 2a27 	vadd.f32	s5, s14, s15
 800a418:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a41c:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800a420:	ee2c fa85 	vmul.f32	s30, s25, s10
 800a424:	ee69 ea01 	vmul.f32	s29, s18, s2
 800a428:	ee29 5a05 	vmul.f32	s10, s18, s10
 800a42c:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800a430:	ee6d faa1 	vmul.f32	s31, s27, s3
 800a434:	ee70 0a20 	vadd.f32	s1, s0, s1
 800a438:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800a43c:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800a440:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800a444:	edc7 0a00 	vstr	s1, [r7]
 800a448:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800a44c:	441f      	add	r7, r3
 800a44e:	ee2a faa3 	vmul.f32	s30, s21, s7
 800a452:	ee31 5a45 	vsub.f32	s10, s2, s10
 800a456:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800a45a:	edc2 ea00 	vstr	s29, [r2]
 800a45e:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800a462:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a466:	ed82 5a01 	vstr	s10, [r2, #4]
 800a46a:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800a46e:	edcd 3a01 	vstr	s7, [sp, #4]
 800a472:	ed9d 5a03 	vldr	s10, [sp, #12]
 800a476:	ee6b ea86 	vmul.f32	s29, s23, s12
 800a47a:	eddd 3a02 	vldr	s7, [sp, #8]
 800a47e:	ee6b fa24 	vmul.f32	s31, s22, s9
 800a482:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800a486:	ee65 4a24 	vmul.f32	s9, s10, s9
 800a48a:	ed8c 3a00 	vstr	s6, [ip]
 800a48e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800a492:	ee23 6a86 	vmul.f32	s12, s7, s12
 800a496:	eddd 3a01 	vldr	s7, [sp, #4]
 800a49a:	ee25 5a25 	vmul.f32	s10, s10, s11
 800a49e:	441a      	add	r2, r3
 800a4a0:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800a4a4:	449c      	add	ip, r3
 800a4a6:	ee68 1a04 	vmul.f32	s3, s16, s8
 800a4aa:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800a4ae:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800a4b2:	ee29 faa7 	vmul.f32	s30, s19, s15
 800a4b6:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800a4ba:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800a4be:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800a4c2:	ee68 2a22 	vmul.f32	s5, s16, s5
 800a4c6:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800a4ca:	ee29 7a87 	vmul.f32	s14, s19, s14
 800a4ce:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800a4d2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800a4d6:	ee7e ea81 	vadd.f32	s29, s29, s2
 800a4da:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800a4de:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800a4e2:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800a4e6:	edc4 ea00 	vstr	s29, [r4]
 800a4ea:	ee30 0a21 	vadd.f32	s0, s0, s3
 800a4ee:	ed84 6a01 	vstr	s12, [r4, #4]
 800a4f2:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a4f6:	edc1 0a00 	vstr	s1, [r1]
 800a4fa:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800a4fe:	edc1 3a01 	vstr	s7, [r1, #4]
 800a502:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a506:	ed86 5a00 	vstr	s10, [r6]
 800a50a:	edc6 4a01 	vstr	s9, [r6, #4]
 800a50e:	4419      	add	r1, r3
 800a510:	ed80 0a00 	vstr	s0, [r0]
 800a514:	441c      	add	r4, r3
 800a516:	edc0 2a01 	vstr	s5, [r0, #4]
 800a51a:	441e      	add	r6, r3
 800a51c:	ed85 3a00 	vstr	s6, [r5]
 800a520:	4418      	add	r0, r3
 800a522:	ed85 7a01 	vstr	s14, [r5, #4]
 800a526:	441d      	add	r5, r3
 800a528:	f63f aee8 	bhi.w	800a2fc <arm_radix8_butterfly_f32+0x300>
 800a52c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a52e:	9a04      	ldr	r2, [sp, #16]
 800a530:	3108      	adds	r1, #8
 800a532:	3201      	adds	r2, #1
 800a534:	910c      	str	r1, [sp, #48]	; 0x30
 800a536:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a538:	9204      	str	r2, [sp, #16]
 800a53a:	3108      	adds	r1, #8
 800a53c:	910b      	str	r1, [sp, #44]	; 0x2c
 800a53e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a540:	3108      	adds	r1, #8
 800a542:	910a      	str	r1, [sp, #40]	; 0x28
 800a544:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a546:	3108      	adds	r1, #8
 800a548:	9109      	str	r1, [sp, #36]	; 0x24
 800a54a:	9908      	ldr	r1, [sp, #32]
 800a54c:	3108      	adds	r1, #8
 800a54e:	9108      	str	r1, [sp, #32]
 800a550:	9907      	ldr	r1, [sp, #28]
 800a552:	3108      	adds	r1, #8
 800a554:	9107      	str	r1, [sp, #28]
 800a556:	9906      	ldr	r1, [sp, #24]
 800a558:	3108      	adds	r1, #8
 800a55a:	9106      	str	r1, [sp, #24]
 800a55c:	9905      	ldr	r1, [sp, #20]
 800a55e:	3108      	adds	r1, #8
 800a560:	9105      	str	r1, [sp, #20]
 800a562:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a564:	4291      	cmp	r1, r2
 800a566:	f47f ae74 	bne.w	800a252 <arm_radix8_butterfly_f32+0x256>
 800a56a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a56c:	468b      	mov	fp, r1
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	b29b      	uxth	r3, r3
 800a572:	9310      	str	r3, [sp, #64]	; 0x40
 800a574:	e551      	b.n	800a01a <arm_radix8_butterfly_f32+0x1e>
 800a576:	b015      	add	sp, #84	; 0x54
 800a578:	ecbd 8b10 	vpop	{d8-d15}
 800a57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a580 <fmin>:
 800a580:	b508      	push	{r3, lr}
 800a582:	ed2d 8b04 	vpush	{d8-d9}
 800a586:	eeb0 8a40 	vmov.f32	s16, s0
 800a58a:	eef0 8a60 	vmov.f32	s17, s1
 800a58e:	eeb0 9a41 	vmov.f32	s18, s2
 800a592:	eef0 9a61 	vmov.f32	s19, s3
 800a596:	f000 f81b 	bl	800a5d0 <__fpclassifyd>
 800a59a:	b168      	cbz	r0, 800a5b8 <fmin+0x38>
 800a59c:	eeb0 0a49 	vmov.f32	s0, s18
 800a5a0:	eef0 0a69 	vmov.f32	s1, s19
 800a5a4:	f000 f814 	bl	800a5d0 <__fpclassifyd>
 800a5a8:	b150      	cbz	r0, 800a5c0 <fmin+0x40>
 800a5aa:	ec53 2b19 	vmov	r2, r3, d9
 800a5ae:	ec51 0b18 	vmov	r0, r1, d8
 800a5b2:	f7f6 fa77 	bl	8000aa4 <__aeabi_dcmplt>
 800a5b6:	b918      	cbnz	r0, 800a5c0 <fmin+0x40>
 800a5b8:	eeb0 8a49 	vmov.f32	s16, s18
 800a5bc:	eef0 8a69 	vmov.f32	s17, s19
 800a5c0:	eeb0 0a48 	vmov.f32	s0, s16
 800a5c4:	eef0 0a68 	vmov.f32	s1, s17
 800a5c8:	ecbd 8b04 	vpop	{d8-d9}
 800a5cc:	bd08      	pop	{r3, pc}
	...

0800a5d0 <__fpclassifyd>:
 800a5d0:	ec51 0b10 	vmov	r0, r1, d0
 800a5d4:	b510      	push	{r4, lr}
 800a5d6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800a5da:	460b      	mov	r3, r1
 800a5dc:	d019      	beq.n	800a612 <__fpclassifyd+0x42>
 800a5de:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800a5e2:	490e      	ldr	r1, [pc, #56]	; (800a61c <__fpclassifyd+0x4c>)
 800a5e4:	428a      	cmp	r2, r1
 800a5e6:	d90e      	bls.n	800a606 <__fpclassifyd+0x36>
 800a5e8:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800a5ec:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800a5f0:	428a      	cmp	r2, r1
 800a5f2:	d908      	bls.n	800a606 <__fpclassifyd+0x36>
 800a5f4:	4a0a      	ldr	r2, [pc, #40]	; (800a620 <__fpclassifyd+0x50>)
 800a5f6:	4213      	tst	r3, r2
 800a5f8:	d007      	beq.n	800a60a <__fpclassifyd+0x3a>
 800a5fa:	4294      	cmp	r4, r2
 800a5fc:	d107      	bne.n	800a60e <__fpclassifyd+0x3e>
 800a5fe:	fab0 f080 	clz	r0, r0
 800a602:	0940      	lsrs	r0, r0, #5
 800a604:	bd10      	pop	{r4, pc}
 800a606:	2004      	movs	r0, #4
 800a608:	e7fc      	b.n	800a604 <__fpclassifyd+0x34>
 800a60a:	2003      	movs	r0, #3
 800a60c:	e7fa      	b.n	800a604 <__fpclassifyd+0x34>
 800a60e:	2000      	movs	r0, #0
 800a610:	e7f8      	b.n	800a604 <__fpclassifyd+0x34>
 800a612:	2800      	cmp	r0, #0
 800a614:	d1ee      	bne.n	800a5f4 <__fpclassifyd+0x24>
 800a616:	2002      	movs	r0, #2
 800a618:	e7f4      	b.n	800a604 <__fpclassifyd+0x34>
 800a61a:	bf00      	nop
 800a61c:	7fdfffff 	.word	0x7fdfffff
 800a620:	7ff00000 	.word	0x7ff00000

0800a624 <sqrtf>:
 800a624:	b508      	push	{r3, lr}
 800a626:	ed2d 8b02 	vpush	{d8}
 800a62a:	eeb0 8a40 	vmov.f32	s16, s0
 800a62e:	f000 f81f 	bl	800a670 <__ieee754_sqrtf>
 800a632:	4b0d      	ldr	r3, [pc, #52]	; (800a668 <sqrtf+0x44>)
 800a634:	f993 3000 	ldrsb.w	r3, [r3]
 800a638:	3301      	adds	r3, #1
 800a63a:	d011      	beq.n	800a660 <sqrtf+0x3c>
 800a63c:	eeb4 8a48 	vcmp.f32	s16, s16
 800a640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a644:	d60c      	bvs.n	800a660 <sqrtf+0x3c>
 800a646:	eddf 8a09 	vldr	s17, [pc, #36]	; 800a66c <sqrtf+0x48>
 800a64a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a652:	d505      	bpl.n	800a660 <sqrtf+0x3c>
 800a654:	f000 f810 	bl	800a678 <__errno>
 800a658:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a65c:	2321      	movs	r3, #33	; 0x21
 800a65e:	6003      	str	r3, [r0, #0]
 800a660:	ecbd 8b02 	vpop	{d8}
 800a664:	bd08      	pop	{r3, pc}
 800a666:	bf00      	nop
 800a668:	20000015 	.word	0x20000015
 800a66c:	00000000 	.word	0x00000000

0800a670 <__ieee754_sqrtf>:
 800a670:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a674:	4770      	bx	lr
	...

0800a678 <__errno>:
 800a678:	4b01      	ldr	r3, [pc, #4]	; (800a680 <__errno+0x8>)
 800a67a:	6818      	ldr	r0, [r3, #0]
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	20000018 	.word	0x20000018

0800a684 <__libc_init_array>:
 800a684:	b570      	push	{r4, r5, r6, lr}
 800a686:	4d0d      	ldr	r5, [pc, #52]	; (800a6bc <__libc_init_array+0x38>)
 800a688:	2600      	movs	r6, #0
 800a68a:	4c0d      	ldr	r4, [pc, #52]	; (800a6c0 <__libc_init_array+0x3c>)
 800a68c:	1b64      	subs	r4, r4, r5
 800a68e:	10a4      	asrs	r4, r4, #2
 800a690:	42a6      	cmp	r6, r4
 800a692:	d109      	bne.n	800a6a8 <__libc_init_array+0x24>
 800a694:	4d0b      	ldr	r5, [pc, #44]	; (800a6c4 <__libc_init_array+0x40>)
 800a696:	2600      	movs	r6, #0
 800a698:	4c0b      	ldr	r4, [pc, #44]	; (800a6c8 <__libc_init_array+0x44>)
 800a69a:	f002 fecd 	bl	800d438 <_init>
 800a69e:	1b64      	subs	r4, r4, r5
 800a6a0:	10a4      	asrs	r4, r4, #2
 800a6a2:	42a6      	cmp	r6, r4
 800a6a4:	d105      	bne.n	800a6b2 <__libc_init_array+0x2e>
 800a6a6:	bd70      	pop	{r4, r5, r6, pc}
 800a6a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ac:	3601      	adds	r6, #1
 800a6ae:	4798      	blx	r3
 800a6b0:	e7ee      	b.n	800a690 <__libc_init_array+0xc>
 800a6b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b6:	3601      	adds	r6, #1
 800a6b8:	4798      	blx	r3
 800a6ba:	e7f2      	b.n	800a6a2 <__libc_init_array+0x1e>
 800a6bc:	0802092c 	.word	0x0802092c
 800a6c0:	0802092c 	.word	0x0802092c
 800a6c4:	0802092c 	.word	0x0802092c
 800a6c8:	08020930 	.word	0x08020930

0800a6cc <memset>:
 800a6cc:	4402      	add	r2, r0
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d100      	bne.n	800a6d6 <memset+0xa>
 800a6d4:	4770      	bx	lr
 800a6d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a6da:	e7f9      	b.n	800a6d0 <memset+0x4>

0800a6dc <__cvt>:
 800a6dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e0:	ec55 4b10 	vmov	r4, r5, d0
 800a6e4:	2d00      	cmp	r5, #0
 800a6e6:	460e      	mov	r6, r1
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	462b      	mov	r3, r5
 800a6ec:	bfb4      	ite	lt
 800a6ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a6f2:	2300      	movge	r3, #0
 800a6f4:	4691      	mov	r9, r2
 800a6f6:	bfbf      	itttt	lt
 800a6f8:	4622      	movlt	r2, r4
 800a6fa:	461d      	movlt	r5, r3
 800a6fc:	232d      	movlt	r3, #45	; 0x2d
 800a6fe:	4614      	movlt	r4, r2
 800a700:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a704:	700b      	strb	r3, [r1, #0]
 800a706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a708:	f023 0820 	bic.w	r8, r3, #32
 800a70c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a710:	d005      	beq.n	800a71e <__cvt+0x42>
 800a712:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a716:	d100      	bne.n	800a71a <__cvt+0x3e>
 800a718:	3601      	adds	r6, #1
 800a71a:	2102      	movs	r1, #2
 800a71c:	e000      	b.n	800a720 <__cvt+0x44>
 800a71e:	2103      	movs	r1, #3
 800a720:	ab03      	add	r3, sp, #12
 800a722:	4632      	mov	r2, r6
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	ab02      	add	r3, sp, #8
 800a728:	ec45 4b10 	vmov	d0, r4, r5
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	4653      	mov	r3, sl
 800a730:	f000 fcf2 	bl	800b118 <_dtoa_r>
 800a734:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a738:	4607      	mov	r7, r0
 800a73a:	d102      	bne.n	800a742 <__cvt+0x66>
 800a73c:	f019 0f01 	tst.w	r9, #1
 800a740:	d022      	beq.n	800a788 <__cvt+0xac>
 800a742:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a746:	eb07 0906 	add.w	r9, r7, r6
 800a74a:	d110      	bne.n	800a76e <__cvt+0x92>
 800a74c:	783b      	ldrb	r3, [r7, #0]
 800a74e:	2b30      	cmp	r3, #48	; 0x30
 800a750:	d10a      	bne.n	800a768 <__cvt+0x8c>
 800a752:	2200      	movs	r2, #0
 800a754:	2300      	movs	r3, #0
 800a756:	4620      	mov	r0, r4
 800a758:	4629      	mov	r1, r5
 800a75a:	f7f6 f999 	bl	8000a90 <__aeabi_dcmpeq>
 800a75e:	b918      	cbnz	r0, 800a768 <__cvt+0x8c>
 800a760:	f1c6 0601 	rsb	r6, r6, #1
 800a764:	f8ca 6000 	str.w	r6, [sl]
 800a768:	f8da 3000 	ldr.w	r3, [sl]
 800a76c:	4499      	add	r9, r3
 800a76e:	2200      	movs	r2, #0
 800a770:	2300      	movs	r3, #0
 800a772:	4620      	mov	r0, r4
 800a774:	4629      	mov	r1, r5
 800a776:	f7f6 f98b 	bl	8000a90 <__aeabi_dcmpeq>
 800a77a:	b108      	cbz	r0, 800a780 <__cvt+0xa4>
 800a77c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a780:	2230      	movs	r2, #48	; 0x30
 800a782:	9b03      	ldr	r3, [sp, #12]
 800a784:	454b      	cmp	r3, r9
 800a786:	d307      	bcc.n	800a798 <__cvt+0xbc>
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	4638      	mov	r0, r7
 800a78c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a78e:	1bdb      	subs	r3, r3, r7
 800a790:	6013      	str	r3, [r2, #0]
 800a792:	b004      	add	sp, #16
 800a794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a798:	1c59      	adds	r1, r3, #1
 800a79a:	9103      	str	r1, [sp, #12]
 800a79c:	701a      	strb	r2, [r3, #0]
 800a79e:	e7f0      	b.n	800a782 <__cvt+0xa6>

0800a7a0 <__exponent>:
 800a7a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7a2:	2900      	cmp	r1, #0
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	bfb8      	it	lt
 800a7a8:	4249      	neglt	r1, r1
 800a7aa:	f803 2b02 	strb.w	r2, [r3], #2
 800a7ae:	bfb4      	ite	lt
 800a7b0:	222d      	movlt	r2, #45	; 0x2d
 800a7b2:	222b      	movge	r2, #43	; 0x2b
 800a7b4:	2909      	cmp	r1, #9
 800a7b6:	7042      	strb	r2, [r0, #1]
 800a7b8:	dd2a      	ble.n	800a810 <__exponent+0x70>
 800a7ba:	f10d 0407 	add.w	r4, sp, #7
 800a7be:	270a      	movs	r7, #10
 800a7c0:	46a4      	mov	ip, r4
 800a7c2:	460a      	mov	r2, r1
 800a7c4:	46a6      	mov	lr, r4
 800a7c6:	3c01      	subs	r4, #1
 800a7c8:	2a63      	cmp	r2, #99	; 0x63
 800a7ca:	fb91 f6f7 	sdiv	r6, r1, r7
 800a7ce:	fb07 1516 	mls	r5, r7, r6, r1
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a7d8:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a7dc:	dcf1      	bgt.n	800a7c2 <__exponent+0x22>
 800a7de:	3130      	adds	r1, #48	; 0x30
 800a7e0:	f1ae 0502 	sub.w	r5, lr, #2
 800a7e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a7e8:	1c44      	adds	r4, r0, #1
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	4561      	cmp	r1, ip
 800a7ee:	d30a      	bcc.n	800a806 <__exponent+0x66>
 800a7f0:	f10d 0209 	add.w	r2, sp, #9
 800a7f4:	eba2 020e 	sub.w	r2, r2, lr
 800a7f8:	4565      	cmp	r5, ip
 800a7fa:	bf88      	it	hi
 800a7fc:	2200      	movhi	r2, #0
 800a7fe:	4413      	add	r3, r2
 800a800:	1a18      	subs	r0, r3, r0
 800a802:	b003      	add	sp, #12
 800a804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a80a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a80e:	e7ed      	b.n	800a7ec <__exponent+0x4c>
 800a810:	2330      	movs	r3, #48	; 0x30
 800a812:	3130      	adds	r1, #48	; 0x30
 800a814:	7083      	strb	r3, [r0, #2]
 800a816:	1d03      	adds	r3, r0, #4
 800a818:	70c1      	strb	r1, [r0, #3]
 800a81a:	e7f1      	b.n	800a800 <__exponent+0x60>

0800a81c <_printf_float>:
 800a81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a820:	ed2d 8b02 	vpush	{d8}
 800a824:	b08d      	sub	sp, #52	; 0x34
 800a826:	460c      	mov	r4, r1
 800a828:	4616      	mov	r6, r2
 800a82a:	461f      	mov	r7, r3
 800a82c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a830:	4605      	mov	r5, r0
 800a832:	f001 fa5b 	bl	800bcec <_localeconv_r>
 800a836:	f8d0 a000 	ldr.w	sl, [r0]
 800a83a:	4650      	mov	r0, sl
 800a83c:	f7f5 fcfc 	bl	8000238 <strlen>
 800a840:	2300      	movs	r3, #0
 800a842:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a846:	ee08 0a10 	vmov	s16, r0
 800a84a:	930a      	str	r3, [sp, #40]	; 0x28
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	9305      	str	r3, [sp, #20]
 800a850:	f8d8 3000 	ldr.w	r3, [r8]
 800a854:	3307      	adds	r3, #7
 800a856:	f023 0307 	bic.w	r3, r3, #7
 800a85a:	f103 0208 	add.w	r2, r3, #8
 800a85e:	f8c8 2000 	str.w	r2, [r8]
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a86a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a86e:	f04f 32ff 	mov.w	r2, #4294967295
 800a872:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a876:	f8cd 8018 	str.w	r8, [sp, #24]
 800a87a:	9307      	str	r3, [sp, #28]
 800a87c:	4b9e      	ldr	r3, [pc, #632]	; (800aaf8 <_printf_float+0x2dc>)
 800a87e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a882:	f7f6 f937 	bl	8000af4 <__aeabi_dcmpun>
 800a886:	bb88      	cbnz	r0, 800a8ec <_printf_float+0xd0>
 800a888:	f04f 32ff 	mov.w	r2, #4294967295
 800a88c:	4b9a      	ldr	r3, [pc, #616]	; (800aaf8 <_printf_float+0x2dc>)
 800a88e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a892:	f7f6 f911 	bl	8000ab8 <__aeabi_dcmple>
 800a896:	bb48      	cbnz	r0, 800a8ec <_printf_float+0xd0>
 800a898:	2200      	movs	r2, #0
 800a89a:	2300      	movs	r3, #0
 800a89c:	4640      	mov	r0, r8
 800a89e:	4649      	mov	r1, r9
 800a8a0:	f7f6 f900 	bl	8000aa4 <__aeabi_dcmplt>
 800a8a4:	b110      	cbz	r0, 800a8ac <_printf_float+0x90>
 800a8a6:	232d      	movs	r3, #45	; 0x2d
 800a8a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8ac:	4b93      	ldr	r3, [pc, #588]	; (800aafc <_printf_float+0x2e0>)
 800a8ae:	4894      	ldr	r0, [pc, #592]	; (800ab00 <_printf_float+0x2e4>)
 800a8b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a8b4:	bf94      	ite	ls
 800a8b6:	4698      	movls	r8, r3
 800a8b8:	4680      	movhi	r8, r0
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	f04f 0900 	mov.w	r9, #0
 800a8c0:	6123      	str	r3, [r4, #16]
 800a8c2:	9b05      	ldr	r3, [sp, #20]
 800a8c4:	f023 0204 	bic.w	r2, r3, #4
 800a8c8:	6022      	str	r2, [r4, #0]
 800a8ca:	4633      	mov	r3, r6
 800a8cc:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8ce:	4621      	mov	r1, r4
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	9700      	str	r7, [sp, #0]
 800a8d4:	f000 f9d8 	bl	800ac88 <_printf_common>
 800a8d8:	3001      	adds	r0, #1
 800a8da:	f040 8090 	bne.w	800a9fe <_printf_float+0x1e2>
 800a8de:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e2:	b00d      	add	sp, #52	; 0x34
 800a8e4:	ecbd 8b02 	vpop	{d8}
 800a8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ec:	4642      	mov	r2, r8
 800a8ee:	464b      	mov	r3, r9
 800a8f0:	4640      	mov	r0, r8
 800a8f2:	4649      	mov	r1, r9
 800a8f4:	f7f6 f8fe 	bl	8000af4 <__aeabi_dcmpun>
 800a8f8:	b140      	cbz	r0, 800a90c <_printf_float+0xf0>
 800a8fa:	464b      	mov	r3, r9
 800a8fc:	4881      	ldr	r0, [pc, #516]	; (800ab04 <_printf_float+0x2e8>)
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	bfbc      	itt	lt
 800a902:	232d      	movlt	r3, #45	; 0x2d
 800a904:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a908:	4b7f      	ldr	r3, [pc, #508]	; (800ab08 <_printf_float+0x2ec>)
 800a90a:	e7d1      	b.n	800a8b0 <_printf_float+0x94>
 800a90c:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a910:	6863      	ldr	r3, [r4, #4]
 800a912:	9206      	str	r2, [sp, #24]
 800a914:	1c5a      	adds	r2, r3, #1
 800a916:	d13f      	bne.n	800a998 <_printf_float+0x17c>
 800a918:	2306      	movs	r3, #6
 800a91a:	6063      	str	r3, [r4, #4]
 800a91c:	9b05      	ldr	r3, [sp, #20]
 800a91e:	4628      	mov	r0, r5
 800a920:	6861      	ldr	r1, [r4, #4]
 800a922:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a926:	2300      	movs	r3, #0
 800a928:	9303      	str	r3, [sp, #12]
 800a92a:	ab0a      	add	r3, sp, #40	; 0x28
 800a92c:	6022      	str	r2, [r4, #0]
 800a92e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a932:	ab09      	add	r3, sp, #36	; 0x24
 800a934:	ec49 8b10 	vmov	d0, r8, r9
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a93e:	f7ff fecd 	bl	800a6dc <__cvt>
 800a942:	9b06      	ldr	r3, [sp, #24]
 800a944:	4680      	mov	r8, r0
 800a946:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a948:	2b47      	cmp	r3, #71	; 0x47
 800a94a:	d108      	bne.n	800a95e <_printf_float+0x142>
 800a94c:	1cc8      	adds	r0, r1, #3
 800a94e:	db02      	blt.n	800a956 <_printf_float+0x13a>
 800a950:	6863      	ldr	r3, [r4, #4]
 800a952:	4299      	cmp	r1, r3
 800a954:	dd41      	ble.n	800a9da <_printf_float+0x1be>
 800a956:	f1ab 0b02 	sub.w	fp, fp, #2
 800a95a:	fa5f fb8b 	uxtb.w	fp, fp
 800a95e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a962:	d820      	bhi.n	800a9a6 <_printf_float+0x18a>
 800a964:	3901      	subs	r1, #1
 800a966:	465a      	mov	r2, fp
 800a968:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a96c:	9109      	str	r1, [sp, #36]	; 0x24
 800a96e:	f7ff ff17 	bl	800a7a0 <__exponent>
 800a972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a974:	4681      	mov	r9, r0
 800a976:	1813      	adds	r3, r2, r0
 800a978:	2a01      	cmp	r2, #1
 800a97a:	6123      	str	r3, [r4, #16]
 800a97c:	dc02      	bgt.n	800a984 <_printf_float+0x168>
 800a97e:	6822      	ldr	r2, [r4, #0]
 800a980:	07d2      	lsls	r2, r2, #31
 800a982:	d501      	bpl.n	800a988 <_printf_float+0x16c>
 800a984:	3301      	adds	r3, #1
 800a986:	6123      	str	r3, [r4, #16]
 800a988:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d09c      	beq.n	800a8ca <_printf_float+0xae>
 800a990:	232d      	movs	r3, #45	; 0x2d
 800a992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a996:	e798      	b.n	800a8ca <_printf_float+0xae>
 800a998:	9a06      	ldr	r2, [sp, #24]
 800a99a:	2a47      	cmp	r2, #71	; 0x47
 800a99c:	d1be      	bne.n	800a91c <_printf_float+0x100>
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1bc      	bne.n	800a91c <_printf_float+0x100>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e7b9      	b.n	800a91a <_printf_float+0xfe>
 800a9a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a9aa:	d118      	bne.n	800a9de <_printf_float+0x1c2>
 800a9ac:	2900      	cmp	r1, #0
 800a9ae:	6863      	ldr	r3, [r4, #4]
 800a9b0:	dd0b      	ble.n	800a9ca <_printf_float+0x1ae>
 800a9b2:	6121      	str	r1, [r4, #16]
 800a9b4:	b913      	cbnz	r3, 800a9bc <_printf_float+0x1a0>
 800a9b6:	6822      	ldr	r2, [r4, #0]
 800a9b8:	07d0      	lsls	r0, r2, #31
 800a9ba:	d502      	bpl.n	800a9c2 <_printf_float+0x1a6>
 800a9bc:	3301      	adds	r3, #1
 800a9be:	440b      	add	r3, r1
 800a9c0:	6123      	str	r3, [r4, #16]
 800a9c2:	f04f 0900 	mov.w	r9, #0
 800a9c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9c8:	e7de      	b.n	800a988 <_printf_float+0x16c>
 800a9ca:	b913      	cbnz	r3, 800a9d2 <_printf_float+0x1b6>
 800a9cc:	6822      	ldr	r2, [r4, #0]
 800a9ce:	07d2      	lsls	r2, r2, #31
 800a9d0:	d501      	bpl.n	800a9d6 <_printf_float+0x1ba>
 800a9d2:	3302      	adds	r3, #2
 800a9d4:	e7f4      	b.n	800a9c0 <_printf_float+0x1a4>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e7f2      	b.n	800a9c0 <_printf_float+0x1a4>
 800a9da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9e0:	4299      	cmp	r1, r3
 800a9e2:	db05      	blt.n	800a9f0 <_printf_float+0x1d4>
 800a9e4:	6823      	ldr	r3, [r4, #0]
 800a9e6:	6121      	str	r1, [r4, #16]
 800a9e8:	07d8      	lsls	r0, r3, #31
 800a9ea:	d5ea      	bpl.n	800a9c2 <_printf_float+0x1a6>
 800a9ec:	1c4b      	adds	r3, r1, #1
 800a9ee:	e7e7      	b.n	800a9c0 <_printf_float+0x1a4>
 800a9f0:	2900      	cmp	r1, #0
 800a9f2:	bfd4      	ite	le
 800a9f4:	f1c1 0202 	rsble	r2, r1, #2
 800a9f8:	2201      	movgt	r2, #1
 800a9fa:	4413      	add	r3, r2
 800a9fc:	e7e0      	b.n	800a9c0 <_printf_float+0x1a4>
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	055a      	lsls	r2, r3, #21
 800aa02:	d407      	bmi.n	800aa14 <_printf_float+0x1f8>
 800aa04:	6923      	ldr	r3, [r4, #16]
 800aa06:	4642      	mov	r2, r8
 800aa08:	4631      	mov	r1, r6
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	47b8      	blx	r7
 800aa0e:	3001      	adds	r0, #1
 800aa10:	d12c      	bne.n	800aa6c <_printf_float+0x250>
 800aa12:	e764      	b.n	800a8de <_printf_float+0xc2>
 800aa14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa18:	f240 80e0 	bls.w	800abdc <_printf_float+0x3c0>
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	2300      	movs	r3, #0
 800aa20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa24:	f7f6 f834 	bl	8000a90 <__aeabi_dcmpeq>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d034      	beq.n	800aa96 <_printf_float+0x27a>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	4a37      	ldr	r2, [pc, #220]	; (800ab0c <_printf_float+0x2f0>)
 800aa30:	4631      	mov	r1, r6
 800aa32:	4628      	mov	r0, r5
 800aa34:	47b8      	blx	r7
 800aa36:	3001      	adds	r0, #1
 800aa38:	f43f af51 	beq.w	800a8de <_printf_float+0xc2>
 800aa3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa40:	429a      	cmp	r2, r3
 800aa42:	db02      	blt.n	800aa4a <_printf_float+0x22e>
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	07d8      	lsls	r0, r3, #31
 800aa48:	d510      	bpl.n	800aa6c <_printf_float+0x250>
 800aa4a:	ee18 3a10 	vmov	r3, s16
 800aa4e:	4652      	mov	r2, sl
 800aa50:	4631      	mov	r1, r6
 800aa52:	4628      	mov	r0, r5
 800aa54:	47b8      	blx	r7
 800aa56:	3001      	adds	r0, #1
 800aa58:	f43f af41 	beq.w	800a8de <_printf_float+0xc2>
 800aa5c:	f04f 0800 	mov.w	r8, #0
 800aa60:	f104 091a 	add.w	r9, r4, #26
 800aa64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa66:	3b01      	subs	r3, #1
 800aa68:	4543      	cmp	r3, r8
 800aa6a:	dc09      	bgt.n	800aa80 <_printf_float+0x264>
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	079b      	lsls	r3, r3, #30
 800aa70:	f100 8105 	bmi.w	800ac7e <_printf_float+0x462>
 800aa74:	68e0      	ldr	r0, [r4, #12]
 800aa76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa78:	4298      	cmp	r0, r3
 800aa7a:	bfb8      	it	lt
 800aa7c:	4618      	movlt	r0, r3
 800aa7e:	e730      	b.n	800a8e2 <_printf_float+0xc6>
 800aa80:	2301      	movs	r3, #1
 800aa82:	464a      	mov	r2, r9
 800aa84:	4631      	mov	r1, r6
 800aa86:	4628      	mov	r0, r5
 800aa88:	47b8      	blx	r7
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	f43f af27 	beq.w	800a8de <_printf_float+0xc2>
 800aa90:	f108 0801 	add.w	r8, r8, #1
 800aa94:	e7e6      	b.n	800aa64 <_printf_float+0x248>
 800aa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	dc39      	bgt.n	800ab10 <_printf_float+0x2f4>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	4a1b      	ldr	r2, [pc, #108]	; (800ab0c <_printf_float+0x2f0>)
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	47b8      	blx	r7
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	f43f af19 	beq.w	800a8de <_printf_float+0xc2>
 800aaac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aab0:	4313      	orrs	r3, r2
 800aab2:	d102      	bne.n	800aaba <_printf_float+0x29e>
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	07d9      	lsls	r1, r3, #31
 800aab8:	d5d8      	bpl.n	800aa6c <_printf_float+0x250>
 800aaba:	ee18 3a10 	vmov	r3, s16
 800aabe:	4652      	mov	r2, sl
 800aac0:	4631      	mov	r1, r6
 800aac2:	4628      	mov	r0, r5
 800aac4:	47b8      	blx	r7
 800aac6:	3001      	adds	r0, #1
 800aac8:	f43f af09 	beq.w	800a8de <_printf_float+0xc2>
 800aacc:	f04f 0900 	mov.w	r9, #0
 800aad0:	f104 0a1a 	add.w	sl, r4, #26
 800aad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad6:	425b      	negs	r3, r3
 800aad8:	454b      	cmp	r3, r9
 800aada:	dc01      	bgt.n	800aae0 <_printf_float+0x2c4>
 800aadc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aade:	e792      	b.n	800aa06 <_printf_float+0x1ea>
 800aae0:	2301      	movs	r3, #1
 800aae2:	4652      	mov	r2, sl
 800aae4:	4631      	mov	r1, r6
 800aae6:	4628      	mov	r0, r5
 800aae8:	47b8      	blx	r7
 800aaea:	3001      	adds	r0, #1
 800aaec:	f43f aef7 	beq.w	800a8de <_printf_float+0xc2>
 800aaf0:	f109 0901 	add.w	r9, r9, #1
 800aaf4:	e7ee      	b.n	800aad4 <_printf_float+0x2b8>
 800aaf6:	bf00      	nop
 800aaf8:	7fefffff 	.word	0x7fefffff
 800aafc:	08020548 	.word	0x08020548
 800ab00:	0802054c 	.word	0x0802054c
 800ab04:	08020554 	.word	0x08020554
 800ab08:	08020550 	.word	0x08020550
 800ab0c:	08020558 	.word	0x08020558
 800ab10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab14:	429a      	cmp	r2, r3
 800ab16:	bfa8      	it	ge
 800ab18:	461a      	movge	r2, r3
 800ab1a:	2a00      	cmp	r2, #0
 800ab1c:	4691      	mov	r9, r2
 800ab1e:	dc37      	bgt.n	800ab90 <_printf_float+0x374>
 800ab20:	f04f 0b00 	mov.w	fp, #0
 800ab24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab28:	f104 021a 	add.w	r2, r4, #26
 800ab2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab2e:	9305      	str	r3, [sp, #20]
 800ab30:	eba3 0309 	sub.w	r3, r3, r9
 800ab34:	455b      	cmp	r3, fp
 800ab36:	dc33      	bgt.n	800aba0 <_printf_float+0x384>
 800ab38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	db3b      	blt.n	800abb8 <_printf_float+0x39c>
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	07da      	lsls	r2, r3, #31
 800ab44:	d438      	bmi.n	800abb8 <_printf_float+0x39c>
 800ab46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab48:	9b05      	ldr	r3, [sp, #20]
 800ab4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab4c:	1ad3      	subs	r3, r2, r3
 800ab4e:	eba2 0901 	sub.w	r9, r2, r1
 800ab52:	4599      	cmp	r9, r3
 800ab54:	bfa8      	it	ge
 800ab56:	4699      	movge	r9, r3
 800ab58:	f1b9 0f00 	cmp.w	r9, #0
 800ab5c:	dc35      	bgt.n	800abca <_printf_float+0x3ae>
 800ab5e:	f04f 0800 	mov.w	r8, #0
 800ab62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab66:	f104 0a1a 	add.w	sl, r4, #26
 800ab6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab6e:	1a9b      	subs	r3, r3, r2
 800ab70:	eba3 0309 	sub.w	r3, r3, r9
 800ab74:	4543      	cmp	r3, r8
 800ab76:	f77f af79 	ble.w	800aa6c <_printf_float+0x250>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	4652      	mov	r2, sl
 800ab7e:	4631      	mov	r1, r6
 800ab80:	4628      	mov	r0, r5
 800ab82:	47b8      	blx	r7
 800ab84:	3001      	adds	r0, #1
 800ab86:	f43f aeaa 	beq.w	800a8de <_printf_float+0xc2>
 800ab8a:	f108 0801 	add.w	r8, r8, #1
 800ab8e:	e7ec      	b.n	800ab6a <_printf_float+0x34e>
 800ab90:	4613      	mov	r3, r2
 800ab92:	4631      	mov	r1, r6
 800ab94:	4642      	mov	r2, r8
 800ab96:	4628      	mov	r0, r5
 800ab98:	47b8      	blx	r7
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	d1c0      	bne.n	800ab20 <_printf_float+0x304>
 800ab9e:	e69e      	b.n	800a8de <_printf_float+0xc2>
 800aba0:	2301      	movs	r3, #1
 800aba2:	4631      	mov	r1, r6
 800aba4:	4628      	mov	r0, r5
 800aba6:	9205      	str	r2, [sp, #20]
 800aba8:	47b8      	blx	r7
 800abaa:	3001      	adds	r0, #1
 800abac:	f43f ae97 	beq.w	800a8de <_printf_float+0xc2>
 800abb0:	f10b 0b01 	add.w	fp, fp, #1
 800abb4:	9a05      	ldr	r2, [sp, #20]
 800abb6:	e7b9      	b.n	800ab2c <_printf_float+0x310>
 800abb8:	ee18 3a10 	vmov	r3, s16
 800abbc:	4652      	mov	r2, sl
 800abbe:	4631      	mov	r1, r6
 800abc0:	4628      	mov	r0, r5
 800abc2:	47b8      	blx	r7
 800abc4:	3001      	adds	r0, #1
 800abc6:	d1be      	bne.n	800ab46 <_printf_float+0x32a>
 800abc8:	e689      	b.n	800a8de <_printf_float+0xc2>
 800abca:	9a05      	ldr	r2, [sp, #20]
 800abcc:	464b      	mov	r3, r9
 800abce:	4631      	mov	r1, r6
 800abd0:	4628      	mov	r0, r5
 800abd2:	4442      	add	r2, r8
 800abd4:	47b8      	blx	r7
 800abd6:	3001      	adds	r0, #1
 800abd8:	d1c1      	bne.n	800ab5e <_printf_float+0x342>
 800abda:	e680      	b.n	800a8de <_printf_float+0xc2>
 800abdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abde:	2a01      	cmp	r2, #1
 800abe0:	dc01      	bgt.n	800abe6 <_printf_float+0x3ca>
 800abe2:	07db      	lsls	r3, r3, #31
 800abe4:	d538      	bpl.n	800ac58 <_printf_float+0x43c>
 800abe6:	2301      	movs	r3, #1
 800abe8:	4642      	mov	r2, r8
 800abea:	4631      	mov	r1, r6
 800abec:	4628      	mov	r0, r5
 800abee:	47b8      	blx	r7
 800abf0:	3001      	adds	r0, #1
 800abf2:	f43f ae74 	beq.w	800a8de <_printf_float+0xc2>
 800abf6:	ee18 3a10 	vmov	r3, s16
 800abfa:	4652      	mov	r2, sl
 800abfc:	4631      	mov	r1, r6
 800abfe:	4628      	mov	r0, r5
 800ac00:	47b8      	blx	r7
 800ac02:	3001      	adds	r0, #1
 800ac04:	f43f ae6b 	beq.w	800a8de <_printf_float+0xc2>
 800ac08:	2200      	movs	r2, #0
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac10:	f7f5 ff3e 	bl	8000a90 <__aeabi_dcmpeq>
 800ac14:	b9d8      	cbnz	r0, 800ac4e <_printf_float+0x432>
 800ac16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac18:	f108 0201 	add.w	r2, r8, #1
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	4631      	mov	r1, r6
 800ac20:	4628      	mov	r0, r5
 800ac22:	47b8      	blx	r7
 800ac24:	3001      	adds	r0, #1
 800ac26:	d10e      	bne.n	800ac46 <_printf_float+0x42a>
 800ac28:	e659      	b.n	800a8de <_printf_float+0xc2>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	4652      	mov	r2, sl
 800ac2e:	4631      	mov	r1, r6
 800ac30:	4628      	mov	r0, r5
 800ac32:	47b8      	blx	r7
 800ac34:	3001      	adds	r0, #1
 800ac36:	f43f ae52 	beq.w	800a8de <_printf_float+0xc2>
 800ac3a:	f108 0801 	add.w	r8, r8, #1
 800ac3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac40:	3b01      	subs	r3, #1
 800ac42:	4543      	cmp	r3, r8
 800ac44:	dcf1      	bgt.n	800ac2a <_printf_float+0x40e>
 800ac46:	464b      	mov	r3, r9
 800ac48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac4c:	e6dc      	b.n	800aa08 <_printf_float+0x1ec>
 800ac4e:	f04f 0800 	mov.w	r8, #0
 800ac52:	f104 0a1a 	add.w	sl, r4, #26
 800ac56:	e7f2      	b.n	800ac3e <_printf_float+0x422>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	4642      	mov	r2, r8
 800ac5c:	e7df      	b.n	800ac1e <_printf_float+0x402>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	464a      	mov	r2, r9
 800ac62:	4631      	mov	r1, r6
 800ac64:	4628      	mov	r0, r5
 800ac66:	47b8      	blx	r7
 800ac68:	3001      	adds	r0, #1
 800ac6a:	f43f ae38 	beq.w	800a8de <_printf_float+0xc2>
 800ac6e:	f108 0801 	add.w	r8, r8, #1
 800ac72:	68e3      	ldr	r3, [r4, #12]
 800ac74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac76:	1a5b      	subs	r3, r3, r1
 800ac78:	4543      	cmp	r3, r8
 800ac7a:	dcf0      	bgt.n	800ac5e <_printf_float+0x442>
 800ac7c:	e6fa      	b.n	800aa74 <_printf_float+0x258>
 800ac7e:	f04f 0800 	mov.w	r8, #0
 800ac82:	f104 0919 	add.w	r9, r4, #25
 800ac86:	e7f4      	b.n	800ac72 <_printf_float+0x456>

0800ac88 <_printf_common>:
 800ac88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8c:	4616      	mov	r6, r2
 800ac8e:	4699      	mov	r9, r3
 800ac90:	688a      	ldr	r2, [r1, #8]
 800ac92:	4607      	mov	r7, r0
 800ac94:	690b      	ldr	r3, [r1, #16]
 800ac96:	460c      	mov	r4, r1
 800ac98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	bfb8      	it	lt
 800aca0:	4613      	movlt	r3, r2
 800aca2:	6033      	str	r3, [r6, #0]
 800aca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aca8:	b10a      	cbz	r2, 800acae <_printf_common+0x26>
 800acaa:	3301      	adds	r3, #1
 800acac:	6033      	str	r3, [r6, #0]
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	0699      	lsls	r1, r3, #26
 800acb2:	bf42      	ittt	mi
 800acb4:	6833      	ldrmi	r3, [r6, #0]
 800acb6:	3302      	addmi	r3, #2
 800acb8:	6033      	strmi	r3, [r6, #0]
 800acba:	6825      	ldr	r5, [r4, #0]
 800acbc:	f015 0506 	ands.w	r5, r5, #6
 800acc0:	d106      	bne.n	800acd0 <_printf_common+0x48>
 800acc2:	f104 0a19 	add.w	sl, r4, #25
 800acc6:	68e3      	ldr	r3, [r4, #12]
 800acc8:	6832      	ldr	r2, [r6, #0]
 800acca:	1a9b      	subs	r3, r3, r2
 800accc:	42ab      	cmp	r3, r5
 800acce:	dc29      	bgt.n	800ad24 <_printf_common+0x9c>
 800acd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acd4:	1e13      	subs	r3, r2, #0
 800acd6:	6822      	ldr	r2, [r4, #0]
 800acd8:	bf18      	it	ne
 800acda:	2301      	movne	r3, #1
 800acdc:	0692      	lsls	r2, r2, #26
 800acde:	d42e      	bmi.n	800ad3e <_printf_common+0xb6>
 800ace0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ace4:	4649      	mov	r1, r9
 800ace6:	4638      	mov	r0, r7
 800ace8:	47c0      	blx	r8
 800acea:	3001      	adds	r0, #1
 800acec:	d021      	beq.n	800ad32 <_printf_common+0xaa>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	341a      	adds	r4, #26
 800acf2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800acf6:	f003 0306 	and.w	r3, r3, #6
 800acfa:	6832      	ldr	r2, [r6, #0]
 800acfc:	2600      	movs	r6, #0
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ad04:	bf08      	it	eq
 800ad06:	1aad      	subeq	r5, r5, r2
 800ad08:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ad0c:	bf14      	ite	ne
 800ad0e:	2500      	movne	r5, #0
 800ad10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad14:	4293      	cmp	r3, r2
 800ad16:	bfc4      	itt	gt
 800ad18:	1a9b      	subgt	r3, r3, r2
 800ad1a:	18ed      	addgt	r5, r5, r3
 800ad1c:	42b5      	cmp	r5, r6
 800ad1e:	d11a      	bne.n	800ad56 <_printf_common+0xce>
 800ad20:	2000      	movs	r0, #0
 800ad22:	e008      	b.n	800ad36 <_printf_common+0xae>
 800ad24:	2301      	movs	r3, #1
 800ad26:	4652      	mov	r2, sl
 800ad28:	4649      	mov	r1, r9
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	47c0      	blx	r8
 800ad2e:	3001      	adds	r0, #1
 800ad30:	d103      	bne.n	800ad3a <_printf_common+0xb2>
 800ad32:	f04f 30ff 	mov.w	r0, #4294967295
 800ad36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad3a:	3501      	adds	r5, #1
 800ad3c:	e7c3      	b.n	800acc6 <_printf_common+0x3e>
 800ad3e:	18e1      	adds	r1, r4, r3
 800ad40:	1c5a      	adds	r2, r3, #1
 800ad42:	2030      	movs	r0, #48	; 0x30
 800ad44:	3302      	adds	r3, #2
 800ad46:	4422      	add	r2, r4
 800ad48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad54:	e7c4      	b.n	800ace0 <_printf_common+0x58>
 800ad56:	2301      	movs	r3, #1
 800ad58:	4622      	mov	r2, r4
 800ad5a:	4649      	mov	r1, r9
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	47c0      	blx	r8
 800ad60:	3001      	adds	r0, #1
 800ad62:	d0e6      	beq.n	800ad32 <_printf_common+0xaa>
 800ad64:	3601      	adds	r6, #1
 800ad66:	e7d9      	b.n	800ad1c <_printf_common+0x94>

0800ad68 <_printf_i>:
 800ad68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	4691      	mov	r9, r2
 800ad70:	4680      	mov	r8, r0
 800ad72:	469a      	mov	sl, r3
 800ad74:	7e27      	ldrb	r7, [r4, #24]
 800ad76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad7c:	2f78      	cmp	r7, #120	; 0x78
 800ad7e:	d807      	bhi.n	800ad90 <_printf_i+0x28>
 800ad80:	2f62      	cmp	r7, #98	; 0x62
 800ad82:	d80a      	bhi.n	800ad9a <_printf_i+0x32>
 800ad84:	2f00      	cmp	r7, #0
 800ad86:	f000 80d8 	beq.w	800af3a <_printf_i+0x1d2>
 800ad8a:	2f58      	cmp	r7, #88	; 0x58
 800ad8c:	f000 80a3 	beq.w	800aed6 <_printf_i+0x16e>
 800ad90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ad94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad98:	e03a      	b.n	800ae10 <_printf_i+0xa8>
 800ad9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad9e:	2b15      	cmp	r3, #21
 800ada0:	d8f6      	bhi.n	800ad90 <_printf_i+0x28>
 800ada2:	a001      	add	r0, pc, #4	; (adr r0, 800ada8 <_printf_i+0x40>)
 800ada4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ada8:	0800ae01 	.word	0x0800ae01
 800adac:	0800ae15 	.word	0x0800ae15
 800adb0:	0800ad91 	.word	0x0800ad91
 800adb4:	0800ad91 	.word	0x0800ad91
 800adb8:	0800ad91 	.word	0x0800ad91
 800adbc:	0800ad91 	.word	0x0800ad91
 800adc0:	0800ae15 	.word	0x0800ae15
 800adc4:	0800ad91 	.word	0x0800ad91
 800adc8:	0800ad91 	.word	0x0800ad91
 800adcc:	0800ad91 	.word	0x0800ad91
 800add0:	0800ad91 	.word	0x0800ad91
 800add4:	0800af21 	.word	0x0800af21
 800add8:	0800ae45 	.word	0x0800ae45
 800addc:	0800af03 	.word	0x0800af03
 800ade0:	0800ad91 	.word	0x0800ad91
 800ade4:	0800ad91 	.word	0x0800ad91
 800ade8:	0800af43 	.word	0x0800af43
 800adec:	0800ad91 	.word	0x0800ad91
 800adf0:	0800ae45 	.word	0x0800ae45
 800adf4:	0800ad91 	.word	0x0800ad91
 800adf8:	0800ad91 	.word	0x0800ad91
 800adfc:	0800af0b 	.word	0x0800af0b
 800ae00:	680b      	ldr	r3, [r1, #0]
 800ae02:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ae06:	1d1a      	adds	r2, r3, #4
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	600a      	str	r2, [r1, #0]
 800ae0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae10:	2301      	movs	r3, #1
 800ae12:	e0a3      	b.n	800af5c <_printf_i+0x1f4>
 800ae14:	6825      	ldr	r5, [r4, #0]
 800ae16:	6808      	ldr	r0, [r1, #0]
 800ae18:	062e      	lsls	r6, r5, #24
 800ae1a:	f100 0304 	add.w	r3, r0, #4
 800ae1e:	d50a      	bpl.n	800ae36 <_printf_i+0xce>
 800ae20:	6805      	ldr	r5, [r0, #0]
 800ae22:	600b      	str	r3, [r1, #0]
 800ae24:	2d00      	cmp	r5, #0
 800ae26:	da03      	bge.n	800ae30 <_printf_i+0xc8>
 800ae28:	232d      	movs	r3, #45	; 0x2d
 800ae2a:	426d      	negs	r5, r5
 800ae2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae30:	485e      	ldr	r0, [pc, #376]	; (800afac <_printf_i+0x244>)
 800ae32:	230a      	movs	r3, #10
 800ae34:	e019      	b.n	800ae6a <_printf_i+0x102>
 800ae36:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ae3a:	6805      	ldr	r5, [r0, #0]
 800ae3c:	600b      	str	r3, [r1, #0]
 800ae3e:	bf18      	it	ne
 800ae40:	b22d      	sxthne	r5, r5
 800ae42:	e7ef      	b.n	800ae24 <_printf_i+0xbc>
 800ae44:	680b      	ldr	r3, [r1, #0]
 800ae46:	6825      	ldr	r5, [r4, #0]
 800ae48:	1d18      	adds	r0, r3, #4
 800ae4a:	6008      	str	r0, [r1, #0]
 800ae4c:	0628      	lsls	r0, r5, #24
 800ae4e:	d501      	bpl.n	800ae54 <_printf_i+0xec>
 800ae50:	681d      	ldr	r5, [r3, #0]
 800ae52:	e002      	b.n	800ae5a <_printf_i+0xf2>
 800ae54:	0669      	lsls	r1, r5, #25
 800ae56:	d5fb      	bpl.n	800ae50 <_printf_i+0xe8>
 800ae58:	881d      	ldrh	r5, [r3, #0]
 800ae5a:	2f6f      	cmp	r7, #111	; 0x6f
 800ae5c:	4853      	ldr	r0, [pc, #332]	; (800afac <_printf_i+0x244>)
 800ae5e:	bf0c      	ite	eq
 800ae60:	2308      	moveq	r3, #8
 800ae62:	230a      	movne	r3, #10
 800ae64:	2100      	movs	r1, #0
 800ae66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae6a:	6866      	ldr	r6, [r4, #4]
 800ae6c:	2e00      	cmp	r6, #0
 800ae6e:	60a6      	str	r6, [r4, #8]
 800ae70:	bfa2      	ittt	ge
 800ae72:	6821      	ldrge	r1, [r4, #0]
 800ae74:	f021 0104 	bicge.w	r1, r1, #4
 800ae78:	6021      	strge	r1, [r4, #0]
 800ae7a:	b90d      	cbnz	r5, 800ae80 <_printf_i+0x118>
 800ae7c:	2e00      	cmp	r6, #0
 800ae7e:	d04d      	beq.n	800af1c <_printf_i+0x1b4>
 800ae80:	4616      	mov	r6, r2
 800ae82:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae86:	fb03 5711 	mls	r7, r3, r1, r5
 800ae8a:	5dc7      	ldrb	r7, [r0, r7]
 800ae8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae90:	462f      	mov	r7, r5
 800ae92:	460d      	mov	r5, r1
 800ae94:	42bb      	cmp	r3, r7
 800ae96:	d9f4      	bls.n	800ae82 <_printf_i+0x11a>
 800ae98:	2b08      	cmp	r3, #8
 800ae9a:	d10b      	bne.n	800aeb4 <_printf_i+0x14c>
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	07df      	lsls	r7, r3, #31
 800aea0:	d508      	bpl.n	800aeb4 <_printf_i+0x14c>
 800aea2:	6923      	ldr	r3, [r4, #16]
 800aea4:	6861      	ldr	r1, [r4, #4]
 800aea6:	4299      	cmp	r1, r3
 800aea8:	bfde      	ittt	le
 800aeaa:	2330      	movle	r3, #48	; 0x30
 800aeac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aeb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aeb4:	1b92      	subs	r2, r2, r6
 800aeb6:	6122      	str	r2, [r4, #16]
 800aeb8:	464b      	mov	r3, r9
 800aeba:	aa03      	add	r2, sp, #12
 800aebc:	4621      	mov	r1, r4
 800aebe:	4640      	mov	r0, r8
 800aec0:	f8cd a000 	str.w	sl, [sp]
 800aec4:	f7ff fee0 	bl	800ac88 <_printf_common>
 800aec8:	3001      	adds	r0, #1
 800aeca:	d14c      	bne.n	800af66 <_printf_i+0x1fe>
 800aecc:	f04f 30ff 	mov.w	r0, #4294967295
 800aed0:	b004      	add	sp, #16
 800aed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed6:	4835      	ldr	r0, [pc, #212]	; (800afac <_printf_i+0x244>)
 800aed8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	680e      	ldr	r6, [r1, #0]
 800aee0:	061f      	lsls	r7, r3, #24
 800aee2:	f856 5b04 	ldr.w	r5, [r6], #4
 800aee6:	600e      	str	r6, [r1, #0]
 800aee8:	d514      	bpl.n	800af14 <_printf_i+0x1ac>
 800aeea:	07d9      	lsls	r1, r3, #31
 800aeec:	bf44      	itt	mi
 800aeee:	f043 0320 	orrmi.w	r3, r3, #32
 800aef2:	6023      	strmi	r3, [r4, #0]
 800aef4:	b91d      	cbnz	r5, 800aefe <_printf_i+0x196>
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	f023 0320 	bic.w	r3, r3, #32
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	2310      	movs	r3, #16
 800af00:	e7b0      	b.n	800ae64 <_printf_i+0xfc>
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	f043 0320 	orr.w	r3, r3, #32
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	2378      	movs	r3, #120	; 0x78
 800af0c:	4828      	ldr	r0, [pc, #160]	; (800afb0 <_printf_i+0x248>)
 800af0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af12:	e7e3      	b.n	800aedc <_printf_i+0x174>
 800af14:	065e      	lsls	r6, r3, #25
 800af16:	bf48      	it	mi
 800af18:	b2ad      	uxthmi	r5, r5
 800af1a:	e7e6      	b.n	800aeea <_printf_i+0x182>
 800af1c:	4616      	mov	r6, r2
 800af1e:	e7bb      	b.n	800ae98 <_printf_i+0x130>
 800af20:	680b      	ldr	r3, [r1, #0]
 800af22:	6826      	ldr	r6, [r4, #0]
 800af24:	1d1d      	adds	r5, r3, #4
 800af26:	6960      	ldr	r0, [r4, #20]
 800af28:	600d      	str	r5, [r1, #0]
 800af2a:	0635      	lsls	r5, r6, #24
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	d501      	bpl.n	800af34 <_printf_i+0x1cc>
 800af30:	6018      	str	r0, [r3, #0]
 800af32:	e002      	b.n	800af3a <_printf_i+0x1d2>
 800af34:	0671      	lsls	r1, r6, #25
 800af36:	d5fb      	bpl.n	800af30 <_printf_i+0x1c8>
 800af38:	8018      	strh	r0, [r3, #0]
 800af3a:	2300      	movs	r3, #0
 800af3c:	4616      	mov	r6, r2
 800af3e:	6123      	str	r3, [r4, #16]
 800af40:	e7ba      	b.n	800aeb8 <_printf_i+0x150>
 800af42:	680b      	ldr	r3, [r1, #0]
 800af44:	1d1a      	adds	r2, r3, #4
 800af46:	600a      	str	r2, [r1, #0]
 800af48:	2100      	movs	r1, #0
 800af4a:	681e      	ldr	r6, [r3, #0]
 800af4c:	6862      	ldr	r2, [r4, #4]
 800af4e:	4630      	mov	r0, r6
 800af50:	f000 fed8 	bl	800bd04 <memchr>
 800af54:	b108      	cbz	r0, 800af5a <_printf_i+0x1f2>
 800af56:	1b80      	subs	r0, r0, r6
 800af58:	6060      	str	r0, [r4, #4]
 800af5a:	6863      	ldr	r3, [r4, #4]
 800af5c:	6123      	str	r3, [r4, #16]
 800af5e:	2300      	movs	r3, #0
 800af60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af64:	e7a8      	b.n	800aeb8 <_printf_i+0x150>
 800af66:	6923      	ldr	r3, [r4, #16]
 800af68:	4632      	mov	r2, r6
 800af6a:	4649      	mov	r1, r9
 800af6c:	4640      	mov	r0, r8
 800af6e:	47d0      	blx	sl
 800af70:	3001      	adds	r0, #1
 800af72:	d0ab      	beq.n	800aecc <_printf_i+0x164>
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	079b      	lsls	r3, r3, #30
 800af78:	d413      	bmi.n	800afa2 <_printf_i+0x23a>
 800af7a:	68e0      	ldr	r0, [r4, #12]
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	4298      	cmp	r0, r3
 800af80:	bfb8      	it	lt
 800af82:	4618      	movlt	r0, r3
 800af84:	e7a4      	b.n	800aed0 <_printf_i+0x168>
 800af86:	2301      	movs	r3, #1
 800af88:	4632      	mov	r2, r6
 800af8a:	4649      	mov	r1, r9
 800af8c:	4640      	mov	r0, r8
 800af8e:	47d0      	blx	sl
 800af90:	3001      	adds	r0, #1
 800af92:	d09b      	beq.n	800aecc <_printf_i+0x164>
 800af94:	3501      	adds	r5, #1
 800af96:	68e3      	ldr	r3, [r4, #12]
 800af98:	9903      	ldr	r1, [sp, #12]
 800af9a:	1a5b      	subs	r3, r3, r1
 800af9c:	42ab      	cmp	r3, r5
 800af9e:	dcf2      	bgt.n	800af86 <_printf_i+0x21e>
 800afa0:	e7eb      	b.n	800af7a <_printf_i+0x212>
 800afa2:	2500      	movs	r5, #0
 800afa4:	f104 0619 	add.w	r6, r4, #25
 800afa8:	e7f5      	b.n	800af96 <_printf_i+0x22e>
 800afaa:	bf00      	nop
 800afac:	0802055a 	.word	0x0802055a
 800afb0:	0802056b 	.word	0x0802056b

0800afb4 <siprintf>:
 800afb4:	b40e      	push	{r1, r2, r3}
 800afb6:	b500      	push	{lr}
 800afb8:	b09c      	sub	sp, #112	; 0x70
 800afba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800afbe:	ab1d      	add	r3, sp, #116	; 0x74
 800afc0:	9002      	str	r0, [sp, #8]
 800afc2:	9006      	str	r0, [sp, #24]
 800afc4:	9107      	str	r1, [sp, #28]
 800afc6:	9104      	str	r1, [sp, #16]
 800afc8:	4808      	ldr	r0, [pc, #32]	; (800afec <siprintf+0x38>)
 800afca:	4909      	ldr	r1, [pc, #36]	; (800aff0 <siprintf+0x3c>)
 800afcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800afd0:	9105      	str	r1, [sp, #20]
 800afd2:	a902      	add	r1, sp, #8
 800afd4:	6800      	ldr	r0, [r0, #0]
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	f001 fb4c 	bl	800c674 <_svfiprintf_r>
 800afdc:	9b02      	ldr	r3, [sp, #8]
 800afde:	2200      	movs	r2, #0
 800afe0:	701a      	strb	r2, [r3, #0]
 800afe2:	b01c      	add	sp, #112	; 0x70
 800afe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800afe8:	b003      	add	sp, #12
 800afea:	4770      	bx	lr
 800afec:	20000018 	.word	0x20000018
 800aff0:	ffff0208 	.word	0xffff0208

0800aff4 <quorem>:
 800aff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff8:	6903      	ldr	r3, [r0, #16]
 800affa:	4607      	mov	r7, r0
 800affc:	690c      	ldr	r4, [r1, #16]
 800affe:	42a3      	cmp	r3, r4
 800b000:	f2c0 8085 	blt.w	800b10e <quorem+0x11a>
 800b004:	3c01      	subs	r4, #1
 800b006:	f100 0514 	add.w	r5, r0, #20
 800b00a:	f101 0814 	add.w	r8, r1, #20
 800b00e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b016:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b01a:	9301      	str	r3, [sp, #4]
 800b01c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b020:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b024:	3301      	adds	r3, #1
 800b026:	429a      	cmp	r2, r3
 800b028:	fbb2 f6f3 	udiv	r6, r2, r3
 800b02c:	d333      	bcc.n	800b096 <quorem+0xa2>
 800b02e:	f04f 0e00 	mov.w	lr, #0
 800b032:	4640      	mov	r0, r8
 800b034:	46ac      	mov	ip, r5
 800b036:	46f2      	mov	sl, lr
 800b038:	f850 2b04 	ldr.w	r2, [r0], #4
 800b03c:	b293      	uxth	r3, r2
 800b03e:	4581      	cmp	r9, r0
 800b040:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b044:	fb06 e303 	mla	r3, r6, r3, lr
 800b048:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	fb06 e202 	mla	r2, r6, r2, lr
 800b052:	ebaa 0303 	sub.w	r3, sl, r3
 800b056:	f8dc a000 	ldr.w	sl, [ip]
 800b05a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b05e:	fa1f fa8a 	uxth.w	sl, sl
 800b062:	4453      	add	r3, sl
 800b064:	fa1f fa82 	uxth.w	sl, r2
 800b068:	f8dc 2000 	ldr.w	r2, [ip]
 800b06c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b074:	b29b      	uxth	r3, r3
 800b076:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b07a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b07e:	f84c 3b04 	str.w	r3, [ip], #4
 800b082:	d2d9      	bcs.n	800b038 <quorem+0x44>
 800b084:	f855 300b 	ldr.w	r3, [r5, fp]
 800b088:	b92b      	cbnz	r3, 800b096 <quorem+0xa2>
 800b08a:	9b01      	ldr	r3, [sp, #4]
 800b08c:	3b04      	subs	r3, #4
 800b08e:	429d      	cmp	r5, r3
 800b090:	461a      	mov	r2, r3
 800b092:	d330      	bcc.n	800b0f6 <quorem+0x102>
 800b094:	613c      	str	r4, [r7, #16]
 800b096:	4638      	mov	r0, r7
 800b098:	f001 f8ce 	bl	800c238 <__mcmp>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	db26      	blt.n	800b0ee <quorem+0xfa>
 800b0a0:	3601      	adds	r6, #1
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f04f 0c00 	mov.w	ip, #0
 800b0a8:	f858 1b04 	ldr.w	r1, [r8], #4
 800b0ac:	f8d0 e000 	ldr.w	lr, [r0]
 800b0b0:	b28b      	uxth	r3, r1
 800b0b2:	45c1      	cmp	r9, r8
 800b0b4:	fa1f f28e 	uxth.w	r2, lr
 800b0b8:	ebac 0303 	sub.w	r3, ip, r3
 800b0bc:	4413      	add	r3, r2
 800b0be:	ea4f 4211 	mov.w	r2, r1, lsr #16
 800b0c2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b0c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b0d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0d4:	f840 3b04 	str.w	r3, [r0], #4
 800b0d8:	d2e6      	bcs.n	800b0a8 <quorem+0xb4>
 800b0da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0e2:	b922      	cbnz	r2, 800b0ee <quorem+0xfa>
 800b0e4:	3b04      	subs	r3, #4
 800b0e6:	429d      	cmp	r5, r3
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	d30a      	bcc.n	800b102 <quorem+0x10e>
 800b0ec:	613c      	str	r4, [r7, #16]
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	b003      	add	sp, #12
 800b0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f6:	6812      	ldr	r2, [r2, #0]
 800b0f8:	3b04      	subs	r3, #4
 800b0fa:	2a00      	cmp	r2, #0
 800b0fc:	d1ca      	bne.n	800b094 <quorem+0xa0>
 800b0fe:	3c01      	subs	r4, #1
 800b100:	e7c5      	b.n	800b08e <quorem+0x9a>
 800b102:	6812      	ldr	r2, [r2, #0]
 800b104:	3b04      	subs	r3, #4
 800b106:	2a00      	cmp	r2, #0
 800b108:	d1f0      	bne.n	800b0ec <quorem+0xf8>
 800b10a:	3c01      	subs	r4, #1
 800b10c:	e7eb      	b.n	800b0e6 <quorem+0xf2>
 800b10e:	2000      	movs	r0, #0
 800b110:	e7ee      	b.n	800b0f0 <quorem+0xfc>
 800b112:	0000      	movs	r0, r0
 800b114:	0000      	movs	r0, r0
	...

0800b118 <_dtoa_r>:
 800b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b11e:	4604      	mov	r4, r0
 800b120:	ed2d 8b02 	vpush	{d8}
 800b124:	b095      	sub	sp, #84	; 0x54
 800b126:	ec57 6b10 	vmov	r6, r7, d0
 800b12a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b12e:	9105      	str	r1, [sp, #20]
 800b130:	9209      	str	r2, [sp, #36]	; 0x24
 800b132:	930f      	str	r3, [sp, #60]	; 0x3c
 800b134:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b138:	b975      	cbnz	r5, 800b158 <_dtoa_r+0x40>
 800b13a:	2010      	movs	r0, #16
 800b13c:	f000 fdda 	bl	800bcf4 <malloc>
 800b140:	4602      	mov	r2, r0
 800b142:	6260      	str	r0, [r4, #36]	; 0x24
 800b144:	b920      	cbnz	r0, 800b150 <_dtoa_r+0x38>
 800b146:	4bb2      	ldr	r3, [pc, #712]	; (800b410 <_dtoa_r+0x2f8>)
 800b148:	21ea      	movs	r1, #234	; 0xea
 800b14a:	48b2      	ldr	r0, [pc, #712]	; (800b414 <_dtoa_r+0x2fc>)
 800b14c:	f001 fba2 	bl	800c894 <__assert_func>
 800b150:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b154:	6005      	str	r5, [r0, #0]
 800b156:	60c5      	str	r5, [r0, #12]
 800b158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b15a:	6819      	ldr	r1, [r3, #0]
 800b15c:	b151      	cbz	r1, 800b174 <_dtoa_r+0x5c>
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	2301      	movs	r3, #1
 800b162:	4620      	mov	r0, r4
 800b164:	4093      	lsls	r3, r2
 800b166:	604a      	str	r2, [r1, #4]
 800b168:	608b      	str	r3, [r1, #8]
 800b16a:	f000 fe27 	bl	800bdbc <_Bfree>
 800b16e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b170:	2200      	movs	r2, #0
 800b172:	601a      	str	r2, [r3, #0]
 800b174:	1e3b      	subs	r3, r7, #0
 800b176:	bfb7      	itett	lt
 800b178:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b17c:	2300      	movge	r3, #0
 800b17e:	2201      	movlt	r2, #1
 800b180:	9303      	strlt	r3, [sp, #12]
 800b182:	bfa8      	it	ge
 800b184:	f8c8 3000 	strge.w	r3, [r8]
 800b188:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b18c:	4ba2      	ldr	r3, [pc, #648]	; (800b418 <_dtoa_r+0x300>)
 800b18e:	bfb8      	it	lt
 800b190:	f8c8 2000 	strlt.w	r2, [r8]
 800b194:	ea33 0309 	bics.w	r3, r3, r9
 800b198:	d11b      	bne.n	800b1d2 <_dtoa_r+0xba>
 800b19a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b19e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1a0:	6013      	str	r3, [r2, #0]
 800b1a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1a6:	4333      	orrs	r3, r6
 800b1a8:	f000 8577 	beq.w	800bc9a <_dtoa_r+0xb82>
 800b1ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1ae:	b963      	cbnz	r3, 800b1ca <_dtoa_r+0xb2>
 800b1b0:	4b9a      	ldr	r3, [pc, #616]	; (800b41c <_dtoa_r+0x304>)
 800b1b2:	e024      	b.n	800b1fe <_dtoa_r+0xe6>
 800b1b4:	4b9a      	ldr	r3, [pc, #616]	; (800b420 <_dtoa_r+0x308>)
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	3308      	adds	r3, #8
 800b1ba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	9800      	ldr	r0, [sp, #0]
 800b1c0:	b015      	add	sp, #84	; 0x54
 800b1c2:	ecbd 8b02 	vpop	{d8}
 800b1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ca:	4b94      	ldr	r3, [pc, #592]	; (800b41c <_dtoa_r+0x304>)
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	3303      	adds	r3, #3
 800b1d0:	e7f3      	b.n	800b1ba <_dtoa_r+0xa2>
 800b1d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	2300      	movs	r3, #0
 800b1da:	ec51 0b17 	vmov	r0, r1, d7
 800b1de:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b1e2:	f7f5 fc55 	bl	8000a90 <__aeabi_dcmpeq>
 800b1e6:	4680      	mov	r8, r0
 800b1e8:	b158      	cbz	r0, 800b202 <_dtoa_r+0xea>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1ee:	6013      	str	r3, [r2, #0]
 800b1f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 854e 	beq.w	800bc94 <_dtoa_r+0xb7c>
 800b1f8:	488a      	ldr	r0, [pc, #552]	; (800b424 <_dtoa_r+0x30c>)
 800b1fa:	6018      	str	r0, [r3, #0]
 800b1fc:	1e43      	subs	r3, r0, #1
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	e7dd      	b.n	800b1be <_dtoa_r+0xa6>
 800b202:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b206:	aa12      	add	r2, sp, #72	; 0x48
 800b208:	a913      	add	r1, sp, #76	; 0x4c
 800b20a:	4620      	mov	r0, r4
 800b20c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b210:	f001 f8be 	bl	800c390 <__d2b>
 800b214:	4683      	mov	fp, r0
 800b216:	2d00      	cmp	r5, #0
 800b218:	d07a      	beq.n	800b310 <_dtoa_r+0x1f8>
 800b21a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b21c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b220:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b228:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b22c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b230:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b234:	2200      	movs	r2, #0
 800b236:	4b7c      	ldr	r3, [pc, #496]	; (800b428 <_dtoa_r+0x310>)
 800b238:	4630      	mov	r0, r6
 800b23a:	4639      	mov	r1, r7
 800b23c:	f7f5 f808 	bl	8000250 <__aeabi_dsub>
 800b240:	a36d      	add	r3, pc, #436	; (adr r3, 800b3f8 <_dtoa_r+0x2e0>)
 800b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b246:	f7f5 f9bb 	bl	80005c0 <__aeabi_dmul>
 800b24a:	a36d      	add	r3, pc, #436	; (adr r3, 800b400 <_dtoa_r+0x2e8>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	f7f5 f800 	bl	8000254 <__adddf3>
 800b254:	4606      	mov	r6, r0
 800b256:	460f      	mov	r7, r1
 800b258:	4628      	mov	r0, r5
 800b25a:	f7f5 f947 	bl	80004ec <__aeabi_i2d>
 800b25e:	a36a      	add	r3, pc, #424	; (adr r3, 800b408 <_dtoa_r+0x2f0>)
 800b260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b264:	f7f5 f9ac 	bl	80005c0 <__aeabi_dmul>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	4630      	mov	r0, r6
 800b26e:	4639      	mov	r1, r7
 800b270:	f7f4 fff0 	bl	8000254 <__adddf3>
 800b274:	4606      	mov	r6, r0
 800b276:	460f      	mov	r7, r1
 800b278:	f7f5 fc52 	bl	8000b20 <__aeabi_d2iz>
 800b27c:	2200      	movs	r2, #0
 800b27e:	4682      	mov	sl, r0
 800b280:	2300      	movs	r3, #0
 800b282:	4630      	mov	r0, r6
 800b284:	4639      	mov	r1, r7
 800b286:	f7f5 fc0d 	bl	8000aa4 <__aeabi_dcmplt>
 800b28a:	b148      	cbz	r0, 800b2a0 <_dtoa_r+0x188>
 800b28c:	4650      	mov	r0, sl
 800b28e:	f7f5 f92d 	bl	80004ec <__aeabi_i2d>
 800b292:	4632      	mov	r2, r6
 800b294:	463b      	mov	r3, r7
 800b296:	f7f5 fbfb 	bl	8000a90 <__aeabi_dcmpeq>
 800b29a:	b908      	cbnz	r0, 800b2a0 <_dtoa_r+0x188>
 800b29c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2a0:	f1ba 0f16 	cmp.w	sl, #22
 800b2a4:	d853      	bhi.n	800b34e <_dtoa_r+0x236>
 800b2a6:	4b61      	ldr	r3, [pc, #388]	; (800b42c <_dtoa_r+0x314>)
 800b2a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b2ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b4:	f7f5 fbf6 	bl	8000aa4 <__aeabi_dcmplt>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d04a      	beq.n	800b352 <_dtoa_r+0x23a>
 800b2bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	930e      	str	r3, [sp, #56]	; 0x38
 800b2c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2c6:	1b5d      	subs	r5, r3, r5
 800b2c8:	1e6b      	subs	r3, r5, #1
 800b2ca:	9304      	str	r3, [sp, #16]
 800b2cc:	bf45      	ittet	mi
 800b2ce:	2300      	movmi	r3, #0
 800b2d0:	f1c5 0801 	rsbmi	r8, r5, #1
 800b2d4:	f04f 0800 	movpl.w	r8, #0
 800b2d8:	9304      	strmi	r3, [sp, #16]
 800b2da:	f1ba 0f00 	cmp.w	sl, #0
 800b2de:	db3a      	blt.n	800b356 <_dtoa_r+0x23e>
 800b2e0:	9b04      	ldr	r3, [sp, #16]
 800b2e2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b2e6:	4453      	add	r3, sl
 800b2e8:	9304      	str	r3, [sp, #16]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	9306      	str	r3, [sp, #24]
 800b2ee:	9b05      	ldr	r3, [sp, #20]
 800b2f0:	2b09      	cmp	r3, #9
 800b2f2:	d868      	bhi.n	800b3c6 <_dtoa_r+0x2ae>
 800b2f4:	2b05      	cmp	r3, #5
 800b2f6:	bfc5      	ittet	gt
 800b2f8:	3b04      	subgt	r3, #4
 800b2fa:	2500      	movgt	r5, #0
 800b2fc:	2501      	movle	r5, #1
 800b2fe:	9305      	strgt	r3, [sp, #20]
 800b300:	9b05      	ldr	r3, [sp, #20]
 800b302:	3b02      	subs	r3, #2
 800b304:	2b03      	cmp	r3, #3
 800b306:	d86a      	bhi.n	800b3de <_dtoa_r+0x2c6>
 800b308:	e8df f003 	tbb	[pc, r3]
 800b30c:	5b4d4f2d 	.word	0x5b4d4f2d
 800b310:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b314:	441d      	add	r5, r3
 800b316:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b31a:	2b20      	cmp	r3, #32
 800b31c:	bfc6      	itte	gt
 800b31e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b322:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b326:	f1c3 0320 	rsble	r3, r3, #32
 800b32a:	f105 35ff 	add.w	r5, r5, #4294967295
 800b32e:	bfc5      	ittet	gt
 800b330:	fa09 f303 	lslgt.w	r3, r9, r3
 800b334:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b338:	fa06 f003 	lslle.w	r0, r6, r3
 800b33c:	4318      	orrgt	r0, r3
 800b33e:	f7f5 f8c5 	bl	80004cc <__aeabi_ui2d>
 800b342:	2301      	movs	r3, #1
 800b344:	4606      	mov	r6, r0
 800b346:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b34a:	9310      	str	r3, [sp, #64]	; 0x40
 800b34c:	e772      	b.n	800b234 <_dtoa_r+0x11c>
 800b34e:	2301      	movs	r3, #1
 800b350:	e7b7      	b.n	800b2c2 <_dtoa_r+0x1aa>
 800b352:	900e      	str	r0, [sp, #56]	; 0x38
 800b354:	e7b6      	b.n	800b2c4 <_dtoa_r+0x1ac>
 800b356:	f1ca 0300 	rsb	r3, sl, #0
 800b35a:	eba8 080a 	sub.w	r8, r8, sl
 800b35e:	9306      	str	r3, [sp, #24]
 800b360:	2300      	movs	r3, #0
 800b362:	930d      	str	r3, [sp, #52]	; 0x34
 800b364:	e7c3      	b.n	800b2ee <_dtoa_r+0x1d6>
 800b366:	2300      	movs	r3, #0
 800b368:	9308      	str	r3, [sp, #32]
 800b36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	dc39      	bgt.n	800b3e4 <_dtoa_r+0x2cc>
 800b370:	f04f 0901 	mov.w	r9, #1
 800b374:	464b      	mov	r3, r9
 800b376:	f8cd 9004 	str.w	r9, [sp, #4]
 800b37a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b37e:	2200      	movs	r2, #0
 800b380:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b382:	6042      	str	r2, [r0, #4]
 800b384:	2204      	movs	r2, #4
 800b386:	f102 0614 	add.w	r6, r2, #20
 800b38a:	6841      	ldr	r1, [r0, #4]
 800b38c:	429e      	cmp	r6, r3
 800b38e:	d92f      	bls.n	800b3f0 <_dtoa_r+0x2d8>
 800b390:	4620      	mov	r0, r4
 800b392:	f000 fcd3 	bl	800bd3c <_Balloc>
 800b396:	9000      	str	r0, [sp, #0]
 800b398:	2800      	cmp	r0, #0
 800b39a:	d14b      	bne.n	800b434 <_dtoa_r+0x31c>
 800b39c:	4b24      	ldr	r3, [pc, #144]	; (800b430 <_dtoa_r+0x318>)
 800b39e:	4602      	mov	r2, r0
 800b3a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b3a4:	e6d1      	b.n	800b14a <_dtoa_r+0x32>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e7de      	b.n	800b368 <_dtoa_r+0x250>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	9308      	str	r3, [sp, #32]
 800b3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b0:	eb0a 0903 	add.w	r9, sl, r3
 800b3b4:	f109 0301 	add.w	r3, r9, #1
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	9301      	str	r3, [sp, #4]
 800b3bc:	bfb8      	it	lt
 800b3be:	2301      	movlt	r3, #1
 800b3c0:	e7dd      	b.n	800b37e <_dtoa_r+0x266>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e7f2      	b.n	800b3ac <_dtoa_r+0x294>
 800b3c6:	2501      	movs	r5, #1
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	9508      	str	r5, [sp, #32]
 800b3cc:	9305      	str	r3, [sp, #20]
 800b3ce:	f04f 39ff 	mov.w	r9, #4294967295
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	2312      	movs	r3, #18
 800b3d6:	f8cd 9004 	str.w	r9, [sp, #4]
 800b3da:	9209      	str	r2, [sp, #36]	; 0x24
 800b3dc:	e7cf      	b.n	800b37e <_dtoa_r+0x266>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	9308      	str	r3, [sp, #32]
 800b3e2:	e7f4      	b.n	800b3ce <_dtoa_r+0x2b6>
 800b3e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b3e8:	464b      	mov	r3, r9
 800b3ea:	f8cd 9004 	str.w	r9, [sp, #4]
 800b3ee:	e7c6      	b.n	800b37e <_dtoa_r+0x266>
 800b3f0:	3101      	adds	r1, #1
 800b3f2:	0052      	lsls	r2, r2, #1
 800b3f4:	6041      	str	r1, [r0, #4]
 800b3f6:	e7c6      	b.n	800b386 <_dtoa_r+0x26e>
 800b3f8:	636f4361 	.word	0x636f4361
 800b3fc:	3fd287a7 	.word	0x3fd287a7
 800b400:	8b60c8b3 	.word	0x8b60c8b3
 800b404:	3fc68a28 	.word	0x3fc68a28
 800b408:	509f79fb 	.word	0x509f79fb
 800b40c:	3fd34413 	.word	0x3fd34413
 800b410:	08020589 	.word	0x08020589
 800b414:	080205a0 	.word	0x080205a0
 800b418:	7ff00000 	.word	0x7ff00000
 800b41c:	08020585 	.word	0x08020585
 800b420:	0802057c 	.word	0x0802057c
 800b424:	08020559 	.word	0x08020559
 800b428:	3ff80000 	.word	0x3ff80000
 800b42c:	08020698 	.word	0x08020698
 800b430:	080205ff 	.word	0x080205ff
 800b434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b436:	9a00      	ldr	r2, [sp, #0]
 800b438:	601a      	str	r2, [r3, #0]
 800b43a:	9b01      	ldr	r3, [sp, #4]
 800b43c:	2b0e      	cmp	r3, #14
 800b43e:	f200 80ad 	bhi.w	800b59c <_dtoa_r+0x484>
 800b442:	2d00      	cmp	r5, #0
 800b444:	f000 80aa 	beq.w	800b59c <_dtoa_r+0x484>
 800b448:	f1ba 0f00 	cmp.w	sl, #0
 800b44c:	dd36      	ble.n	800b4bc <_dtoa_r+0x3a4>
 800b44e:	f00a 030f 	and.w	r3, sl, #15
 800b452:	4ac1      	ldr	r2, [pc, #772]	; (800b758 <_dtoa_r+0x640>)
 800b454:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b458:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b45c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b460:	ed93 7b00 	vldr	d7, [r3]
 800b464:	eeb0 8a47 	vmov.f32	s16, s14
 800b468:	eef0 8a67 	vmov.f32	s17, s15
 800b46c:	d016      	beq.n	800b49c <_dtoa_r+0x384>
 800b46e:	4bbb      	ldr	r3, [pc, #748]	; (800b75c <_dtoa_r+0x644>)
 800b470:	f007 070f 	and.w	r7, r7, #15
 800b474:	2503      	movs	r5, #3
 800b476:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b47a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b47e:	f7f5 f9c9 	bl	8000814 <__aeabi_ddiv>
 800b482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b486:	4eb5      	ldr	r6, [pc, #724]	; (800b75c <_dtoa_r+0x644>)
 800b488:	b957      	cbnz	r7, 800b4a0 <_dtoa_r+0x388>
 800b48a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b48e:	ec53 2b18 	vmov	r2, r3, d8
 800b492:	f7f5 f9bf 	bl	8000814 <__aeabi_ddiv>
 800b496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b49a:	e029      	b.n	800b4f0 <_dtoa_r+0x3d8>
 800b49c:	2502      	movs	r5, #2
 800b49e:	e7f2      	b.n	800b486 <_dtoa_r+0x36e>
 800b4a0:	07f9      	lsls	r1, r7, #31
 800b4a2:	d508      	bpl.n	800b4b6 <_dtoa_r+0x39e>
 800b4a4:	3501      	adds	r5, #1
 800b4a6:	ec51 0b18 	vmov	r0, r1, d8
 800b4aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b4ae:	f7f5 f887 	bl	80005c0 <__aeabi_dmul>
 800b4b2:	ec41 0b18 	vmov	d8, r0, r1
 800b4b6:	107f      	asrs	r7, r7, #1
 800b4b8:	3608      	adds	r6, #8
 800b4ba:	e7e5      	b.n	800b488 <_dtoa_r+0x370>
 800b4bc:	f000 80a6 	beq.w	800b60c <_dtoa_r+0x4f4>
 800b4c0:	f1ca 0600 	rsb	r6, sl, #0
 800b4c4:	4ba4      	ldr	r3, [pc, #656]	; (800b758 <_dtoa_r+0x640>)
 800b4c6:	4fa5      	ldr	r7, [pc, #660]	; (800b75c <_dtoa_r+0x644>)
 800b4c8:	2502      	movs	r5, #2
 800b4ca:	f006 020f 	and.w	r2, r6, #15
 800b4ce:	1136      	asrs	r6, r6, #4
 800b4d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	f7f5 f870 	bl	80005c0 <__aeabi_dmul>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4e6:	2e00      	cmp	r6, #0
 800b4e8:	f040 8085 	bne.w	800b5f6 <_dtoa_r+0x4de>
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1d2      	bne.n	800b496 <_dtoa_r+0x37e>
 800b4f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f000 808c 	beq.w	800b610 <_dtoa_r+0x4f8>
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	4b99      	ldr	r3, [pc, #612]	; (800b760 <_dtoa_r+0x648>)
 800b4fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b500:	4630      	mov	r0, r6
 800b502:	4639      	mov	r1, r7
 800b504:	f7f5 face 	bl	8000aa4 <__aeabi_dcmplt>
 800b508:	2800      	cmp	r0, #0
 800b50a:	f000 8081 	beq.w	800b610 <_dtoa_r+0x4f8>
 800b50e:	9b01      	ldr	r3, [sp, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d07d      	beq.n	800b610 <_dtoa_r+0x4f8>
 800b514:	f1b9 0f00 	cmp.w	r9, #0
 800b518:	dd3c      	ble.n	800b594 <_dtoa_r+0x47c>
 800b51a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b51e:	3501      	adds	r5, #1
 800b520:	2200      	movs	r2, #0
 800b522:	4630      	mov	r0, r6
 800b524:	9307      	str	r3, [sp, #28]
 800b526:	4639      	mov	r1, r7
 800b528:	4b8e      	ldr	r3, [pc, #568]	; (800b764 <_dtoa_r+0x64c>)
 800b52a:	f7f5 f849 	bl	80005c0 <__aeabi_dmul>
 800b52e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b536:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b53a:	4628      	mov	r0, r5
 800b53c:	f7f4 ffd6 	bl	80004ec <__aeabi_i2d>
 800b540:	4632      	mov	r2, r6
 800b542:	463b      	mov	r3, r7
 800b544:	f7f5 f83c 	bl	80005c0 <__aeabi_dmul>
 800b548:	4b87      	ldr	r3, [pc, #540]	; (800b768 <_dtoa_r+0x650>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	f7f4 fe82 	bl	8000254 <__adddf3>
 800b550:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b558:	9303      	str	r3, [sp, #12]
 800b55a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d15c      	bne.n	800b61a <_dtoa_r+0x502>
 800b560:	2200      	movs	r2, #0
 800b562:	4b82      	ldr	r3, [pc, #520]	; (800b76c <_dtoa_r+0x654>)
 800b564:	4630      	mov	r0, r6
 800b566:	4639      	mov	r1, r7
 800b568:	f7f4 fe72 	bl	8000250 <__aeabi_dsub>
 800b56c:	4606      	mov	r6, r0
 800b56e:	460f      	mov	r7, r1
 800b570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b574:	f7f5 fab4 	bl	8000ae0 <__aeabi_dcmpgt>
 800b578:	2800      	cmp	r0, #0
 800b57a:	f040 8294 	bne.w	800baa6 <_dtoa_r+0x98e>
 800b57e:	4630      	mov	r0, r6
 800b580:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b588:	4639      	mov	r1, r7
 800b58a:	f7f5 fa8b 	bl	8000aa4 <__aeabi_dcmplt>
 800b58e:	2800      	cmp	r0, #0
 800b590:	f040 8286 	bne.w	800baa0 <_dtoa_r+0x988>
 800b594:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b598:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b59c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f2c0 8156 	blt.w	800b850 <_dtoa_r+0x738>
 800b5a4:	f1ba 0f0e 	cmp.w	sl, #14
 800b5a8:	f300 8152 	bgt.w	800b850 <_dtoa_r+0x738>
 800b5ac:	4b6a      	ldr	r3, [pc, #424]	; (800b758 <_dtoa_r+0x640>)
 800b5ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b5b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f280 80e1 	bge.w	800b780 <_dtoa_r+0x668>
 800b5be:	9b01      	ldr	r3, [sp, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f300 80dd 	bgt.w	800b780 <_dtoa_r+0x668>
 800b5c6:	f040 826b 	bne.w	800baa0 <_dtoa_r+0x988>
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	4b67      	ldr	r3, [pc, #412]	; (800b76c <_dtoa_r+0x654>)
 800b5ce:	4640      	mov	r0, r8
 800b5d0:	4649      	mov	r1, r9
 800b5d2:	f7f4 fff5 	bl	80005c0 <__aeabi_dmul>
 800b5d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5da:	f7f5 fa77 	bl	8000acc <__aeabi_dcmpge>
 800b5de:	9e01      	ldr	r6, [sp, #4]
 800b5e0:	4637      	mov	r7, r6
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	f040 8241 	bne.w	800ba6a <_dtoa_r+0x952>
 800b5e8:	9d00      	ldr	r5, [sp, #0]
 800b5ea:	2331      	movs	r3, #49	; 0x31
 800b5ec:	f10a 0a01 	add.w	sl, sl, #1
 800b5f0:	f805 3b01 	strb.w	r3, [r5], #1
 800b5f4:	e23d      	b.n	800ba72 <_dtoa_r+0x95a>
 800b5f6:	07f2      	lsls	r2, r6, #31
 800b5f8:	d505      	bpl.n	800b606 <_dtoa_r+0x4ee>
 800b5fa:	3501      	adds	r5, #1
 800b5fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b600:	f7f4 ffde 	bl	80005c0 <__aeabi_dmul>
 800b604:	2301      	movs	r3, #1
 800b606:	1076      	asrs	r6, r6, #1
 800b608:	3708      	adds	r7, #8
 800b60a:	e76c      	b.n	800b4e6 <_dtoa_r+0x3ce>
 800b60c:	2502      	movs	r5, #2
 800b60e:	e76f      	b.n	800b4f0 <_dtoa_r+0x3d8>
 800b610:	9b01      	ldr	r3, [sp, #4]
 800b612:	f8cd a01c 	str.w	sl, [sp, #28]
 800b616:	930c      	str	r3, [sp, #48]	; 0x30
 800b618:	e78d      	b.n	800b536 <_dtoa_r+0x41e>
 800b61a:	9900      	ldr	r1, [sp, #0]
 800b61c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b61e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b620:	4401      	add	r1, r0
 800b622:	4b4d      	ldr	r3, [pc, #308]	; (800b758 <_dtoa_r+0x640>)
 800b624:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b62c:	9102      	str	r1, [sp, #8]
 800b62e:	9908      	ldr	r1, [sp, #32]
 800b630:	eeb0 8a47 	vmov.f32	s16, s14
 800b634:	eef0 8a67 	vmov.f32	s17, s15
 800b638:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b63c:	2900      	cmp	r1, #0
 800b63e:	d045      	beq.n	800b6cc <_dtoa_r+0x5b4>
 800b640:	2000      	movs	r0, #0
 800b642:	494b      	ldr	r1, [pc, #300]	; (800b770 <_dtoa_r+0x658>)
 800b644:	f7f5 f8e6 	bl	8000814 <__aeabi_ddiv>
 800b648:	ec53 2b18 	vmov	r2, r3, d8
 800b64c:	f7f4 fe00 	bl	8000250 <__aeabi_dsub>
 800b650:	9d00      	ldr	r5, [sp, #0]
 800b652:	ec41 0b18 	vmov	d8, r0, r1
 800b656:	4639      	mov	r1, r7
 800b658:	4630      	mov	r0, r6
 800b65a:	f7f5 fa61 	bl	8000b20 <__aeabi_d2iz>
 800b65e:	900c      	str	r0, [sp, #48]	; 0x30
 800b660:	f7f4 ff44 	bl	80004ec <__aeabi_i2d>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4630      	mov	r0, r6
 800b66a:	4639      	mov	r1, r7
 800b66c:	f7f4 fdf0 	bl	8000250 <__aeabi_dsub>
 800b670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b672:	4606      	mov	r6, r0
 800b674:	460f      	mov	r7, r1
 800b676:	3330      	adds	r3, #48	; 0x30
 800b678:	f805 3b01 	strb.w	r3, [r5], #1
 800b67c:	ec53 2b18 	vmov	r2, r3, d8
 800b680:	f7f5 fa10 	bl	8000aa4 <__aeabi_dcmplt>
 800b684:	2800      	cmp	r0, #0
 800b686:	d164      	bne.n	800b752 <_dtoa_r+0x63a>
 800b688:	4632      	mov	r2, r6
 800b68a:	463b      	mov	r3, r7
 800b68c:	2000      	movs	r0, #0
 800b68e:	4934      	ldr	r1, [pc, #208]	; (800b760 <_dtoa_r+0x648>)
 800b690:	f7f4 fdde 	bl	8000250 <__aeabi_dsub>
 800b694:	ec53 2b18 	vmov	r2, r3, d8
 800b698:	f7f5 fa04 	bl	8000aa4 <__aeabi_dcmplt>
 800b69c:	2800      	cmp	r0, #0
 800b69e:	f040 80b7 	bne.w	800b810 <_dtoa_r+0x6f8>
 800b6a2:	9b02      	ldr	r3, [sp, #8]
 800b6a4:	429d      	cmp	r5, r3
 800b6a6:	f43f af75 	beq.w	800b594 <_dtoa_r+0x47c>
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	4b2d      	ldr	r3, [pc, #180]	; (800b764 <_dtoa_r+0x64c>)
 800b6ae:	ec51 0b18 	vmov	r0, r1, d8
 800b6b2:	f7f4 ff85 	bl	80005c0 <__aeabi_dmul>
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	4b2a      	ldr	r3, [pc, #168]	; (800b764 <_dtoa_r+0x64c>)
 800b6ba:	ec41 0b18 	vmov	d8, r0, r1
 800b6be:	4630      	mov	r0, r6
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	f7f4 ff7d 	bl	80005c0 <__aeabi_dmul>
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	460f      	mov	r7, r1
 800b6ca:	e7c4      	b.n	800b656 <_dtoa_r+0x53e>
 800b6cc:	ec51 0b17 	vmov	r0, r1, d7
 800b6d0:	f7f4 ff76 	bl	80005c0 <__aeabi_dmul>
 800b6d4:	9b02      	ldr	r3, [sp, #8]
 800b6d6:	9d00      	ldr	r5, [sp, #0]
 800b6d8:	930c      	str	r3, [sp, #48]	; 0x30
 800b6da:	ec41 0b18 	vmov	d8, r0, r1
 800b6de:	4639      	mov	r1, r7
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f7f5 fa1d 	bl	8000b20 <__aeabi_d2iz>
 800b6e6:	9011      	str	r0, [sp, #68]	; 0x44
 800b6e8:	f7f4 ff00 	bl	80004ec <__aeabi_i2d>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	f7f4 fdac 	bl	8000250 <__aeabi_dsub>
 800b6f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	460f      	mov	r7, r1
 800b6fe:	3330      	adds	r3, #48	; 0x30
 800b700:	2200      	movs	r2, #0
 800b702:	f805 3b01 	strb.w	r3, [r5], #1
 800b706:	9b02      	ldr	r3, [sp, #8]
 800b708:	429d      	cmp	r5, r3
 800b70a:	d133      	bne.n	800b774 <_dtoa_r+0x65c>
 800b70c:	4b18      	ldr	r3, [pc, #96]	; (800b770 <_dtoa_r+0x658>)
 800b70e:	ec51 0b18 	vmov	r0, r1, d8
 800b712:	f7f4 fd9f 	bl	8000254 <__adddf3>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	4630      	mov	r0, r6
 800b71c:	4639      	mov	r1, r7
 800b71e:	f7f5 f9df 	bl	8000ae0 <__aeabi_dcmpgt>
 800b722:	2800      	cmp	r0, #0
 800b724:	d174      	bne.n	800b810 <_dtoa_r+0x6f8>
 800b726:	2000      	movs	r0, #0
 800b728:	4911      	ldr	r1, [pc, #68]	; (800b770 <_dtoa_r+0x658>)
 800b72a:	ec53 2b18 	vmov	r2, r3, d8
 800b72e:	f7f4 fd8f 	bl	8000250 <__aeabi_dsub>
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	4630      	mov	r0, r6
 800b738:	4639      	mov	r1, r7
 800b73a:	f7f5 f9b3 	bl	8000aa4 <__aeabi_dcmplt>
 800b73e:	2800      	cmp	r0, #0
 800b740:	f43f af28 	beq.w	800b594 <_dtoa_r+0x47c>
 800b744:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b746:	1e6b      	subs	r3, r5, #1
 800b748:	930c      	str	r3, [sp, #48]	; 0x30
 800b74a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b74e:	2b30      	cmp	r3, #48	; 0x30
 800b750:	d0f8      	beq.n	800b744 <_dtoa_r+0x62c>
 800b752:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b756:	e049      	b.n	800b7ec <_dtoa_r+0x6d4>
 800b758:	08020698 	.word	0x08020698
 800b75c:	08020670 	.word	0x08020670
 800b760:	3ff00000 	.word	0x3ff00000
 800b764:	40240000 	.word	0x40240000
 800b768:	401c0000 	.word	0x401c0000
 800b76c:	40140000 	.word	0x40140000
 800b770:	3fe00000 	.word	0x3fe00000
 800b774:	4baf      	ldr	r3, [pc, #700]	; (800ba34 <_dtoa_r+0x91c>)
 800b776:	f7f4 ff23 	bl	80005c0 <__aeabi_dmul>
 800b77a:	4606      	mov	r6, r0
 800b77c:	460f      	mov	r7, r1
 800b77e:	e7ae      	b.n	800b6de <_dtoa_r+0x5c6>
 800b780:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b784:	9d00      	ldr	r5, [sp, #0]
 800b786:	4642      	mov	r2, r8
 800b788:	464b      	mov	r3, r9
 800b78a:	4630      	mov	r0, r6
 800b78c:	4639      	mov	r1, r7
 800b78e:	f7f5 f841 	bl	8000814 <__aeabi_ddiv>
 800b792:	f7f5 f9c5 	bl	8000b20 <__aeabi_d2iz>
 800b796:	9002      	str	r0, [sp, #8]
 800b798:	f7f4 fea8 	bl	80004ec <__aeabi_i2d>
 800b79c:	4642      	mov	r2, r8
 800b79e:	464b      	mov	r3, r9
 800b7a0:	f7f4 ff0e 	bl	80005c0 <__aeabi_dmul>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	4639      	mov	r1, r7
 800b7ac:	f7f4 fd50 	bl	8000250 <__aeabi_dsub>
 800b7b0:	9e02      	ldr	r6, [sp, #8]
 800b7b2:	9f01      	ldr	r7, [sp, #4]
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	3630      	adds	r6, #48	; 0x30
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	f805 6b01 	strb.w	r6, [r5], #1
 800b7be:	9e00      	ldr	r6, [sp, #0]
 800b7c0:	1bae      	subs	r6, r5, r6
 800b7c2:	42b7      	cmp	r7, r6
 800b7c4:	d137      	bne.n	800b836 <_dtoa_r+0x71e>
 800b7c6:	f7f4 fd45 	bl	8000254 <__adddf3>
 800b7ca:	4642      	mov	r2, r8
 800b7cc:	464b      	mov	r3, r9
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	460f      	mov	r7, r1
 800b7d2:	f7f5 f985 	bl	8000ae0 <__aeabi_dcmpgt>
 800b7d6:	b9c8      	cbnz	r0, 800b80c <_dtoa_r+0x6f4>
 800b7d8:	4642      	mov	r2, r8
 800b7da:	464b      	mov	r3, r9
 800b7dc:	4630      	mov	r0, r6
 800b7de:	4639      	mov	r1, r7
 800b7e0:	f7f5 f956 	bl	8000a90 <__aeabi_dcmpeq>
 800b7e4:	b110      	cbz	r0, 800b7ec <_dtoa_r+0x6d4>
 800b7e6:	9b02      	ldr	r3, [sp, #8]
 800b7e8:	07d9      	lsls	r1, r3, #31
 800b7ea:	d40f      	bmi.n	800b80c <_dtoa_r+0x6f4>
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	4659      	mov	r1, fp
 800b7f0:	f000 fae4 	bl	800bdbc <_Bfree>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f10a 0001 	add.w	r0, sl, #1
 800b7fa:	702b      	strb	r3, [r5, #0]
 800b7fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7fe:	6018      	str	r0, [r3, #0]
 800b800:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b802:	2b00      	cmp	r3, #0
 800b804:	f43f acdb 	beq.w	800b1be <_dtoa_r+0xa6>
 800b808:	601d      	str	r5, [r3, #0]
 800b80a:	e4d8      	b.n	800b1be <_dtoa_r+0xa6>
 800b80c:	f8cd a01c 	str.w	sl, [sp, #28]
 800b810:	462b      	mov	r3, r5
 800b812:	461d      	mov	r5, r3
 800b814:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b818:	2a39      	cmp	r2, #57	; 0x39
 800b81a:	d108      	bne.n	800b82e <_dtoa_r+0x716>
 800b81c:	9a00      	ldr	r2, [sp, #0]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d1f7      	bne.n	800b812 <_dtoa_r+0x6fa>
 800b822:	9a07      	ldr	r2, [sp, #28]
 800b824:	9900      	ldr	r1, [sp, #0]
 800b826:	3201      	adds	r2, #1
 800b828:	9207      	str	r2, [sp, #28]
 800b82a:	2230      	movs	r2, #48	; 0x30
 800b82c:	700a      	strb	r2, [r1, #0]
 800b82e:	781a      	ldrb	r2, [r3, #0]
 800b830:	3201      	adds	r2, #1
 800b832:	701a      	strb	r2, [r3, #0]
 800b834:	e78d      	b.n	800b752 <_dtoa_r+0x63a>
 800b836:	2200      	movs	r2, #0
 800b838:	4b7e      	ldr	r3, [pc, #504]	; (800ba34 <_dtoa_r+0x91c>)
 800b83a:	f7f4 fec1 	bl	80005c0 <__aeabi_dmul>
 800b83e:	2200      	movs	r2, #0
 800b840:	2300      	movs	r3, #0
 800b842:	4606      	mov	r6, r0
 800b844:	460f      	mov	r7, r1
 800b846:	f7f5 f923 	bl	8000a90 <__aeabi_dcmpeq>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d09b      	beq.n	800b786 <_dtoa_r+0x66e>
 800b84e:	e7cd      	b.n	800b7ec <_dtoa_r+0x6d4>
 800b850:	9a08      	ldr	r2, [sp, #32]
 800b852:	2a00      	cmp	r2, #0
 800b854:	f000 80c3 	beq.w	800b9de <_dtoa_r+0x8c6>
 800b858:	9a05      	ldr	r2, [sp, #20]
 800b85a:	2a01      	cmp	r2, #1
 800b85c:	f300 80a8 	bgt.w	800b9b0 <_dtoa_r+0x898>
 800b860:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b862:	2a00      	cmp	r2, #0
 800b864:	f000 80a0 	beq.w	800b9a8 <_dtoa_r+0x890>
 800b868:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b86c:	9e06      	ldr	r6, [sp, #24]
 800b86e:	4645      	mov	r5, r8
 800b870:	9a04      	ldr	r2, [sp, #16]
 800b872:	2101      	movs	r1, #1
 800b874:	4620      	mov	r0, r4
 800b876:	4498      	add	r8, r3
 800b878:	441a      	add	r2, r3
 800b87a:	9204      	str	r2, [sp, #16]
 800b87c:	f000 fb5a 	bl	800bf34 <__i2b>
 800b880:	4607      	mov	r7, r0
 800b882:	2d00      	cmp	r5, #0
 800b884:	dd0b      	ble.n	800b89e <_dtoa_r+0x786>
 800b886:	9b04      	ldr	r3, [sp, #16]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	dd08      	ble.n	800b89e <_dtoa_r+0x786>
 800b88c:	42ab      	cmp	r3, r5
 800b88e:	9a04      	ldr	r2, [sp, #16]
 800b890:	bfa8      	it	ge
 800b892:	462b      	movge	r3, r5
 800b894:	eba8 0803 	sub.w	r8, r8, r3
 800b898:	1aed      	subs	r5, r5, r3
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	9304      	str	r3, [sp, #16]
 800b89e:	9b06      	ldr	r3, [sp, #24]
 800b8a0:	b1fb      	cbz	r3, 800b8e2 <_dtoa_r+0x7ca>
 800b8a2:	9b08      	ldr	r3, [sp, #32]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	f000 809e 	beq.w	800b9e6 <_dtoa_r+0x8ce>
 800b8aa:	2e00      	cmp	r6, #0
 800b8ac:	dd11      	ble.n	800b8d2 <_dtoa_r+0x7ba>
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	4632      	mov	r2, r6
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f000 fbfa 	bl	800c0ac <__pow5mult>
 800b8b8:	465a      	mov	r2, fp
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	4607      	mov	r7, r0
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f000 fb4e 	bl	800bf60 <__multiply>
 800b8c4:	4659      	mov	r1, fp
 800b8c6:	9007      	str	r0, [sp, #28]
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	f000 fa77 	bl	800bdbc <_Bfree>
 800b8ce:	9b07      	ldr	r3, [sp, #28]
 800b8d0:	469b      	mov	fp, r3
 800b8d2:	9b06      	ldr	r3, [sp, #24]
 800b8d4:	1b9a      	subs	r2, r3, r6
 800b8d6:	d004      	beq.n	800b8e2 <_dtoa_r+0x7ca>
 800b8d8:	4659      	mov	r1, fp
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f000 fbe6 	bl	800c0ac <__pow5mult>
 800b8e0:	4683      	mov	fp, r0
 800b8e2:	2101      	movs	r1, #1
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f000 fb25 	bl	800bf34 <__i2b>
 800b8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	dd7b      	ble.n	800b9ea <_dtoa_r+0x8d2>
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	4601      	mov	r1, r0
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f000 fbd8 	bl	800c0ac <__pow5mult>
 800b8fc:	9b05      	ldr	r3, [sp, #20]
 800b8fe:	4606      	mov	r6, r0
 800b900:	2b01      	cmp	r3, #1
 800b902:	dd75      	ble.n	800b9f0 <_dtoa_r+0x8d8>
 800b904:	2300      	movs	r3, #0
 800b906:	9306      	str	r3, [sp, #24]
 800b908:	6933      	ldr	r3, [r6, #16]
 800b90a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b90e:	6918      	ldr	r0, [r3, #16]
 800b910:	f000 fac0 	bl	800be94 <__hi0bits>
 800b914:	f1c0 0020 	rsb	r0, r0, #32
 800b918:	9b04      	ldr	r3, [sp, #16]
 800b91a:	4418      	add	r0, r3
 800b91c:	f010 001f 	ands.w	r0, r0, #31
 800b920:	f000 8085 	beq.w	800ba2e <_dtoa_r+0x916>
 800b924:	f1c0 0320 	rsb	r3, r0, #32
 800b928:	2b04      	cmp	r3, #4
 800b92a:	dd7e      	ble.n	800ba2a <_dtoa_r+0x912>
 800b92c:	f1c0 001c 	rsb	r0, r0, #28
 800b930:	9b04      	ldr	r3, [sp, #16]
 800b932:	4480      	add	r8, r0
 800b934:	4405      	add	r5, r0
 800b936:	4403      	add	r3, r0
 800b938:	9304      	str	r3, [sp, #16]
 800b93a:	f1b8 0f00 	cmp.w	r8, #0
 800b93e:	dd05      	ble.n	800b94c <_dtoa_r+0x834>
 800b940:	4659      	mov	r1, fp
 800b942:	4642      	mov	r2, r8
 800b944:	4620      	mov	r0, r4
 800b946:	f000 fc0b 	bl	800c160 <__lshift>
 800b94a:	4683      	mov	fp, r0
 800b94c:	9b04      	ldr	r3, [sp, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	dd05      	ble.n	800b95e <_dtoa_r+0x846>
 800b952:	4631      	mov	r1, r6
 800b954:	461a      	mov	r2, r3
 800b956:	4620      	mov	r0, r4
 800b958:	f000 fc02 	bl	800c160 <__lshift>
 800b95c:	4606      	mov	r6, r0
 800b95e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b960:	2b00      	cmp	r3, #0
 800b962:	d069      	beq.n	800ba38 <_dtoa_r+0x920>
 800b964:	4631      	mov	r1, r6
 800b966:	4658      	mov	r0, fp
 800b968:	f000 fc66 	bl	800c238 <__mcmp>
 800b96c:	2800      	cmp	r0, #0
 800b96e:	da63      	bge.n	800ba38 <_dtoa_r+0x920>
 800b970:	2300      	movs	r3, #0
 800b972:	4659      	mov	r1, fp
 800b974:	220a      	movs	r2, #10
 800b976:	4620      	mov	r0, r4
 800b978:	f000 fa42 	bl	800be00 <__multadd>
 800b97c:	9b08      	ldr	r3, [sp, #32]
 800b97e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b982:	4683      	mov	fp, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	f000 818f 	beq.w	800bca8 <_dtoa_r+0xb90>
 800b98a:	4639      	mov	r1, r7
 800b98c:	2300      	movs	r3, #0
 800b98e:	220a      	movs	r2, #10
 800b990:	4620      	mov	r0, r4
 800b992:	f000 fa35 	bl	800be00 <__multadd>
 800b996:	f1b9 0f00 	cmp.w	r9, #0
 800b99a:	4607      	mov	r7, r0
 800b99c:	f300 808e 	bgt.w	800babc <_dtoa_r+0x9a4>
 800b9a0:	9b05      	ldr	r3, [sp, #20]
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	dc50      	bgt.n	800ba48 <_dtoa_r+0x930>
 800b9a6:	e089      	b.n	800babc <_dtoa_r+0x9a4>
 800b9a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b9aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9ae:	e75d      	b.n	800b86c <_dtoa_r+0x754>
 800b9b0:	9b01      	ldr	r3, [sp, #4]
 800b9b2:	1e5e      	subs	r6, r3, #1
 800b9b4:	9b06      	ldr	r3, [sp, #24]
 800b9b6:	42b3      	cmp	r3, r6
 800b9b8:	bfb7      	itett	lt
 800b9ba:	9b06      	ldrlt	r3, [sp, #24]
 800b9bc:	1b9e      	subge	r6, r3, r6
 800b9be:	9606      	strlt	r6, [sp, #24]
 800b9c0:	1af2      	sublt	r2, r6, r3
 800b9c2:	bfbf      	itttt	lt
 800b9c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b9c6:	2600      	movlt	r6, #0
 800b9c8:	189b      	addlt	r3, r3, r2
 800b9ca:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b9cc:	9b01      	ldr	r3, [sp, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	bfb5      	itete	lt
 800b9d2:	eba8 0503 	sublt.w	r5, r8, r3
 800b9d6:	4645      	movge	r5, r8
 800b9d8:	2300      	movlt	r3, #0
 800b9da:	9b01      	ldrge	r3, [sp, #4]
 800b9dc:	e748      	b.n	800b870 <_dtoa_r+0x758>
 800b9de:	9e06      	ldr	r6, [sp, #24]
 800b9e0:	4645      	mov	r5, r8
 800b9e2:	9f08      	ldr	r7, [sp, #32]
 800b9e4:	e74d      	b.n	800b882 <_dtoa_r+0x76a>
 800b9e6:	9a06      	ldr	r2, [sp, #24]
 800b9e8:	e776      	b.n	800b8d8 <_dtoa_r+0x7c0>
 800b9ea:	9b05      	ldr	r3, [sp, #20]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	dc18      	bgt.n	800ba22 <_dtoa_r+0x90a>
 800b9f0:	9b02      	ldr	r3, [sp, #8]
 800b9f2:	b9b3      	cbnz	r3, 800ba22 <_dtoa_r+0x90a>
 800b9f4:	9b03      	ldr	r3, [sp, #12]
 800b9f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9fa:	b9a3      	cbnz	r3, 800ba26 <_dtoa_r+0x90e>
 800b9fc:	9b03      	ldr	r3, [sp, #12]
 800b9fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba02:	0d1b      	lsrs	r3, r3, #20
 800ba04:	051b      	lsls	r3, r3, #20
 800ba06:	b12b      	cbz	r3, 800ba14 <_dtoa_r+0x8fc>
 800ba08:	9b04      	ldr	r3, [sp, #16]
 800ba0a:	f108 0801 	add.w	r8, r8, #1
 800ba0e:	3301      	adds	r3, #1
 800ba10:	9304      	str	r3, [sp, #16]
 800ba12:	2301      	movs	r3, #1
 800ba14:	9306      	str	r3, [sp, #24]
 800ba16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f47f af75 	bne.w	800b908 <_dtoa_r+0x7f0>
 800ba1e:	2001      	movs	r0, #1
 800ba20:	e77a      	b.n	800b918 <_dtoa_r+0x800>
 800ba22:	2300      	movs	r3, #0
 800ba24:	e7f6      	b.n	800ba14 <_dtoa_r+0x8fc>
 800ba26:	9b02      	ldr	r3, [sp, #8]
 800ba28:	e7f4      	b.n	800ba14 <_dtoa_r+0x8fc>
 800ba2a:	d086      	beq.n	800b93a <_dtoa_r+0x822>
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	301c      	adds	r0, #28
 800ba30:	e77e      	b.n	800b930 <_dtoa_r+0x818>
 800ba32:	bf00      	nop
 800ba34:	40240000 	.word	0x40240000
 800ba38:	9b01      	ldr	r3, [sp, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	dc38      	bgt.n	800bab0 <_dtoa_r+0x998>
 800ba3e:	9b05      	ldr	r3, [sp, #20]
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	dd35      	ble.n	800bab0 <_dtoa_r+0x998>
 800ba44:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ba48:	f1b9 0f00 	cmp.w	r9, #0
 800ba4c:	d10d      	bne.n	800ba6a <_dtoa_r+0x952>
 800ba4e:	4631      	mov	r1, r6
 800ba50:	464b      	mov	r3, r9
 800ba52:	2205      	movs	r2, #5
 800ba54:	4620      	mov	r0, r4
 800ba56:	f000 f9d3 	bl	800be00 <__multadd>
 800ba5a:	4601      	mov	r1, r0
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	4658      	mov	r0, fp
 800ba60:	f000 fbea 	bl	800c238 <__mcmp>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	f73f adbf 	bgt.w	800b5e8 <_dtoa_r+0x4d0>
 800ba6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba6c:	9d00      	ldr	r5, [sp, #0]
 800ba6e:	ea6f 0a03 	mvn.w	sl, r3
 800ba72:	f04f 0800 	mov.w	r8, #0
 800ba76:	4631      	mov	r1, r6
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f000 f99f 	bl	800bdbc <_Bfree>
 800ba7e:	2f00      	cmp	r7, #0
 800ba80:	f43f aeb4 	beq.w	800b7ec <_dtoa_r+0x6d4>
 800ba84:	f1b8 0f00 	cmp.w	r8, #0
 800ba88:	d005      	beq.n	800ba96 <_dtoa_r+0x97e>
 800ba8a:	45b8      	cmp	r8, r7
 800ba8c:	d003      	beq.n	800ba96 <_dtoa_r+0x97e>
 800ba8e:	4641      	mov	r1, r8
 800ba90:	4620      	mov	r0, r4
 800ba92:	f000 f993 	bl	800bdbc <_Bfree>
 800ba96:	4639      	mov	r1, r7
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f000 f98f 	bl	800bdbc <_Bfree>
 800ba9e:	e6a5      	b.n	800b7ec <_dtoa_r+0x6d4>
 800baa0:	2600      	movs	r6, #0
 800baa2:	4637      	mov	r7, r6
 800baa4:	e7e1      	b.n	800ba6a <_dtoa_r+0x952>
 800baa6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800baa8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800baac:	4637      	mov	r7, r6
 800baae:	e59b      	b.n	800b5e8 <_dtoa_r+0x4d0>
 800bab0:	9b08      	ldr	r3, [sp, #32]
 800bab2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f000 80fd 	beq.w	800bcb6 <_dtoa_r+0xb9e>
 800babc:	2d00      	cmp	r5, #0
 800babe:	dd05      	ble.n	800bacc <_dtoa_r+0x9b4>
 800bac0:	4639      	mov	r1, r7
 800bac2:	462a      	mov	r2, r5
 800bac4:	4620      	mov	r0, r4
 800bac6:	f000 fb4b 	bl	800c160 <__lshift>
 800baca:	4607      	mov	r7, r0
 800bacc:	9b06      	ldr	r3, [sp, #24]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d05c      	beq.n	800bb8c <_dtoa_r+0xa74>
 800bad2:	6879      	ldr	r1, [r7, #4]
 800bad4:	4620      	mov	r0, r4
 800bad6:	f000 f931 	bl	800bd3c <_Balloc>
 800bada:	4605      	mov	r5, r0
 800badc:	b928      	cbnz	r0, 800baea <_dtoa_r+0x9d2>
 800bade:	4b80      	ldr	r3, [pc, #512]	; (800bce0 <_dtoa_r+0xbc8>)
 800bae0:	4602      	mov	r2, r0
 800bae2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bae6:	f7ff bb30 	b.w	800b14a <_dtoa_r+0x32>
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	f107 010c 	add.w	r1, r7, #12
 800baf0:	300c      	adds	r0, #12
 800baf2:	3202      	adds	r2, #2
 800baf4:	0092      	lsls	r2, r2, #2
 800baf6:	f000 f913 	bl	800bd20 <memcpy>
 800bafa:	2201      	movs	r2, #1
 800bafc:	4629      	mov	r1, r5
 800bafe:	4620      	mov	r0, r4
 800bb00:	f000 fb2e 	bl	800c160 <__lshift>
 800bb04:	9b00      	ldr	r3, [sp, #0]
 800bb06:	46b8      	mov	r8, r7
 800bb08:	4607      	mov	r7, r0
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	9301      	str	r3, [sp, #4]
 800bb0e:	9b00      	ldr	r3, [sp, #0]
 800bb10:	444b      	add	r3, r9
 800bb12:	9307      	str	r3, [sp, #28]
 800bb14:	9b02      	ldr	r3, [sp, #8]
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	9306      	str	r3, [sp, #24]
 800bb1c:	9b01      	ldr	r3, [sp, #4]
 800bb1e:	4631      	mov	r1, r6
 800bb20:	4658      	mov	r0, fp
 800bb22:	3b01      	subs	r3, #1
 800bb24:	9302      	str	r3, [sp, #8]
 800bb26:	f7ff fa65 	bl	800aff4 <quorem>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	4641      	mov	r1, r8
 800bb2e:	9004      	str	r0, [sp, #16]
 800bb30:	4658      	mov	r0, fp
 800bb32:	3330      	adds	r3, #48	; 0x30
 800bb34:	9308      	str	r3, [sp, #32]
 800bb36:	f000 fb7f 	bl	800c238 <__mcmp>
 800bb3a:	463a      	mov	r2, r7
 800bb3c:	4681      	mov	r9, r0
 800bb3e:	4631      	mov	r1, r6
 800bb40:	4620      	mov	r0, r4
 800bb42:	f000 fb95 	bl	800c270 <__mdiff>
 800bb46:	68c2      	ldr	r2, [r0, #12]
 800bb48:	4605      	mov	r5, r0
 800bb4a:	9b08      	ldr	r3, [sp, #32]
 800bb4c:	bb02      	cbnz	r2, 800bb90 <_dtoa_r+0xa78>
 800bb4e:	4601      	mov	r1, r0
 800bb50:	4658      	mov	r0, fp
 800bb52:	f000 fb71 	bl	800c238 <__mcmp>
 800bb56:	9b08      	ldr	r3, [sp, #32]
 800bb58:	4602      	mov	r2, r0
 800bb5a:	4629      	mov	r1, r5
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bb62:	f000 f92b 	bl	800bdbc <_Bfree>
 800bb66:	9b05      	ldr	r3, [sp, #20]
 800bb68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb6a:	9d01      	ldr	r5, [sp, #4]
 800bb6c:	ea43 0102 	orr.w	r1, r3, r2
 800bb70:	9b06      	ldr	r3, [sp, #24]
 800bb72:	430b      	orrs	r3, r1
 800bb74:	9b08      	ldr	r3, [sp, #32]
 800bb76:	d10d      	bne.n	800bb94 <_dtoa_r+0xa7c>
 800bb78:	2b39      	cmp	r3, #57	; 0x39
 800bb7a:	d029      	beq.n	800bbd0 <_dtoa_r+0xab8>
 800bb7c:	f1b9 0f00 	cmp.w	r9, #0
 800bb80:	dd01      	ble.n	800bb86 <_dtoa_r+0xa6e>
 800bb82:	9b04      	ldr	r3, [sp, #16]
 800bb84:	3331      	adds	r3, #49	; 0x31
 800bb86:	9a02      	ldr	r2, [sp, #8]
 800bb88:	7013      	strb	r3, [r2, #0]
 800bb8a:	e774      	b.n	800ba76 <_dtoa_r+0x95e>
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	e7b9      	b.n	800bb04 <_dtoa_r+0x9ec>
 800bb90:	2201      	movs	r2, #1
 800bb92:	e7e2      	b.n	800bb5a <_dtoa_r+0xa42>
 800bb94:	f1b9 0f00 	cmp.w	r9, #0
 800bb98:	db06      	blt.n	800bba8 <_dtoa_r+0xa90>
 800bb9a:	9905      	ldr	r1, [sp, #20]
 800bb9c:	ea41 0909 	orr.w	r9, r1, r9
 800bba0:	9906      	ldr	r1, [sp, #24]
 800bba2:	ea59 0101 	orrs.w	r1, r9, r1
 800bba6:	d120      	bne.n	800bbea <_dtoa_r+0xad2>
 800bba8:	2a00      	cmp	r2, #0
 800bbaa:	ddec      	ble.n	800bb86 <_dtoa_r+0xa6e>
 800bbac:	4659      	mov	r1, fp
 800bbae:	2201      	movs	r2, #1
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	9301      	str	r3, [sp, #4]
 800bbb4:	f000 fad4 	bl	800c160 <__lshift>
 800bbb8:	4631      	mov	r1, r6
 800bbba:	4683      	mov	fp, r0
 800bbbc:	f000 fb3c 	bl	800c238 <__mcmp>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	9b01      	ldr	r3, [sp, #4]
 800bbc4:	dc02      	bgt.n	800bbcc <_dtoa_r+0xab4>
 800bbc6:	d1de      	bne.n	800bb86 <_dtoa_r+0xa6e>
 800bbc8:	07da      	lsls	r2, r3, #31
 800bbca:	d5dc      	bpl.n	800bb86 <_dtoa_r+0xa6e>
 800bbcc:	2b39      	cmp	r3, #57	; 0x39
 800bbce:	d1d8      	bne.n	800bb82 <_dtoa_r+0xa6a>
 800bbd0:	2339      	movs	r3, #57	; 0x39
 800bbd2:	9a02      	ldr	r2, [sp, #8]
 800bbd4:	7013      	strb	r3, [r2, #0]
 800bbd6:	462b      	mov	r3, r5
 800bbd8:	461d      	mov	r5, r3
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bbe0:	2a39      	cmp	r2, #57	; 0x39
 800bbe2:	d050      	beq.n	800bc86 <_dtoa_r+0xb6e>
 800bbe4:	3201      	adds	r2, #1
 800bbe6:	701a      	strb	r2, [r3, #0]
 800bbe8:	e745      	b.n	800ba76 <_dtoa_r+0x95e>
 800bbea:	2a00      	cmp	r2, #0
 800bbec:	dd03      	ble.n	800bbf6 <_dtoa_r+0xade>
 800bbee:	2b39      	cmp	r3, #57	; 0x39
 800bbf0:	d0ee      	beq.n	800bbd0 <_dtoa_r+0xab8>
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	e7c7      	b.n	800bb86 <_dtoa_r+0xa6e>
 800bbf6:	9a01      	ldr	r2, [sp, #4]
 800bbf8:	9907      	ldr	r1, [sp, #28]
 800bbfa:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bbfe:	428a      	cmp	r2, r1
 800bc00:	d02a      	beq.n	800bc58 <_dtoa_r+0xb40>
 800bc02:	4659      	mov	r1, fp
 800bc04:	2300      	movs	r3, #0
 800bc06:	220a      	movs	r2, #10
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f000 f8f9 	bl	800be00 <__multadd>
 800bc0e:	45b8      	cmp	r8, r7
 800bc10:	4683      	mov	fp, r0
 800bc12:	f04f 0300 	mov.w	r3, #0
 800bc16:	f04f 020a 	mov.w	r2, #10
 800bc1a:	4641      	mov	r1, r8
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	d107      	bne.n	800bc30 <_dtoa_r+0xb18>
 800bc20:	f000 f8ee 	bl	800be00 <__multadd>
 800bc24:	4680      	mov	r8, r0
 800bc26:	4607      	mov	r7, r0
 800bc28:	9b01      	ldr	r3, [sp, #4]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	e775      	b.n	800bb1c <_dtoa_r+0xa04>
 800bc30:	f000 f8e6 	bl	800be00 <__multadd>
 800bc34:	4639      	mov	r1, r7
 800bc36:	4680      	mov	r8, r0
 800bc38:	2300      	movs	r3, #0
 800bc3a:	220a      	movs	r2, #10
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	f000 f8df 	bl	800be00 <__multadd>
 800bc42:	4607      	mov	r7, r0
 800bc44:	e7f0      	b.n	800bc28 <_dtoa_r+0xb10>
 800bc46:	f1b9 0f00 	cmp.w	r9, #0
 800bc4a:	9a00      	ldr	r2, [sp, #0]
 800bc4c:	f04f 0800 	mov.w	r8, #0
 800bc50:	bfcc      	ite	gt
 800bc52:	464d      	movgt	r5, r9
 800bc54:	2501      	movle	r5, #1
 800bc56:	4415      	add	r5, r2
 800bc58:	4659      	mov	r1, fp
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	9301      	str	r3, [sp, #4]
 800bc60:	f000 fa7e 	bl	800c160 <__lshift>
 800bc64:	4631      	mov	r1, r6
 800bc66:	4683      	mov	fp, r0
 800bc68:	f000 fae6 	bl	800c238 <__mcmp>
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	dcb2      	bgt.n	800bbd6 <_dtoa_r+0xabe>
 800bc70:	d102      	bne.n	800bc78 <_dtoa_r+0xb60>
 800bc72:	9b01      	ldr	r3, [sp, #4]
 800bc74:	07db      	lsls	r3, r3, #31
 800bc76:	d4ae      	bmi.n	800bbd6 <_dtoa_r+0xabe>
 800bc78:	462b      	mov	r3, r5
 800bc7a:	461d      	mov	r5, r3
 800bc7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc80:	2a30      	cmp	r2, #48	; 0x30
 800bc82:	d0fa      	beq.n	800bc7a <_dtoa_r+0xb62>
 800bc84:	e6f7      	b.n	800ba76 <_dtoa_r+0x95e>
 800bc86:	9a00      	ldr	r2, [sp, #0]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d1a5      	bne.n	800bbd8 <_dtoa_r+0xac0>
 800bc8c:	f10a 0a01 	add.w	sl, sl, #1
 800bc90:	2331      	movs	r3, #49	; 0x31
 800bc92:	e779      	b.n	800bb88 <_dtoa_r+0xa70>
 800bc94:	4b13      	ldr	r3, [pc, #76]	; (800bce4 <_dtoa_r+0xbcc>)
 800bc96:	f7ff bab2 	b.w	800b1fe <_dtoa_r+0xe6>
 800bc9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f47f aa89 	bne.w	800b1b4 <_dtoa_r+0x9c>
 800bca2:	4b11      	ldr	r3, [pc, #68]	; (800bce8 <_dtoa_r+0xbd0>)
 800bca4:	f7ff baab 	b.w	800b1fe <_dtoa_r+0xe6>
 800bca8:	f1b9 0f00 	cmp.w	r9, #0
 800bcac:	dc03      	bgt.n	800bcb6 <_dtoa_r+0xb9e>
 800bcae:	9b05      	ldr	r3, [sp, #20]
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	f73f aec9 	bgt.w	800ba48 <_dtoa_r+0x930>
 800bcb6:	9d00      	ldr	r5, [sp, #0]
 800bcb8:	4631      	mov	r1, r6
 800bcba:	4658      	mov	r0, fp
 800bcbc:	f7ff f99a 	bl	800aff4 <quorem>
 800bcc0:	9a00      	ldr	r2, [sp, #0]
 800bcc2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bcc6:	f805 3b01 	strb.w	r3, [r5], #1
 800bcca:	1aaa      	subs	r2, r5, r2
 800bccc:	4591      	cmp	r9, r2
 800bcce:	ddba      	ble.n	800bc46 <_dtoa_r+0xb2e>
 800bcd0:	4659      	mov	r1, fp
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	220a      	movs	r2, #10
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f000 f892 	bl	800be00 <__multadd>
 800bcdc:	4683      	mov	fp, r0
 800bcde:	e7eb      	b.n	800bcb8 <_dtoa_r+0xba0>
 800bce0:	080205ff 	.word	0x080205ff
 800bce4:	08020558 	.word	0x08020558
 800bce8:	0802057c 	.word	0x0802057c

0800bcec <_localeconv_r>:
 800bcec:	4800      	ldr	r0, [pc, #0]	; (800bcf0 <_localeconv_r+0x4>)
 800bcee:	4770      	bx	lr
 800bcf0:	2000016c 	.word	0x2000016c

0800bcf4 <malloc>:
 800bcf4:	4b02      	ldr	r3, [pc, #8]	; (800bd00 <malloc+0xc>)
 800bcf6:	4601      	mov	r1, r0
 800bcf8:	6818      	ldr	r0, [r3, #0]
 800bcfa:	f000 bc05 	b.w	800c508 <_malloc_r>
 800bcfe:	bf00      	nop
 800bd00:	20000018 	.word	0x20000018

0800bd04 <memchr>:
 800bd04:	b2c9      	uxtb	r1, r1
 800bd06:	4402      	add	r2, r0
 800bd08:	b510      	push	{r4, lr}
 800bd0a:	4290      	cmp	r0, r2
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	d101      	bne.n	800bd14 <memchr+0x10>
 800bd10:	2300      	movs	r3, #0
 800bd12:	e003      	b.n	800bd1c <memchr+0x18>
 800bd14:	781c      	ldrb	r4, [r3, #0]
 800bd16:	3001      	adds	r0, #1
 800bd18:	428c      	cmp	r4, r1
 800bd1a:	d1f6      	bne.n	800bd0a <memchr+0x6>
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	bd10      	pop	{r4, pc}

0800bd20 <memcpy>:
 800bd20:	440a      	add	r2, r1
 800bd22:	1e43      	subs	r3, r0, #1
 800bd24:	4291      	cmp	r1, r2
 800bd26:	d100      	bne.n	800bd2a <memcpy+0xa>
 800bd28:	4770      	bx	lr
 800bd2a:	b510      	push	{r4, lr}
 800bd2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd30:	4291      	cmp	r1, r2
 800bd32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd36:	d1f9      	bne.n	800bd2c <memcpy+0xc>
 800bd38:	bd10      	pop	{r4, pc}
	...

0800bd3c <_Balloc>:
 800bd3c:	b570      	push	{r4, r5, r6, lr}
 800bd3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd40:	4604      	mov	r4, r0
 800bd42:	460d      	mov	r5, r1
 800bd44:	b976      	cbnz	r6, 800bd64 <_Balloc+0x28>
 800bd46:	2010      	movs	r0, #16
 800bd48:	f7ff ffd4 	bl	800bcf4 <malloc>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	6260      	str	r0, [r4, #36]	; 0x24
 800bd50:	b920      	cbnz	r0, 800bd5c <_Balloc+0x20>
 800bd52:	4b18      	ldr	r3, [pc, #96]	; (800bdb4 <_Balloc+0x78>)
 800bd54:	2166      	movs	r1, #102	; 0x66
 800bd56:	4818      	ldr	r0, [pc, #96]	; (800bdb8 <_Balloc+0x7c>)
 800bd58:	f000 fd9c 	bl	800c894 <__assert_func>
 800bd5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd60:	6006      	str	r6, [r0, #0]
 800bd62:	60c6      	str	r6, [r0, #12]
 800bd64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd66:	68f3      	ldr	r3, [r6, #12]
 800bd68:	b183      	cbz	r3, 800bd8c <_Balloc+0x50>
 800bd6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd72:	b9b8      	cbnz	r0, 800bda4 <_Balloc+0x68>
 800bd74:	2101      	movs	r1, #1
 800bd76:	4620      	mov	r0, r4
 800bd78:	fa01 f605 	lsl.w	r6, r1, r5
 800bd7c:	1d72      	adds	r2, r6, #5
 800bd7e:	0092      	lsls	r2, r2, #2
 800bd80:	f000 fb62 	bl	800c448 <_calloc_r>
 800bd84:	b160      	cbz	r0, 800bda0 <_Balloc+0x64>
 800bd86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd8a:	e00e      	b.n	800bdaa <_Balloc+0x6e>
 800bd8c:	2221      	movs	r2, #33	; 0x21
 800bd8e:	2104      	movs	r1, #4
 800bd90:	4620      	mov	r0, r4
 800bd92:	f000 fb59 	bl	800c448 <_calloc_r>
 800bd96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd98:	60f0      	str	r0, [r6, #12]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1e4      	bne.n	800bd6a <_Balloc+0x2e>
 800bda0:	2000      	movs	r0, #0
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	6802      	ldr	r2, [r0, #0]
 800bda6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bdb0:	e7f7      	b.n	800bda2 <_Balloc+0x66>
 800bdb2:	bf00      	nop
 800bdb4:	08020589 	.word	0x08020589
 800bdb8:	08020610 	.word	0x08020610

0800bdbc <_Bfree>:
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	b976      	cbnz	r6, 800bde4 <_Bfree+0x28>
 800bdc6:	2010      	movs	r0, #16
 800bdc8:	f7ff ff94 	bl	800bcf4 <malloc>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	6268      	str	r0, [r5, #36]	; 0x24
 800bdd0:	b920      	cbnz	r0, 800bddc <_Bfree+0x20>
 800bdd2:	4b09      	ldr	r3, [pc, #36]	; (800bdf8 <_Bfree+0x3c>)
 800bdd4:	218a      	movs	r1, #138	; 0x8a
 800bdd6:	4809      	ldr	r0, [pc, #36]	; (800bdfc <_Bfree+0x40>)
 800bdd8:	f000 fd5c 	bl	800c894 <__assert_func>
 800bddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bde0:	6006      	str	r6, [r0, #0]
 800bde2:	60c6      	str	r6, [r0, #12]
 800bde4:	b13c      	cbz	r4, 800bdf6 <_Bfree+0x3a>
 800bde6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bde8:	6862      	ldr	r2, [r4, #4]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdf0:	6021      	str	r1, [r4, #0]
 800bdf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}
 800bdf8:	08020589 	.word	0x08020589
 800bdfc:	08020610 	.word	0x08020610

0800be00 <__multadd>:
 800be00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be04:	4607      	mov	r7, r0
 800be06:	4698      	mov	r8, r3
 800be08:	460c      	mov	r4, r1
 800be0a:	690e      	ldr	r6, [r1, #16]
 800be0c:	f101 0014 	add.w	r0, r1, #20
 800be10:	2300      	movs	r3, #0
 800be12:	6805      	ldr	r5, [r0, #0]
 800be14:	3301      	adds	r3, #1
 800be16:	b2a9      	uxth	r1, r5
 800be18:	429e      	cmp	r6, r3
 800be1a:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800be1e:	fb02 8101 	mla	r1, r2, r1, r8
 800be22:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800be26:	b289      	uxth	r1, r1
 800be28:	fb02 c505 	mla	r5, r2, r5, ip
 800be2c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800be30:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800be34:	f840 1b04 	str.w	r1, [r0], #4
 800be38:	dceb      	bgt.n	800be12 <__multadd+0x12>
 800be3a:	f1b8 0f00 	cmp.w	r8, #0
 800be3e:	d022      	beq.n	800be86 <__multadd+0x86>
 800be40:	68a3      	ldr	r3, [r4, #8]
 800be42:	42b3      	cmp	r3, r6
 800be44:	dc19      	bgt.n	800be7a <__multadd+0x7a>
 800be46:	6861      	ldr	r1, [r4, #4]
 800be48:	4638      	mov	r0, r7
 800be4a:	3101      	adds	r1, #1
 800be4c:	f7ff ff76 	bl	800bd3c <_Balloc>
 800be50:	4605      	mov	r5, r0
 800be52:	b928      	cbnz	r0, 800be60 <__multadd+0x60>
 800be54:	4602      	mov	r2, r0
 800be56:	4b0d      	ldr	r3, [pc, #52]	; (800be8c <__multadd+0x8c>)
 800be58:	21b5      	movs	r1, #181	; 0xb5
 800be5a:	480d      	ldr	r0, [pc, #52]	; (800be90 <__multadd+0x90>)
 800be5c:	f000 fd1a 	bl	800c894 <__assert_func>
 800be60:	6922      	ldr	r2, [r4, #16]
 800be62:	f104 010c 	add.w	r1, r4, #12
 800be66:	300c      	adds	r0, #12
 800be68:	3202      	adds	r2, #2
 800be6a:	0092      	lsls	r2, r2, #2
 800be6c:	f7ff ff58 	bl	800bd20 <memcpy>
 800be70:	4621      	mov	r1, r4
 800be72:	462c      	mov	r4, r5
 800be74:	4638      	mov	r0, r7
 800be76:	f7ff ffa1 	bl	800bdbc <_Bfree>
 800be7a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800be7e:	3601      	adds	r6, #1
 800be80:	f8c3 8014 	str.w	r8, [r3, #20]
 800be84:	6126      	str	r6, [r4, #16]
 800be86:	4620      	mov	r0, r4
 800be88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be8c:	080205ff 	.word	0x080205ff
 800be90:	08020610 	.word	0x08020610

0800be94 <__hi0bits>:
 800be94:	0c03      	lsrs	r3, r0, #16
 800be96:	041b      	lsls	r3, r3, #16
 800be98:	b9d3      	cbnz	r3, 800bed0 <__hi0bits+0x3c>
 800be9a:	0400      	lsls	r0, r0, #16
 800be9c:	2310      	movs	r3, #16
 800be9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bea2:	bf04      	itt	eq
 800bea4:	0200      	lsleq	r0, r0, #8
 800bea6:	3308      	addeq	r3, #8
 800bea8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800beac:	bf04      	itt	eq
 800beae:	0100      	lsleq	r0, r0, #4
 800beb0:	3304      	addeq	r3, #4
 800beb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800beb6:	bf04      	itt	eq
 800beb8:	0080      	lsleq	r0, r0, #2
 800beba:	3302      	addeq	r3, #2
 800bebc:	2800      	cmp	r0, #0
 800bebe:	db05      	blt.n	800becc <__hi0bits+0x38>
 800bec0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bec4:	f103 0301 	add.w	r3, r3, #1
 800bec8:	bf08      	it	eq
 800beca:	2320      	moveq	r3, #32
 800becc:	4618      	mov	r0, r3
 800bece:	4770      	bx	lr
 800bed0:	2300      	movs	r3, #0
 800bed2:	e7e4      	b.n	800be9e <__hi0bits+0xa>

0800bed4 <__lo0bits>:
 800bed4:	6803      	ldr	r3, [r0, #0]
 800bed6:	4601      	mov	r1, r0
 800bed8:	f013 0207 	ands.w	r2, r3, #7
 800bedc:	d00b      	beq.n	800bef6 <__lo0bits+0x22>
 800bede:	07da      	lsls	r2, r3, #31
 800bee0:	d424      	bmi.n	800bf2c <__lo0bits+0x58>
 800bee2:	0798      	lsls	r0, r3, #30
 800bee4:	bf47      	ittee	mi
 800bee6:	085b      	lsrmi	r3, r3, #1
 800bee8:	2001      	movmi	r0, #1
 800beea:	089b      	lsrpl	r3, r3, #2
 800beec:	2002      	movpl	r0, #2
 800beee:	bf4c      	ite	mi
 800bef0:	600b      	strmi	r3, [r1, #0]
 800bef2:	600b      	strpl	r3, [r1, #0]
 800bef4:	4770      	bx	lr
 800bef6:	b298      	uxth	r0, r3
 800bef8:	b9b0      	cbnz	r0, 800bf28 <__lo0bits+0x54>
 800befa:	0c1b      	lsrs	r3, r3, #16
 800befc:	2010      	movs	r0, #16
 800befe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bf02:	bf04      	itt	eq
 800bf04:	0a1b      	lsreq	r3, r3, #8
 800bf06:	3008      	addeq	r0, #8
 800bf08:	071a      	lsls	r2, r3, #28
 800bf0a:	bf04      	itt	eq
 800bf0c:	091b      	lsreq	r3, r3, #4
 800bf0e:	3004      	addeq	r0, #4
 800bf10:	079a      	lsls	r2, r3, #30
 800bf12:	bf04      	itt	eq
 800bf14:	089b      	lsreq	r3, r3, #2
 800bf16:	3002      	addeq	r0, #2
 800bf18:	07da      	lsls	r2, r3, #31
 800bf1a:	d403      	bmi.n	800bf24 <__lo0bits+0x50>
 800bf1c:	085b      	lsrs	r3, r3, #1
 800bf1e:	f100 0001 	add.w	r0, r0, #1
 800bf22:	d005      	beq.n	800bf30 <__lo0bits+0x5c>
 800bf24:	600b      	str	r3, [r1, #0]
 800bf26:	4770      	bx	lr
 800bf28:	4610      	mov	r0, r2
 800bf2a:	e7e8      	b.n	800befe <__lo0bits+0x2a>
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	4770      	bx	lr
 800bf30:	2020      	movs	r0, #32
 800bf32:	4770      	bx	lr

0800bf34 <__i2b>:
 800bf34:	b510      	push	{r4, lr}
 800bf36:	460c      	mov	r4, r1
 800bf38:	2101      	movs	r1, #1
 800bf3a:	f7ff feff 	bl	800bd3c <_Balloc>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	b928      	cbnz	r0, 800bf4e <__i2b+0x1a>
 800bf42:	4b05      	ldr	r3, [pc, #20]	; (800bf58 <__i2b+0x24>)
 800bf44:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bf48:	4804      	ldr	r0, [pc, #16]	; (800bf5c <__i2b+0x28>)
 800bf4a:	f000 fca3 	bl	800c894 <__assert_func>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	6144      	str	r4, [r0, #20]
 800bf52:	6103      	str	r3, [r0, #16]
 800bf54:	bd10      	pop	{r4, pc}
 800bf56:	bf00      	nop
 800bf58:	080205ff 	.word	0x080205ff
 800bf5c:	08020610 	.word	0x08020610

0800bf60 <__multiply>:
 800bf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf64:	4614      	mov	r4, r2
 800bf66:	690a      	ldr	r2, [r1, #16]
 800bf68:	460d      	mov	r5, r1
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	6923      	ldr	r3, [r4, #16]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	bfbe      	ittt	lt
 800bf72:	460b      	movlt	r3, r1
 800bf74:	4625      	movlt	r5, r4
 800bf76:	461c      	movlt	r4, r3
 800bf78:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bf7c:	68ab      	ldr	r3, [r5, #8]
 800bf7e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bf82:	6869      	ldr	r1, [r5, #4]
 800bf84:	eb0a 0709 	add.w	r7, sl, r9
 800bf88:	42bb      	cmp	r3, r7
 800bf8a:	bfb8      	it	lt
 800bf8c:	3101      	addlt	r1, #1
 800bf8e:	f7ff fed5 	bl	800bd3c <_Balloc>
 800bf92:	b930      	cbnz	r0, 800bfa2 <__multiply+0x42>
 800bf94:	4602      	mov	r2, r0
 800bf96:	4b43      	ldr	r3, [pc, #268]	; (800c0a4 <__multiply+0x144>)
 800bf98:	f240 115d 	movw	r1, #349	; 0x15d
 800bf9c:	4842      	ldr	r0, [pc, #264]	; (800c0a8 <__multiply+0x148>)
 800bf9e:	f000 fc79 	bl	800c894 <__assert_func>
 800bfa2:	f100 0614 	add.w	r6, r0, #20
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bfac:	4633      	mov	r3, r6
 800bfae:	4543      	cmp	r3, r8
 800bfb0:	d31e      	bcc.n	800bff0 <__multiply+0x90>
 800bfb2:	f105 0c14 	add.w	ip, r5, #20
 800bfb6:	f104 0314 	add.w	r3, r4, #20
 800bfba:	f105 0115 	add.w	r1, r5, #21
 800bfbe:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bfc2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bfc6:	9202      	str	r2, [sp, #8]
 800bfc8:	ebac 0205 	sub.w	r2, ip, r5
 800bfcc:	3a15      	subs	r2, #21
 800bfce:	f022 0203 	bic.w	r2, r2, #3
 800bfd2:	3204      	adds	r2, #4
 800bfd4:	458c      	cmp	ip, r1
 800bfd6:	bf38      	it	cc
 800bfd8:	2204      	movcc	r2, #4
 800bfda:	9201      	str	r2, [sp, #4]
 800bfdc:	9a02      	ldr	r2, [sp, #8]
 800bfde:	9303      	str	r3, [sp, #12]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d808      	bhi.n	800bff6 <__multiply+0x96>
 800bfe4:	2f00      	cmp	r7, #0
 800bfe6:	dc57      	bgt.n	800c098 <__multiply+0x138>
 800bfe8:	6107      	str	r7, [r0, #16]
 800bfea:	b005      	add	sp, #20
 800bfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff0:	f843 2b04 	str.w	r2, [r3], #4
 800bff4:	e7db      	b.n	800bfae <__multiply+0x4e>
 800bff6:	f8b3 a000 	ldrh.w	sl, [r3]
 800bffa:	f1ba 0f00 	cmp.w	sl, #0
 800bffe:	d022      	beq.n	800c046 <__multiply+0xe6>
 800c000:	f105 0e14 	add.w	lr, r5, #20
 800c004:	46b1      	mov	r9, r6
 800c006:	2200      	movs	r2, #0
 800c008:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c00c:	f8d9 b000 	ldr.w	fp, [r9]
 800c010:	b2a1      	uxth	r1, r4
 800c012:	45f4      	cmp	ip, lr
 800c014:	fa1f fb8b 	uxth.w	fp, fp
 800c018:	ea4f 4414 	mov.w	r4, r4, lsr #16
 800c01c:	fb0a b101 	mla	r1, sl, r1, fp
 800c020:	4411      	add	r1, r2
 800c022:	f8d9 2000 	ldr.w	r2, [r9]
 800c026:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c02a:	fb0a 2404 	mla	r4, sl, r4, r2
 800c02e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c032:	b289      	uxth	r1, r1
 800c034:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c038:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c03c:	f849 1b04 	str.w	r1, [r9], #4
 800c040:	d8e2      	bhi.n	800c008 <__multiply+0xa8>
 800c042:	9901      	ldr	r1, [sp, #4]
 800c044:	5072      	str	r2, [r6, r1]
 800c046:	9a03      	ldr	r2, [sp, #12]
 800c048:	3304      	adds	r3, #4
 800c04a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c04e:	f1b9 0f00 	cmp.w	r9, #0
 800c052:	d01f      	beq.n	800c094 <__multiply+0x134>
 800c054:	6834      	ldr	r4, [r6, #0]
 800c056:	f105 0114 	add.w	r1, r5, #20
 800c05a:	46b6      	mov	lr, r6
 800c05c:	f04f 0a00 	mov.w	sl, #0
 800c060:	880a      	ldrh	r2, [r1, #0]
 800c062:	b2a4      	uxth	r4, r4
 800c064:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c068:	fb09 b202 	mla	r2, r9, r2, fp
 800c06c:	4492      	add	sl, r2
 800c06e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c072:	f84e 4b04 	str.w	r4, [lr], #4
 800c076:	f851 4b04 	ldr.w	r4, [r1], #4
 800c07a:	f8be 2000 	ldrh.w	r2, [lr]
 800c07e:	0c24      	lsrs	r4, r4, #16
 800c080:	458c      	cmp	ip, r1
 800c082:	fb09 2404 	mla	r4, r9, r4, r2
 800c086:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c08a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c08e:	d8e7      	bhi.n	800c060 <__multiply+0x100>
 800c090:	9a01      	ldr	r2, [sp, #4]
 800c092:	50b4      	str	r4, [r6, r2]
 800c094:	3604      	adds	r6, #4
 800c096:	e7a1      	b.n	800bfdc <__multiply+0x7c>
 800c098:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1a3      	bne.n	800bfe8 <__multiply+0x88>
 800c0a0:	3f01      	subs	r7, #1
 800c0a2:	e79f      	b.n	800bfe4 <__multiply+0x84>
 800c0a4:	080205ff 	.word	0x080205ff
 800c0a8:	08020610 	.word	0x08020610

0800c0ac <__pow5mult>:
 800c0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0b0:	4615      	mov	r5, r2
 800c0b2:	f012 0203 	ands.w	r2, r2, #3
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	460f      	mov	r7, r1
 800c0ba:	d007      	beq.n	800c0cc <__pow5mult+0x20>
 800c0bc:	3a01      	subs	r2, #1
 800c0be:	4c25      	ldr	r4, [pc, #148]	; (800c154 <__pow5mult+0xa8>)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0c6:	f7ff fe9b 	bl	800be00 <__multadd>
 800c0ca:	4607      	mov	r7, r0
 800c0cc:	10ad      	asrs	r5, r5, #2
 800c0ce:	d03d      	beq.n	800c14c <__pow5mult+0xa0>
 800c0d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c0d2:	b97c      	cbnz	r4, 800c0f4 <__pow5mult+0x48>
 800c0d4:	2010      	movs	r0, #16
 800c0d6:	f7ff fe0d 	bl	800bcf4 <malloc>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	6270      	str	r0, [r6, #36]	; 0x24
 800c0de:	b928      	cbnz	r0, 800c0ec <__pow5mult+0x40>
 800c0e0:	4b1d      	ldr	r3, [pc, #116]	; (800c158 <__pow5mult+0xac>)
 800c0e2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c0e6:	481d      	ldr	r0, [pc, #116]	; (800c15c <__pow5mult+0xb0>)
 800c0e8:	f000 fbd4 	bl	800c894 <__assert_func>
 800c0ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0f0:	6004      	str	r4, [r0, #0]
 800c0f2:	60c4      	str	r4, [r0, #12]
 800c0f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c0f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0fc:	b94c      	cbnz	r4, 800c112 <__pow5mult+0x66>
 800c0fe:	f240 2171 	movw	r1, #625	; 0x271
 800c102:	4630      	mov	r0, r6
 800c104:	f7ff ff16 	bl	800bf34 <__i2b>
 800c108:	2300      	movs	r3, #0
 800c10a:	4604      	mov	r4, r0
 800c10c:	f8c8 0008 	str.w	r0, [r8, #8]
 800c110:	6003      	str	r3, [r0, #0]
 800c112:	f04f 0900 	mov.w	r9, #0
 800c116:	07eb      	lsls	r3, r5, #31
 800c118:	d50a      	bpl.n	800c130 <__pow5mult+0x84>
 800c11a:	4639      	mov	r1, r7
 800c11c:	4622      	mov	r2, r4
 800c11e:	4630      	mov	r0, r6
 800c120:	f7ff ff1e 	bl	800bf60 <__multiply>
 800c124:	4680      	mov	r8, r0
 800c126:	4639      	mov	r1, r7
 800c128:	4630      	mov	r0, r6
 800c12a:	4647      	mov	r7, r8
 800c12c:	f7ff fe46 	bl	800bdbc <_Bfree>
 800c130:	106d      	asrs	r5, r5, #1
 800c132:	d00b      	beq.n	800c14c <__pow5mult+0xa0>
 800c134:	6820      	ldr	r0, [r4, #0]
 800c136:	b938      	cbnz	r0, 800c148 <__pow5mult+0x9c>
 800c138:	4622      	mov	r2, r4
 800c13a:	4621      	mov	r1, r4
 800c13c:	4630      	mov	r0, r6
 800c13e:	f7ff ff0f 	bl	800bf60 <__multiply>
 800c142:	6020      	str	r0, [r4, #0]
 800c144:	f8c0 9000 	str.w	r9, [r0]
 800c148:	4604      	mov	r4, r0
 800c14a:	e7e4      	b.n	800c116 <__pow5mult+0x6a>
 800c14c:	4638      	mov	r0, r7
 800c14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c152:	bf00      	nop
 800c154:	08020760 	.word	0x08020760
 800c158:	08020589 	.word	0x08020589
 800c15c:	08020610 	.word	0x08020610

0800c160 <__lshift>:
 800c160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c164:	460c      	mov	r4, r1
 800c166:	4607      	mov	r7, r0
 800c168:	4691      	mov	r9, r2
 800c16a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c16e:	6923      	ldr	r3, [r4, #16]
 800c170:	6849      	ldr	r1, [r1, #4]
 800c172:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c176:	68a3      	ldr	r3, [r4, #8]
 800c178:	f108 0601 	add.w	r6, r8, #1
 800c17c:	42b3      	cmp	r3, r6
 800c17e:	db0b      	blt.n	800c198 <__lshift+0x38>
 800c180:	4638      	mov	r0, r7
 800c182:	f7ff fddb 	bl	800bd3c <_Balloc>
 800c186:	4605      	mov	r5, r0
 800c188:	b948      	cbnz	r0, 800c19e <__lshift+0x3e>
 800c18a:	4602      	mov	r2, r0
 800c18c:	4b28      	ldr	r3, [pc, #160]	; (800c230 <__lshift+0xd0>)
 800c18e:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c192:	4828      	ldr	r0, [pc, #160]	; (800c234 <__lshift+0xd4>)
 800c194:	f000 fb7e 	bl	800c894 <__assert_func>
 800c198:	3101      	adds	r1, #1
 800c19a:	005b      	lsls	r3, r3, #1
 800c19c:	e7ee      	b.n	800c17c <__lshift+0x1c>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	f100 0114 	add.w	r1, r0, #20
 800c1a4:	f100 0210 	add.w	r2, r0, #16
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	4553      	cmp	r3, sl
 800c1ac:	db33      	blt.n	800c216 <__lshift+0xb6>
 800c1ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1b2:	f104 0314 	add.w	r3, r4, #20
 800c1b6:	6920      	ldr	r0, [r4, #16]
 800c1b8:	f019 091f 	ands.w	r9, r9, #31
 800c1bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1c4:	d02b      	beq.n	800c21e <__lshift+0xbe>
 800c1c6:	f1c9 0e20 	rsb	lr, r9, #32
 800c1ca:	468a      	mov	sl, r1
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	6818      	ldr	r0, [r3, #0]
 800c1d0:	fa00 f009 	lsl.w	r0, r0, r9
 800c1d4:	4302      	orrs	r2, r0
 800c1d6:	f84a 2b04 	str.w	r2, [sl], #4
 800c1da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1de:	459c      	cmp	ip, r3
 800c1e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1e4:	d8f3      	bhi.n	800c1ce <__lshift+0x6e>
 800c1e6:	ebac 0304 	sub.w	r3, ip, r4
 800c1ea:	f104 0015 	add.w	r0, r4, #21
 800c1ee:	3b15      	subs	r3, #21
 800c1f0:	f023 0303 	bic.w	r3, r3, #3
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	4584      	cmp	ip, r0
 800c1f8:	bf38      	it	cc
 800c1fa:	2304      	movcc	r3, #4
 800c1fc:	50ca      	str	r2, [r1, r3]
 800c1fe:	b10a      	cbz	r2, 800c204 <__lshift+0xa4>
 800c200:	f108 0602 	add.w	r6, r8, #2
 800c204:	3e01      	subs	r6, #1
 800c206:	4638      	mov	r0, r7
 800c208:	4621      	mov	r1, r4
 800c20a:	612e      	str	r6, [r5, #16]
 800c20c:	f7ff fdd6 	bl	800bdbc <_Bfree>
 800c210:	4628      	mov	r0, r5
 800c212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c216:	3301      	adds	r3, #1
 800c218:	f842 0f04 	str.w	r0, [r2, #4]!
 800c21c:	e7c5      	b.n	800c1aa <__lshift+0x4a>
 800c21e:	3904      	subs	r1, #4
 800c220:	f853 2b04 	ldr.w	r2, [r3], #4
 800c224:	459c      	cmp	ip, r3
 800c226:	f841 2f04 	str.w	r2, [r1, #4]!
 800c22a:	d8f9      	bhi.n	800c220 <__lshift+0xc0>
 800c22c:	e7ea      	b.n	800c204 <__lshift+0xa4>
 800c22e:	bf00      	nop
 800c230:	080205ff 	.word	0x080205ff
 800c234:	08020610 	.word	0x08020610

0800c238 <__mcmp>:
 800c238:	6902      	ldr	r2, [r0, #16]
 800c23a:	b530      	push	{r4, r5, lr}
 800c23c:	690c      	ldr	r4, [r1, #16]
 800c23e:	1b12      	subs	r2, r2, r4
 800c240:	d10e      	bne.n	800c260 <__mcmp+0x28>
 800c242:	f100 0314 	add.w	r3, r0, #20
 800c246:	3114      	adds	r1, #20
 800c248:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c24c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c250:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c254:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c258:	42a5      	cmp	r5, r4
 800c25a:	d003      	beq.n	800c264 <__mcmp+0x2c>
 800c25c:	d305      	bcc.n	800c26a <__mcmp+0x32>
 800c25e:	2201      	movs	r2, #1
 800c260:	4610      	mov	r0, r2
 800c262:	bd30      	pop	{r4, r5, pc}
 800c264:	4283      	cmp	r3, r0
 800c266:	d3f3      	bcc.n	800c250 <__mcmp+0x18>
 800c268:	e7fa      	b.n	800c260 <__mcmp+0x28>
 800c26a:	f04f 32ff 	mov.w	r2, #4294967295
 800c26e:	e7f7      	b.n	800c260 <__mcmp+0x28>

0800c270 <__mdiff>:
 800c270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	460c      	mov	r4, r1
 800c276:	4606      	mov	r6, r0
 800c278:	4611      	mov	r1, r2
 800c27a:	4692      	mov	sl, r2
 800c27c:	4620      	mov	r0, r4
 800c27e:	f7ff ffdb 	bl	800c238 <__mcmp>
 800c282:	1e05      	subs	r5, r0, #0
 800c284:	d110      	bne.n	800c2a8 <__mdiff+0x38>
 800c286:	4629      	mov	r1, r5
 800c288:	4630      	mov	r0, r6
 800c28a:	f7ff fd57 	bl	800bd3c <_Balloc>
 800c28e:	b930      	cbnz	r0, 800c29e <__mdiff+0x2e>
 800c290:	4b3d      	ldr	r3, [pc, #244]	; (800c388 <__mdiff+0x118>)
 800c292:	4602      	mov	r2, r0
 800c294:	f240 2132 	movw	r1, #562	; 0x232
 800c298:	483c      	ldr	r0, [pc, #240]	; (800c38c <__mdiff+0x11c>)
 800c29a:	f000 fafb 	bl	800c894 <__assert_func>
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c2a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a8:	bfa4      	itt	ge
 800c2aa:	4653      	movge	r3, sl
 800c2ac:	46a2      	movge	sl, r4
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	bfa8      	it	ge
 800c2b2:	2500      	movge	r5, #0
 800c2b4:	f8da 1004 	ldr.w	r1, [sl, #4]
 800c2b8:	bfac      	ite	ge
 800c2ba:	461c      	movge	r4, r3
 800c2bc:	2501      	movlt	r5, #1
 800c2be:	f7ff fd3d 	bl	800bd3c <_Balloc>
 800c2c2:	b920      	cbnz	r0, 800c2ce <__mdiff+0x5e>
 800c2c4:	4b30      	ldr	r3, [pc, #192]	; (800c388 <__mdiff+0x118>)
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c2cc:	e7e4      	b.n	800c298 <__mdiff+0x28>
 800c2ce:	f8da 7010 	ldr.w	r7, [sl, #16]
 800c2d2:	f104 0914 	add.w	r9, r4, #20
 800c2d6:	6926      	ldr	r6, [r4, #16]
 800c2d8:	f100 0814 	add.w	r8, r0, #20
 800c2dc:	60c5      	str	r5, [r0, #12]
 800c2de:	f10a 0514 	add.w	r5, sl, #20
 800c2e2:	f10a 0210 	add.w	r2, sl, #16
 800c2e6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c2ea:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800c2ee:	46c2      	mov	sl, r8
 800c2f0:	f04f 0c00 	mov.w	ip, #0
 800c2f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c2f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c2fc:	fa1f f18b 	uxth.w	r1, fp
 800c300:	454e      	cmp	r6, r9
 800c302:	4461      	add	r1, ip
 800c304:	fa1f fc83 	uxth.w	ip, r3
 800c308:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c30c:	eba1 010c 	sub.w	r1, r1, ip
 800c310:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c314:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c318:	b289      	uxth	r1, r1
 800c31a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c31e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c322:	f84a 3b04 	str.w	r3, [sl], #4
 800c326:	d8e5      	bhi.n	800c2f4 <__mdiff+0x84>
 800c328:	1b33      	subs	r3, r6, r4
 800c32a:	3415      	adds	r4, #21
 800c32c:	3b15      	subs	r3, #21
 800c32e:	f023 0303 	bic.w	r3, r3, #3
 800c332:	3304      	adds	r3, #4
 800c334:	42a6      	cmp	r6, r4
 800c336:	bf38      	it	cc
 800c338:	2304      	movcc	r3, #4
 800c33a:	441d      	add	r5, r3
 800c33c:	4443      	add	r3, r8
 800c33e:	462c      	mov	r4, r5
 800c340:	461e      	mov	r6, r3
 800c342:	4574      	cmp	r4, lr
 800c344:	d30e      	bcc.n	800c364 <__mdiff+0xf4>
 800c346:	f10e 0203 	add.w	r2, lr, #3
 800c34a:	1b52      	subs	r2, r2, r5
 800c34c:	3d03      	subs	r5, #3
 800c34e:	f022 0203 	bic.w	r2, r2, #3
 800c352:	45ae      	cmp	lr, r5
 800c354:	bf38      	it	cc
 800c356:	2200      	movcc	r2, #0
 800c358:	441a      	add	r2, r3
 800c35a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c35e:	b18b      	cbz	r3, 800c384 <__mdiff+0x114>
 800c360:	6107      	str	r7, [r0, #16]
 800c362:	e79f      	b.n	800c2a4 <__mdiff+0x34>
 800c364:	f854 8b04 	ldr.w	r8, [r4], #4
 800c368:	fa1f f288 	uxth.w	r2, r8
 800c36c:	4462      	add	r2, ip
 800c36e:	1411      	asrs	r1, r2, #16
 800c370:	b292      	uxth	r2, r2
 800c372:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 800c376:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c37a:	ea4f 4c21 	mov.w	ip, r1, asr #16
 800c37e:	f846 2b04 	str.w	r2, [r6], #4
 800c382:	e7de      	b.n	800c342 <__mdiff+0xd2>
 800c384:	3f01      	subs	r7, #1
 800c386:	e7e8      	b.n	800c35a <__mdiff+0xea>
 800c388:	080205ff 	.word	0x080205ff
 800c38c:	08020610 	.word	0x08020610

0800c390 <__d2b>:
 800c390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c394:	4689      	mov	r9, r1
 800c396:	2101      	movs	r1, #1
 800c398:	4690      	mov	r8, r2
 800c39a:	ec57 6b10 	vmov	r6, r7, d0
 800c39e:	f7ff fccd 	bl	800bd3c <_Balloc>
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	b930      	cbnz	r0, 800c3b4 <__d2b+0x24>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	4b25      	ldr	r3, [pc, #148]	; (800c440 <__d2b+0xb0>)
 800c3aa:	f240 310a 	movw	r1, #778	; 0x30a
 800c3ae:	4825      	ldr	r0, [pc, #148]	; (800c444 <__d2b+0xb4>)
 800c3b0:	f000 fa70 	bl	800c894 <__assert_func>
 800c3b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c3b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c3bc:	bb35      	cbnz	r5, 800c40c <__d2b+0x7c>
 800c3be:	2e00      	cmp	r6, #0
 800c3c0:	9301      	str	r3, [sp, #4]
 800c3c2:	d028      	beq.n	800c416 <__d2b+0x86>
 800c3c4:	4668      	mov	r0, sp
 800c3c6:	9600      	str	r6, [sp, #0]
 800c3c8:	f7ff fd84 	bl	800bed4 <__lo0bits>
 800c3cc:	9900      	ldr	r1, [sp, #0]
 800c3ce:	b300      	cbz	r0, 800c412 <__d2b+0x82>
 800c3d0:	9a01      	ldr	r2, [sp, #4]
 800c3d2:	f1c0 0320 	rsb	r3, r0, #32
 800c3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3da:	40c2      	lsrs	r2, r0
 800c3dc:	430b      	orrs	r3, r1
 800c3de:	9201      	str	r2, [sp, #4]
 800c3e0:	6163      	str	r3, [r4, #20]
 800c3e2:	9b01      	ldr	r3, [sp, #4]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	61a3      	str	r3, [r4, #24]
 800c3e8:	bf14      	ite	ne
 800c3ea:	2202      	movne	r2, #2
 800c3ec:	2201      	moveq	r2, #1
 800c3ee:	6122      	str	r2, [r4, #16]
 800c3f0:	b1d5      	cbz	r5, 800c428 <__d2b+0x98>
 800c3f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c3f6:	4405      	add	r5, r0
 800c3f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c3fc:	f8c9 5000 	str.w	r5, [r9]
 800c400:	f8c8 0000 	str.w	r0, [r8]
 800c404:	4620      	mov	r0, r4
 800c406:	b003      	add	sp, #12
 800c408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c40c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c410:	e7d5      	b.n	800c3be <__d2b+0x2e>
 800c412:	6161      	str	r1, [r4, #20]
 800c414:	e7e5      	b.n	800c3e2 <__d2b+0x52>
 800c416:	a801      	add	r0, sp, #4
 800c418:	f7ff fd5c 	bl	800bed4 <__lo0bits>
 800c41c:	9b01      	ldr	r3, [sp, #4]
 800c41e:	2201      	movs	r2, #1
 800c420:	3020      	adds	r0, #32
 800c422:	6163      	str	r3, [r4, #20]
 800c424:	6122      	str	r2, [r4, #16]
 800c426:	e7e3      	b.n	800c3f0 <__d2b+0x60>
 800c428:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c42c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c430:	f8c9 0000 	str.w	r0, [r9]
 800c434:	6918      	ldr	r0, [r3, #16]
 800c436:	f7ff fd2d 	bl	800be94 <__hi0bits>
 800c43a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c43e:	e7df      	b.n	800c400 <__d2b+0x70>
 800c440:	080205ff 	.word	0x080205ff
 800c444:	08020610 	.word	0x08020610

0800c448 <_calloc_r>:
 800c448:	434a      	muls	r2, r1
 800c44a:	b513      	push	{r0, r1, r4, lr}
 800c44c:	4611      	mov	r1, r2
 800c44e:	9201      	str	r2, [sp, #4]
 800c450:	f000 f85a 	bl	800c508 <_malloc_r>
 800c454:	4604      	mov	r4, r0
 800c456:	b118      	cbz	r0, 800c460 <_calloc_r+0x18>
 800c458:	9a01      	ldr	r2, [sp, #4]
 800c45a:	2100      	movs	r1, #0
 800c45c:	f7fe f936 	bl	800a6cc <memset>
 800c460:	4620      	mov	r0, r4
 800c462:	b002      	add	sp, #8
 800c464:	bd10      	pop	{r4, pc}
	...

0800c468 <_free_r>:
 800c468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c46a:	2900      	cmp	r1, #0
 800c46c:	d047      	beq.n	800c4fe <_free_r+0x96>
 800c46e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c472:	1f0c      	subs	r4, r1, #4
 800c474:	9001      	str	r0, [sp, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	bfb8      	it	lt
 800c47a:	18e4      	addlt	r4, r4, r3
 800c47c:	f000 fa66 	bl	800c94c <__malloc_lock>
 800c480:	4a20      	ldr	r2, [pc, #128]	; (800c504 <_free_r+0x9c>)
 800c482:	9801      	ldr	r0, [sp, #4]
 800c484:	6813      	ldr	r3, [r2, #0]
 800c486:	4615      	mov	r5, r2
 800c488:	b933      	cbnz	r3, 800c498 <_free_r+0x30>
 800c48a:	6063      	str	r3, [r4, #4]
 800c48c:	6014      	str	r4, [r2, #0]
 800c48e:	b003      	add	sp, #12
 800c490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c494:	f000 ba60 	b.w	800c958 <__malloc_unlock>
 800c498:	42a3      	cmp	r3, r4
 800c49a:	d90b      	bls.n	800c4b4 <_free_r+0x4c>
 800c49c:	6821      	ldr	r1, [r4, #0]
 800c49e:	1862      	adds	r2, r4, r1
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	bf02      	ittt	eq
 800c4a4:	681a      	ldreq	r2, [r3, #0]
 800c4a6:	685b      	ldreq	r3, [r3, #4]
 800c4a8:	1852      	addeq	r2, r2, r1
 800c4aa:	6063      	str	r3, [r4, #4]
 800c4ac:	bf08      	it	eq
 800c4ae:	6022      	streq	r2, [r4, #0]
 800c4b0:	602c      	str	r4, [r5, #0]
 800c4b2:	e7ec      	b.n	800c48e <_free_r+0x26>
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	b10b      	cbz	r3, 800c4be <_free_r+0x56>
 800c4ba:	42a3      	cmp	r3, r4
 800c4bc:	d9fa      	bls.n	800c4b4 <_free_r+0x4c>
 800c4be:	6811      	ldr	r1, [r2, #0]
 800c4c0:	1855      	adds	r5, r2, r1
 800c4c2:	42a5      	cmp	r5, r4
 800c4c4:	d10b      	bne.n	800c4de <_free_r+0x76>
 800c4c6:	6824      	ldr	r4, [r4, #0]
 800c4c8:	4421      	add	r1, r4
 800c4ca:	1854      	adds	r4, r2, r1
 800c4cc:	6011      	str	r1, [r2, #0]
 800c4ce:	42a3      	cmp	r3, r4
 800c4d0:	d1dd      	bne.n	800c48e <_free_r+0x26>
 800c4d2:	681c      	ldr	r4, [r3, #0]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	4421      	add	r1, r4
 800c4d8:	6053      	str	r3, [r2, #4]
 800c4da:	6011      	str	r1, [r2, #0]
 800c4dc:	e7d7      	b.n	800c48e <_free_r+0x26>
 800c4de:	d902      	bls.n	800c4e6 <_free_r+0x7e>
 800c4e0:	230c      	movs	r3, #12
 800c4e2:	6003      	str	r3, [r0, #0]
 800c4e4:	e7d3      	b.n	800c48e <_free_r+0x26>
 800c4e6:	6825      	ldr	r5, [r4, #0]
 800c4e8:	1961      	adds	r1, r4, r5
 800c4ea:	428b      	cmp	r3, r1
 800c4ec:	bf02      	ittt	eq
 800c4ee:	6819      	ldreq	r1, [r3, #0]
 800c4f0:	685b      	ldreq	r3, [r3, #4]
 800c4f2:	1949      	addeq	r1, r1, r5
 800c4f4:	6063      	str	r3, [r4, #4]
 800c4f6:	bf08      	it	eq
 800c4f8:	6021      	streq	r1, [r4, #0]
 800c4fa:	6054      	str	r4, [r2, #4]
 800c4fc:	e7c7      	b.n	800c48e <_free_r+0x26>
 800c4fe:	b003      	add	sp, #12
 800c500:	bd30      	pop	{r4, r5, pc}
 800c502:	bf00      	nop
 800c504:	20000570 	.word	0x20000570

0800c508 <_malloc_r>:
 800c508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50a:	1ccd      	adds	r5, r1, #3
 800c50c:	4606      	mov	r6, r0
 800c50e:	f025 0503 	bic.w	r5, r5, #3
 800c512:	3508      	adds	r5, #8
 800c514:	2d0c      	cmp	r5, #12
 800c516:	bf38      	it	cc
 800c518:	250c      	movcc	r5, #12
 800c51a:	2d00      	cmp	r5, #0
 800c51c:	db01      	blt.n	800c522 <_malloc_r+0x1a>
 800c51e:	42a9      	cmp	r1, r5
 800c520:	d903      	bls.n	800c52a <_malloc_r+0x22>
 800c522:	230c      	movs	r3, #12
 800c524:	6033      	str	r3, [r6, #0]
 800c526:	2000      	movs	r0, #0
 800c528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c52a:	f000 fa0f 	bl	800c94c <__malloc_lock>
 800c52e:	4921      	ldr	r1, [pc, #132]	; (800c5b4 <_malloc_r+0xac>)
 800c530:	680a      	ldr	r2, [r1, #0]
 800c532:	4614      	mov	r4, r2
 800c534:	b99c      	cbnz	r4, 800c55e <_malloc_r+0x56>
 800c536:	4f20      	ldr	r7, [pc, #128]	; (800c5b8 <_malloc_r+0xb0>)
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	b923      	cbnz	r3, 800c546 <_malloc_r+0x3e>
 800c53c:	4621      	mov	r1, r4
 800c53e:	4630      	mov	r0, r6
 800c540:	f000 f998 	bl	800c874 <_sbrk_r>
 800c544:	6038      	str	r0, [r7, #0]
 800c546:	4629      	mov	r1, r5
 800c548:	4630      	mov	r0, r6
 800c54a:	f000 f993 	bl	800c874 <_sbrk_r>
 800c54e:	1c43      	adds	r3, r0, #1
 800c550:	d123      	bne.n	800c59a <_malloc_r+0x92>
 800c552:	230c      	movs	r3, #12
 800c554:	4630      	mov	r0, r6
 800c556:	6033      	str	r3, [r6, #0]
 800c558:	f000 f9fe 	bl	800c958 <__malloc_unlock>
 800c55c:	e7e3      	b.n	800c526 <_malloc_r+0x1e>
 800c55e:	6823      	ldr	r3, [r4, #0]
 800c560:	1b5b      	subs	r3, r3, r5
 800c562:	d417      	bmi.n	800c594 <_malloc_r+0x8c>
 800c564:	2b0b      	cmp	r3, #11
 800c566:	d903      	bls.n	800c570 <_malloc_r+0x68>
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	441c      	add	r4, r3
 800c56c:	6025      	str	r5, [r4, #0]
 800c56e:	e004      	b.n	800c57a <_malloc_r+0x72>
 800c570:	6863      	ldr	r3, [r4, #4]
 800c572:	42a2      	cmp	r2, r4
 800c574:	bf0c      	ite	eq
 800c576:	600b      	streq	r3, [r1, #0]
 800c578:	6053      	strne	r3, [r2, #4]
 800c57a:	4630      	mov	r0, r6
 800c57c:	f000 f9ec 	bl	800c958 <__malloc_unlock>
 800c580:	f104 000b 	add.w	r0, r4, #11
 800c584:	1d23      	adds	r3, r4, #4
 800c586:	f020 0007 	bic.w	r0, r0, #7
 800c58a:	1ac2      	subs	r2, r0, r3
 800c58c:	d0cc      	beq.n	800c528 <_malloc_r+0x20>
 800c58e:	1a1b      	subs	r3, r3, r0
 800c590:	50a3      	str	r3, [r4, r2]
 800c592:	e7c9      	b.n	800c528 <_malloc_r+0x20>
 800c594:	4622      	mov	r2, r4
 800c596:	6864      	ldr	r4, [r4, #4]
 800c598:	e7cc      	b.n	800c534 <_malloc_r+0x2c>
 800c59a:	1cc4      	adds	r4, r0, #3
 800c59c:	f024 0403 	bic.w	r4, r4, #3
 800c5a0:	42a0      	cmp	r0, r4
 800c5a2:	d0e3      	beq.n	800c56c <_malloc_r+0x64>
 800c5a4:	1a21      	subs	r1, r4, r0
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f000 f964 	bl	800c874 <_sbrk_r>
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	d1dd      	bne.n	800c56c <_malloc_r+0x64>
 800c5b0:	e7cf      	b.n	800c552 <_malloc_r+0x4a>
 800c5b2:	bf00      	nop
 800c5b4:	20000570 	.word	0x20000570
 800c5b8:	20000574 	.word	0x20000574

0800c5bc <__ssputs_r>:
 800c5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c0:	688e      	ldr	r6, [r1, #8]
 800c5c2:	4682      	mov	sl, r0
 800c5c4:	460c      	mov	r4, r1
 800c5c6:	4690      	mov	r8, r2
 800c5c8:	429e      	cmp	r6, r3
 800c5ca:	461f      	mov	r7, r3
 800c5cc:	d838      	bhi.n	800c640 <__ssputs_r+0x84>
 800c5ce:	898a      	ldrh	r2, [r1, #12]
 800c5d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5d4:	d032      	beq.n	800c63c <__ssputs_r+0x80>
 800c5d6:	6825      	ldr	r5, [r4, #0]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	6909      	ldr	r1, [r1, #16]
 800c5dc:	eba5 0901 	sub.w	r9, r5, r1
 800c5e0:	6965      	ldr	r5, [r4, #20]
 800c5e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5e6:	444b      	add	r3, r9
 800c5e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5ec:	106d      	asrs	r5, r5, #1
 800c5ee:	429d      	cmp	r5, r3
 800c5f0:	bf38      	it	cc
 800c5f2:	461d      	movcc	r5, r3
 800c5f4:	0553      	lsls	r3, r2, #21
 800c5f6:	d531      	bpl.n	800c65c <__ssputs_r+0xa0>
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	f7ff ff85 	bl	800c508 <_malloc_r>
 800c5fe:	4606      	mov	r6, r0
 800c600:	b950      	cbnz	r0, 800c618 <__ssputs_r+0x5c>
 800c602:	230c      	movs	r3, #12
 800c604:	f04f 30ff 	mov.w	r0, #4294967295
 800c608:	f8ca 3000 	str.w	r3, [sl]
 800c60c:	89a3      	ldrh	r3, [r4, #12]
 800c60e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c612:	81a3      	strh	r3, [r4, #12]
 800c614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c618:	464a      	mov	r2, r9
 800c61a:	6921      	ldr	r1, [r4, #16]
 800c61c:	f7ff fb80 	bl	800bd20 <memcpy>
 800c620:	89a3      	ldrh	r3, [r4, #12]
 800c622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c62a:	81a3      	strh	r3, [r4, #12]
 800c62c:	6126      	str	r6, [r4, #16]
 800c62e:	444e      	add	r6, r9
 800c630:	6165      	str	r5, [r4, #20]
 800c632:	eba5 0509 	sub.w	r5, r5, r9
 800c636:	6026      	str	r6, [r4, #0]
 800c638:	463e      	mov	r6, r7
 800c63a:	60a5      	str	r5, [r4, #8]
 800c63c:	42be      	cmp	r6, r7
 800c63e:	d900      	bls.n	800c642 <__ssputs_r+0x86>
 800c640:	463e      	mov	r6, r7
 800c642:	4632      	mov	r2, r6
 800c644:	4641      	mov	r1, r8
 800c646:	6820      	ldr	r0, [r4, #0]
 800c648:	f000 f966 	bl	800c918 <memmove>
 800c64c:	68a3      	ldr	r3, [r4, #8]
 800c64e:	6822      	ldr	r2, [r4, #0]
 800c650:	2000      	movs	r0, #0
 800c652:	1b9b      	subs	r3, r3, r6
 800c654:	4432      	add	r2, r6
 800c656:	60a3      	str	r3, [r4, #8]
 800c658:	6022      	str	r2, [r4, #0]
 800c65a:	e7db      	b.n	800c614 <__ssputs_r+0x58>
 800c65c:	462a      	mov	r2, r5
 800c65e:	f000 f981 	bl	800c964 <_realloc_r>
 800c662:	4606      	mov	r6, r0
 800c664:	2800      	cmp	r0, #0
 800c666:	d1e1      	bne.n	800c62c <__ssputs_r+0x70>
 800c668:	6921      	ldr	r1, [r4, #16]
 800c66a:	4650      	mov	r0, sl
 800c66c:	f7ff fefc 	bl	800c468 <_free_r>
 800c670:	e7c7      	b.n	800c602 <__ssputs_r+0x46>
	...

0800c674 <_svfiprintf_r>:
 800c674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c678:	4698      	mov	r8, r3
 800c67a:	898b      	ldrh	r3, [r1, #12]
 800c67c:	b09d      	sub	sp, #116	; 0x74
 800c67e:	4607      	mov	r7, r0
 800c680:	061b      	lsls	r3, r3, #24
 800c682:	460d      	mov	r5, r1
 800c684:	4614      	mov	r4, r2
 800c686:	d50e      	bpl.n	800c6a6 <_svfiprintf_r+0x32>
 800c688:	690b      	ldr	r3, [r1, #16]
 800c68a:	b963      	cbnz	r3, 800c6a6 <_svfiprintf_r+0x32>
 800c68c:	2140      	movs	r1, #64	; 0x40
 800c68e:	f7ff ff3b 	bl	800c508 <_malloc_r>
 800c692:	6028      	str	r0, [r5, #0]
 800c694:	6128      	str	r0, [r5, #16]
 800c696:	b920      	cbnz	r0, 800c6a2 <_svfiprintf_r+0x2e>
 800c698:	230c      	movs	r3, #12
 800c69a:	603b      	str	r3, [r7, #0]
 800c69c:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a0:	e0d1      	b.n	800c846 <_svfiprintf_r+0x1d2>
 800c6a2:	2340      	movs	r3, #64	; 0x40
 800c6a4:	616b      	str	r3, [r5, #20]
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6ac:	f04f 0901 	mov.w	r9, #1
 800c6b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c860 <_svfiprintf_r+0x1ec>
 800c6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b6:	2320      	movs	r3, #32
 800c6b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6bc:	2330      	movs	r3, #48	; 0x30
 800c6be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6c2:	4623      	mov	r3, r4
 800c6c4:	469a      	mov	sl, r3
 800c6c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6ca:	b10a      	cbz	r2, 800c6d0 <_svfiprintf_r+0x5c>
 800c6cc:	2a25      	cmp	r2, #37	; 0x25
 800c6ce:	d1f9      	bne.n	800c6c4 <_svfiprintf_r+0x50>
 800c6d0:	ebba 0b04 	subs.w	fp, sl, r4
 800c6d4:	d00b      	beq.n	800c6ee <_svfiprintf_r+0x7a>
 800c6d6:	465b      	mov	r3, fp
 800c6d8:	4622      	mov	r2, r4
 800c6da:	4629      	mov	r1, r5
 800c6dc:	4638      	mov	r0, r7
 800c6de:	f7ff ff6d 	bl	800c5bc <__ssputs_r>
 800c6e2:	3001      	adds	r0, #1
 800c6e4:	f000 80aa 	beq.w	800c83c <_svfiprintf_r+0x1c8>
 800c6e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6ea:	445a      	add	r2, fp
 800c6ec:	9209      	str	r2, [sp, #36]	; 0x24
 800c6ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f000 80a2 	beq.w	800c83c <_svfiprintf_r+0x1c8>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c6fe:	f10a 0a01 	add.w	sl, sl, #1
 800c702:	9304      	str	r3, [sp, #16]
 800c704:	9307      	str	r3, [sp, #28]
 800c706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c70a:	931a      	str	r3, [sp, #104]	; 0x68
 800c70c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c710:	4654      	mov	r4, sl
 800c712:	2205      	movs	r2, #5
 800c714:	4852      	ldr	r0, [pc, #328]	; (800c860 <_svfiprintf_r+0x1ec>)
 800c716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c71a:	f7ff faf3 	bl	800bd04 <memchr>
 800c71e:	9a04      	ldr	r2, [sp, #16]
 800c720:	b9d8      	cbnz	r0, 800c75a <_svfiprintf_r+0xe6>
 800c722:	06d0      	lsls	r0, r2, #27
 800c724:	bf44      	itt	mi
 800c726:	2320      	movmi	r3, #32
 800c728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c72c:	0711      	lsls	r1, r2, #28
 800c72e:	bf44      	itt	mi
 800c730:	232b      	movmi	r3, #43	; 0x2b
 800c732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c736:	f89a 3000 	ldrb.w	r3, [sl]
 800c73a:	2b2a      	cmp	r3, #42	; 0x2a
 800c73c:	d015      	beq.n	800c76a <_svfiprintf_r+0xf6>
 800c73e:	9a07      	ldr	r2, [sp, #28]
 800c740:	4654      	mov	r4, sl
 800c742:	2000      	movs	r0, #0
 800c744:	f04f 0c0a 	mov.w	ip, #10
 800c748:	4621      	mov	r1, r4
 800c74a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c74e:	3b30      	subs	r3, #48	; 0x30
 800c750:	2b09      	cmp	r3, #9
 800c752:	d94e      	bls.n	800c7f2 <_svfiprintf_r+0x17e>
 800c754:	b1b0      	cbz	r0, 800c784 <_svfiprintf_r+0x110>
 800c756:	9207      	str	r2, [sp, #28]
 800c758:	e014      	b.n	800c784 <_svfiprintf_r+0x110>
 800c75a:	eba0 0308 	sub.w	r3, r0, r8
 800c75e:	46a2      	mov	sl, r4
 800c760:	fa09 f303 	lsl.w	r3, r9, r3
 800c764:	4313      	orrs	r3, r2
 800c766:	9304      	str	r3, [sp, #16]
 800c768:	e7d2      	b.n	800c710 <_svfiprintf_r+0x9c>
 800c76a:	9b03      	ldr	r3, [sp, #12]
 800c76c:	1d19      	adds	r1, r3, #4
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	9103      	str	r1, [sp, #12]
 800c774:	bfbb      	ittet	lt
 800c776:	425b      	neglt	r3, r3
 800c778:	f042 0202 	orrlt.w	r2, r2, #2
 800c77c:	9307      	strge	r3, [sp, #28]
 800c77e:	9307      	strlt	r3, [sp, #28]
 800c780:	bfb8      	it	lt
 800c782:	9204      	strlt	r2, [sp, #16]
 800c784:	7823      	ldrb	r3, [r4, #0]
 800c786:	2b2e      	cmp	r3, #46	; 0x2e
 800c788:	d10c      	bne.n	800c7a4 <_svfiprintf_r+0x130>
 800c78a:	7863      	ldrb	r3, [r4, #1]
 800c78c:	2b2a      	cmp	r3, #42	; 0x2a
 800c78e:	d135      	bne.n	800c7fc <_svfiprintf_r+0x188>
 800c790:	9b03      	ldr	r3, [sp, #12]
 800c792:	3402      	adds	r4, #2
 800c794:	1d1a      	adds	r2, r3, #4
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	9203      	str	r2, [sp, #12]
 800c79c:	bfb8      	it	lt
 800c79e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7a2:	9305      	str	r3, [sp, #20]
 800c7a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c870 <_svfiprintf_r+0x1fc>
 800c7a8:	2203      	movs	r2, #3
 800c7aa:	7821      	ldrb	r1, [r4, #0]
 800c7ac:	4650      	mov	r0, sl
 800c7ae:	f7ff faa9 	bl	800bd04 <memchr>
 800c7b2:	b140      	cbz	r0, 800c7c6 <_svfiprintf_r+0x152>
 800c7b4:	2340      	movs	r3, #64	; 0x40
 800c7b6:	eba0 000a 	sub.w	r0, r0, sl
 800c7ba:	3401      	adds	r4, #1
 800c7bc:	fa03 f000 	lsl.w	r0, r3, r0
 800c7c0:	9b04      	ldr	r3, [sp, #16]
 800c7c2:	4303      	orrs	r3, r0
 800c7c4:	9304      	str	r3, [sp, #16]
 800c7c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ca:	2206      	movs	r2, #6
 800c7cc:	4825      	ldr	r0, [pc, #148]	; (800c864 <_svfiprintf_r+0x1f0>)
 800c7ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7d2:	f7ff fa97 	bl	800bd04 <memchr>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	d038      	beq.n	800c84c <_svfiprintf_r+0x1d8>
 800c7da:	4b23      	ldr	r3, [pc, #140]	; (800c868 <_svfiprintf_r+0x1f4>)
 800c7dc:	bb1b      	cbnz	r3, 800c826 <_svfiprintf_r+0x1b2>
 800c7de:	9b03      	ldr	r3, [sp, #12]
 800c7e0:	3307      	adds	r3, #7
 800c7e2:	f023 0307 	bic.w	r3, r3, #7
 800c7e6:	3308      	adds	r3, #8
 800c7e8:	9303      	str	r3, [sp, #12]
 800c7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ec:	4433      	add	r3, r6
 800c7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c7f0:	e767      	b.n	800c6c2 <_svfiprintf_r+0x4e>
 800c7f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	2001      	movs	r0, #1
 800c7fa:	e7a5      	b.n	800c748 <_svfiprintf_r+0xd4>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	3401      	adds	r4, #1
 800c800:	f04f 0c0a 	mov.w	ip, #10
 800c804:	4619      	mov	r1, r3
 800c806:	9305      	str	r3, [sp, #20]
 800c808:	4620      	mov	r0, r4
 800c80a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c80e:	3a30      	subs	r2, #48	; 0x30
 800c810:	2a09      	cmp	r2, #9
 800c812:	d903      	bls.n	800c81c <_svfiprintf_r+0x1a8>
 800c814:	2b00      	cmp	r3, #0
 800c816:	d0c5      	beq.n	800c7a4 <_svfiprintf_r+0x130>
 800c818:	9105      	str	r1, [sp, #20]
 800c81a:	e7c3      	b.n	800c7a4 <_svfiprintf_r+0x130>
 800c81c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c820:	4604      	mov	r4, r0
 800c822:	2301      	movs	r3, #1
 800c824:	e7f0      	b.n	800c808 <_svfiprintf_r+0x194>
 800c826:	ab03      	add	r3, sp, #12
 800c828:	462a      	mov	r2, r5
 800c82a:	a904      	add	r1, sp, #16
 800c82c:	4638      	mov	r0, r7
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	4b0e      	ldr	r3, [pc, #56]	; (800c86c <_svfiprintf_r+0x1f8>)
 800c832:	f7fd fff3 	bl	800a81c <_printf_float>
 800c836:	1c42      	adds	r2, r0, #1
 800c838:	4606      	mov	r6, r0
 800c83a:	d1d6      	bne.n	800c7ea <_svfiprintf_r+0x176>
 800c83c:	89ab      	ldrh	r3, [r5, #12]
 800c83e:	065b      	lsls	r3, r3, #25
 800c840:	f53f af2c 	bmi.w	800c69c <_svfiprintf_r+0x28>
 800c844:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c846:	b01d      	add	sp, #116	; 0x74
 800c848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84c:	ab03      	add	r3, sp, #12
 800c84e:	462a      	mov	r2, r5
 800c850:	a904      	add	r1, sp, #16
 800c852:	4638      	mov	r0, r7
 800c854:	9300      	str	r3, [sp, #0]
 800c856:	4b05      	ldr	r3, [pc, #20]	; (800c86c <_svfiprintf_r+0x1f8>)
 800c858:	f7fe fa86 	bl	800ad68 <_printf_i>
 800c85c:	e7eb      	b.n	800c836 <_svfiprintf_r+0x1c2>
 800c85e:	bf00      	nop
 800c860:	0802076c 	.word	0x0802076c
 800c864:	08020776 	.word	0x08020776
 800c868:	0800a81d 	.word	0x0800a81d
 800c86c:	0800c5bd 	.word	0x0800c5bd
 800c870:	08020772 	.word	0x08020772

0800c874 <_sbrk_r>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	2300      	movs	r3, #0
 800c878:	4d05      	ldr	r5, [pc, #20]	; (800c890 <_sbrk_r+0x1c>)
 800c87a:	4604      	mov	r4, r0
 800c87c:	4608      	mov	r0, r1
 800c87e:	602b      	str	r3, [r5, #0]
 800c880:	f7f5 fd80 	bl	8002384 <_sbrk>
 800c884:	1c43      	adds	r3, r0, #1
 800c886:	d102      	bne.n	800c88e <_sbrk_r+0x1a>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	b103      	cbz	r3, 800c88e <_sbrk_r+0x1a>
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	20004e08 	.word	0x20004e08

0800c894 <__assert_func>:
 800c894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c896:	4614      	mov	r4, r2
 800c898:	461a      	mov	r2, r3
 800c89a:	4b09      	ldr	r3, [pc, #36]	; (800c8c0 <__assert_func+0x2c>)
 800c89c:	4605      	mov	r5, r0
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	68d8      	ldr	r0, [r3, #12]
 800c8a2:	b14c      	cbz	r4, 800c8b8 <__assert_func+0x24>
 800c8a4:	4b07      	ldr	r3, [pc, #28]	; (800c8c4 <__assert_func+0x30>)
 800c8a6:	9100      	str	r1, [sp, #0]
 800c8a8:	4907      	ldr	r1, [pc, #28]	; (800c8c8 <__assert_func+0x34>)
 800c8aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8ae:	462b      	mov	r3, r5
 800c8b0:	f000 f80e 	bl	800c8d0 <fiprintf>
 800c8b4:	f000 faa4 	bl	800ce00 <abort>
 800c8b8:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <__assert_func+0x38>)
 800c8ba:	461c      	mov	r4, r3
 800c8bc:	e7f3      	b.n	800c8a6 <__assert_func+0x12>
 800c8be:	bf00      	nop
 800c8c0:	20000018 	.word	0x20000018
 800c8c4:	0802077d 	.word	0x0802077d
 800c8c8:	0802078a 	.word	0x0802078a
 800c8cc:	080207b8 	.word	0x080207b8

0800c8d0 <fiprintf>:
 800c8d0:	b40e      	push	{r1, r2, r3}
 800c8d2:	b503      	push	{r0, r1, lr}
 800c8d4:	ab03      	add	r3, sp, #12
 800c8d6:	4601      	mov	r1, r0
 800c8d8:	4805      	ldr	r0, [pc, #20]	; (800c8f0 <fiprintf+0x20>)
 800c8da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8de:	6800      	ldr	r0, [r0, #0]
 800c8e0:	9301      	str	r3, [sp, #4]
 800c8e2:	f000 f88f 	bl	800ca04 <_vfiprintf_r>
 800c8e6:	b002      	add	sp, #8
 800c8e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8ec:	b003      	add	sp, #12
 800c8ee:	4770      	bx	lr
 800c8f0:	20000018 	.word	0x20000018

0800c8f4 <__ascii_mbtowc>:
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	b901      	cbnz	r1, 800c8fa <__ascii_mbtowc+0x6>
 800c8f8:	a901      	add	r1, sp, #4
 800c8fa:	b142      	cbz	r2, 800c90e <__ascii_mbtowc+0x1a>
 800c8fc:	b14b      	cbz	r3, 800c912 <__ascii_mbtowc+0x1e>
 800c8fe:	7813      	ldrb	r3, [r2, #0]
 800c900:	600b      	str	r3, [r1, #0]
 800c902:	7812      	ldrb	r2, [r2, #0]
 800c904:	1e10      	subs	r0, r2, #0
 800c906:	bf18      	it	ne
 800c908:	2001      	movne	r0, #1
 800c90a:	b002      	add	sp, #8
 800c90c:	4770      	bx	lr
 800c90e:	4610      	mov	r0, r2
 800c910:	e7fb      	b.n	800c90a <__ascii_mbtowc+0x16>
 800c912:	f06f 0001 	mvn.w	r0, #1
 800c916:	e7f8      	b.n	800c90a <__ascii_mbtowc+0x16>

0800c918 <memmove>:
 800c918:	4288      	cmp	r0, r1
 800c91a:	b510      	push	{r4, lr}
 800c91c:	eb01 0402 	add.w	r4, r1, r2
 800c920:	d902      	bls.n	800c928 <memmove+0x10>
 800c922:	4284      	cmp	r4, r0
 800c924:	4623      	mov	r3, r4
 800c926:	d807      	bhi.n	800c938 <memmove+0x20>
 800c928:	1e43      	subs	r3, r0, #1
 800c92a:	42a1      	cmp	r1, r4
 800c92c:	d008      	beq.n	800c940 <memmove+0x28>
 800c92e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c932:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c936:	e7f8      	b.n	800c92a <memmove+0x12>
 800c938:	4402      	add	r2, r0
 800c93a:	4601      	mov	r1, r0
 800c93c:	428a      	cmp	r2, r1
 800c93e:	d100      	bne.n	800c942 <memmove+0x2a>
 800c940:	bd10      	pop	{r4, pc}
 800c942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c94a:	e7f7      	b.n	800c93c <memmove+0x24>

0800c94c <__malloc_lock>:
 800c94c:	4801      	ldr	r0, [pc, #4]	; (800c954 <__malloc_lock+0x8>)
 800c94e:	f000 bc15 	b.w	800d17c <__retarget_lock_acquire_recursive>
 800c952:	bf00      	nop
 800c954:	20004e10 	.word	0x20004e10

0800c958 <__malloc_unlock>:
 800c958:	4801      	ldr	r0, [pc, #4]	; (800c960 <__malloc_unlock+0x8>)
 800c95a:	f000 bc10 	b.w	800d17e <__retarget_lock_release_recursive>
 800c95e:	bf00      	nop
 800c960:	20004e10 	.word	0x20004e10

0800c964 <_realloc_r>:
 800c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c966:	4607      	mov	r7, r0
 800c968:	4614      	mov	r4, r2
 800c96a:	460e      	mov	r6, r1
 800c96c:	b921      	cbnz	r1, 800c978 <_realloc_r+0x14>
 800c96e:	4611      	mov	r1, r2
 800c970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c974:	f7ff bdc8 	b.w	800c508 <_malloc_r>
 800c978:	b922      	cbnz	r2, 800c984 <_realloc_r+0x20>
 800c97a:	4625      	mov	r5, r4
 800c97c:	f7ff fd74 	bl	800c468 <_free_r>
 800c980:	4628      	mov	r0, r5
 800c982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c984:	f000 fc60 	bl	800d248 <_malloc_usable_size_r>
 800c988:	42a0      	cmp	r0, r4
 800c98a:	d20f      	bcs.n	800c9ac <_realloc_r+0x48>
 800c98c:	4621      	mov	r1, r4
 800c98e:	4638      	mov	r0, r7
 800c990:	f7ff fdba 	bl	800c508 <_malloc_r>
 800c994:	4605      	mov	r5, r0
 800c996:	2800      	cmp	r0, #0
 800c998:	d0f2      	beq.n	800c980 <_realloc_r+0x1c>
 800c99a:	4631      	mov	r1, r6
 800c99c:	4622      	mov	r2, r4
 800c99e:	f7ff f9bf 	bl	800bd20 <memcpy>
 800c9a2:	4631      	mov	r1, r6
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	f7ff fd5f 	bl	800c468 <_free_r>
 800c9aa:	e7e9      	b.n	800c980 <_realloc_r+0x1c>
 800c9ac:	4635      	mov	r5, r6
 800c9ae:	e7e7      	b.n	800c980 <_realloc_r+0x1c>

0800c9b0 <__sfputc_r>:
 800c9b0:	6893      	ldr	r3, [r2, #8]
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	6093      	str	r3, [r2, #8]
 800c9b8:	b410      	push	{r4}
 800c9ba:	da08      	bge.n	800c9ce <__sfputc_r+0x1e>
 800c9bc:	6994      	ldr	r4, [r2, #24]
 800c9be:	42a3      	cmp	r3, r4
 800c9c0:	db01      	blt.n	800c9c6 <__sfputc_r+0x16>
 800c9c2:	290a      	cmp	r1, #10
 800c9c4:	d103      	bne.n	800c9ce <__sfputc_r+0x1e>
 800c9c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9ca:	f000 b94b 	b.w	800cc64 <__swbuf_r>
 800c9ce:	6813      	ldr	r3, [r2, #0]
 800c9d0:	1c58      	adds	r0, r3, #1
 800c9d2:	6010      	str	r0, [r2, #0]
 800c9d4:	4608      	mov	r0, r1
 800c9d6:	7019      	strb	r1, [r3, #0]
 800c9d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9dc:	4770      	bx	lr

0800c9de <__sfputs_r>:
 800c9de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e0:	4606      	mov	r6, r0
 800c9e2:	460f      	mov	r7, r1
 800c9e4:	4614      	mov	r4, r2
 800c9e6:	18d5      	adds	r5, r2, r3
 800c9e8:	42ac      	cmp	r4, r5
 800c9ea:	d101      	bne.n	800c9f0 <__sfputs_r+0x12>
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	e007      	b.n	800ca00 <__sfputs_r+0x22>
 800c9f0:	463a      	mov	r2, r7
 800c9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f7ff ffda 	bl	800c9b0 <__sfputc_r>
 800c9fc:	1c43      	adds	r3, r0, #1
 800c9fe:	d1f3      	bne.n	800c9e8 <__sfputs_r+0xa>
 800ca00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca04 <_vfiprintf_r>:
 800ca04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca08:	460d      	mov	r5, r1
 800ca0a:	b09d      	sub	sp, #116	; 0x74
 800ca0c:	4614      	mov	r4, r2
 800ca0e:	4698      	mov	r8, r3
 800ca10:	4606      	mov	r6, r0
 800ca12:	b118      	cbz	r0, 800ca1c <_vfiprintf_r+0x18>
 800ca14:	6983      	ldr	r3, [r0, #24]
 800ca16:	b90b      	cbnz	r3, 800ca1c <_vfiprintf_r+0x18>
 800ca18:	f000 fb12 	bl	800d040 <__sinit>
 800ca1c:	4b89      	ldr	r3, [pc, #548]	; (800cc44 <_vfiprintf_r+0x240>)
 800ca1e:	429d      	cmp	r5, r3
 800ca20:	d11b      	bne.n	800ca5a <_vfiprintf_r+0x56>
 800ca22:	6875      	ldr	r5, [r6, #4]
 800ca24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca26:	07d9      	lsls	r1, r3, #31
 800ca28:	d405      	bmi.n	800ca36 <_vfiprintf_r+0x32>
 800ca2a:	89ab      	ldrh	r3, [r5, #12]
 800ca2c:	059a      	lsls	r2, r3, #22
 800ca2e:	d402      	bmi.n	800ca36 <_vfiprintf_r+0x32>
 800ca30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca32:	f000 fba3 	bl	800d17c <__retarget_lock_acquire_recursive>
 800ca36:	89ab      	ldrh	r3, [r5, #12]
 800ca38:	071b      	lsls	r3, r3, #28
 800ca3a:	d501      	bpl.n	800ca40 <_vfiprintf_r+0x3c>
 800ca3c:	692b      	ldr	r3, [r5, #16]
 800ca3e:	b9eb      	cbnz	r3, 800ca7c <_vfiprintf_r+0x78>
 800ca40:	4629      	mov	r1, r5
 800ca42:	4630      	mov	r0, r6
 800ca44:	f000 f96e 	bl	800cd24 <__swsetup_r>
 800ca48:	b1c0      	cbz	r0, 800ca7c <_vfiprintf_r+0x78>
 800ca4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca4c:	07dc      	lsls	r4, r3, #31
 800ca4e:	d50e      	bpl.n	800ca6e <_vfiprintf_r+0x6a>
 800ca50:	f04f 30ff 	mov.w	r0, #4294967295
 800ca54:	b01d      	add	sp, #116	; 0x74
 800ca56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca5a:	4b7b      	ldr	r3, [pc, #492]	; (800cc48 <_vfiprintf_r+0x244>)
 800ca5c:	429d      	cmp	r5, r3
 800ca5e:	d101      	bne.n	800ca64 <_vfiprintf_r+0x60>
 800ca60:	68b5      	ldr	r5, [r6, #8]
 800ca62:	e7df      	b.n	800ca24 <_vfiprintf_r+0x20>
 800ca64:	4b79      	ldr	r3, [pc, #484]	; (800cc4c <_vfiprintf_r+0x248>)
 800ca66:	429d      	cmp	r5, r3
 800ca68:	bf08      	it	eq
 800ca6a:	68f5      	ldreq	r5, [r6, #12]
 800ca6c:	e7da      	b.n	800ca24 <_vfiprintf_r+0x20>
 800ca6e:	89ab      	ldrh	r3, [r5, #12]
 800ca70:	0598      	lsls	r0, r3, #22
 800ca72:	d4ed      	bmi.n	800ca50 <_vfiprintf_r+0x4c>
 800ca74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca76:	f000 fb82 	bl	800d17e <__retarget_lock_release_recursive>
 800ca7a:	e7e9      	b.n	800ca50 <_vfiprintf_r+0x4c>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca82:	f04f 0901 	mov.w	r9, #1
 800ca86:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800cc50 <_vfiprintf_r+0x24c>
 800ca8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca8c:	2320      	movs	r3, #32
 800ca8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca92:	2330      	movs	r3, #48	; 0x30
 800ca94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca98:	4623      	mov	r3, r4
 800ca9a:	469a      	mov	sl, r3
 800ca9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caa0:	b10a      	cbz	r2, 800caa6 <_vfiprintf_r+0xa2>
 800caa2:	2a25      	cmp	r2, #37	; 0x25
 800caa4:	d1f9      	bne.n	800ca9a <_vfiprintf_r+0x96>
 800caa6:	ebba 0b04 	subs.w	fp, sl, r4
 800caaa:	d00b      	beq.n	800cac4 <_vfiprintf_r+0xc0>
 800caac:	465b      	mov	r3, fp
 800caae:	4622      	mov	r2, r4
 800cab0:	4629      	mov	r1, r5
 800cab2:	4630      	mov	r0, r6
 800cab4:	f7ff ff93 	bl	800c9de <__sfputs_r>
 800cab8:	3001      	adds	r0, #1
 800caba:	f000 80aa 	beq.w	800cc12 <_vfiprintf_r+0x20e>
 800cabe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cac0:	445a      	add	r2, fp
 800cac2:	9209      	str	r2, [sp, #36]	; 0x24
 800cac4:	f89a 3000 	ldrb.w	r3, [sl]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f000 80a2 	beq.w	800cc12 <_vfiprintf_r+0x20e>
 800cace:	2300      	movs	r3, #0
 800cad0:	f04f 32ff 	mov.w	r2, #4294967295
 800cad4:	f10a 0a01 	add.w	sl, sl, #1
 800cad8:	9304      	str	r3, [sp, #16]
 800cada:	9307      	str	r3, [sp, #28]
 800cadc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cae0:	931a      	str	r3, [sp, #104]	; 0x68
 800cae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cae6:	4654      	mov	r4, sl
 800cae8:	2205      	movs	r2, #5
 800caea:	4859      	ldr	r0, [pc, #356]	; (800cc50 <_vfiprintf_r+0x24c>)
 800caec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf0:	f7ff f908 	bl	800bd04 <memchr>
 800caf4:	9a04      	ldr	r2, [sp, #16]
 800caf6:	b9d8      	cbnz	r0, 800cb30 <_vfiprintf_r+0x12c>
 800caf8:	06d1      	lsls	r1, r2, #27
 800cafa:	bf44      	itt	mi
 800cafc:	2320      	movmi	r3, #32
 800cafe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb02:	0713      	lsls	r3, r2, #28
 800cb04:	bf44      	itt	mi
 800cb06:	232b      	movmi	r3, #43	; 0x2b
 800cb08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb0c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb10:	2b2a      	cmp	r3, #42	; 0x2a
 800cb12:	d015      	beq.n	800cb40 <_vfiprintf_r+0x13c>
 800cb14:	9a07      	ldr	r2, [sp, #28]
 800cb16:	4654      	mov	r4, sl
 800cb18:	2000      	movs	r0, #0
 800cb1a:	f04f 0c0a 	mov.w	ip, #10
 800cb1e:	4621      	mov	r1, r4
 800cb20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb24:	3b30      	subs	r3, #48	; 0x30
 800cb26:	2b09      	cmp	r3, #9
 800cb28:	d94e      	bls.n	800cbc8 <_vfiprintf_r+0x1c4>
 800cb2a:	b1b0      	cbz	r0, 800cb5a <_vfiprintf_r+0x156>
 800cb2c:	9207      	str	r2, [sp, #28]
 800cb2e:	e014      	b.n	800cb5a <_vfiprintf_r+0x156>
 800cb30:	eba0 0308 	sub.w	r3, r0, r8
 800cb34:	46a2      	mov	sl, r4
 800cb36:	fa09 f303 	lsl.w	r3, r9, r3
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	9304      	str	r3, [sp, #16]
 800cb3e:	e7d2      	b.n	800cae6 <_vfiprintf_r+0xe2>
 800cb40:	9b03      	ldr	r3, [sp, #12]
 800cb42:	1d19      	adds	r1, r3, #4
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	9103      	str	r1, [sp, #12]
 800cb4a:	bfbb      	ittet	lt
 800cb4c:	425b      	neglt	r3, r3
 800cb4e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb52:	9307      	strge	r3, [sp, #28]
 800cb54:	9307      	strlt	r3, [sp, #28]
 800cb56:	bfb8      	it	lt
 800cb58:	9204      	strlt	r2, [sp, #16]
 800cb5a:	7823      	ldrb	r3, [r4, #0]
 800cb5c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb5e:	d10c      	bne.n	800cb7a <_vfiprintf_r+0x176>
 800cb60:	7863      	ldrb	r3, [r4, #1]
 800cb62:	2b2a      	cmp	r3, #42	; 0x2a
 800cb64:	d135      	bne.n	800cbd2 <_vfiprintf_r+0x1ce>
 800cb66:	9b03      	ldr	r3, [sp, #12]
 800cb68:	3402      	adds	r4, #2
 800cb6a:	1d1a      	adds	r2, r3, #4
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	9203      	str	r2, [sp, #12]
 800cb72:	bfb8      	it	lt
 800cb74:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb78:	9305      	str	r3, [sp, #20]
 800cb7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc60 <_vfiprintf_r+0x25c>
 800cb7e:	2203      	movs	r2, #3
 800cb80:	7821      	ldrb	r1, [r4, #0]
 800cb82:	4650      	mov	r0, sl
 800cb84:	f7ff f8be 	bl	800bd04 <memchr>
 800cb88:	b140      	cbz	r0, 800cb9c <_vfiprintf_r+0x198>
 800cb8a:	2340      	movs	r3, #64	; 0x40
 800cb8c:	eba0 000a 	sub.w	r0, r0, sl
 800cb90:	3401      	adds	r4, #1
 800cb92:	fa03 f000 	lsl.w	r0, r3, r0
 800cb96:	9b04      	ldr	r3, [sp, #16]
 800cb98:	4303      	orrs	r3, r0
 800cb9a:	9304      	str	r3, [sp, #16]
 800cb9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cba0:	2206      	movs	r2, #6
 800cba2:	482c      	ldr	r0, [pc, #176]	; (800cc54 <_vfiprintf_r+0x250>)
 800cba4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cba8:	f7ff f8ac 	bl	800bd04 <memchr>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d03f      	beq.n	800cc30 <_vfiprintf_r+0x22c>
 800cbb0:	4b29      	ldr	r3, [pc, #164]	; (800cc58 <_vfiprintf_r+0x254>)
 800cbb2:	bb1b      	cbnz	r3, 800cbfc <_vfiprintf_r+0x1f8>
 800cbb4:	9b03      	ldr	r3, [sp, #12]
 800cbb6:	3307      	adds	r3, #7
 800cbb8:	f023 0307 	bic.w	r3, r3, #7
 800cbbc:	3308      	adds	r3, #8
 800cbbe:	9303      	str	r3, [sp, #12]
 800cbc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc2:	443b      	add	r3, r7
 800cbc4:	9309      	str	r3, [sp, #36]	; 0x24
 800cbc6:	e767      	b.n	800ca98 <_vfiprintf_r+0x94>
 800cbc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbcc:	460c      	mov	r4, r1
 800cbce:	2001      	movs	r0, #1
 800cbd0:	e7a5      	b.n	800cb1e <_vfiprintf_r+0x11a>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	3401      	adds	r4, #1
 800cbd6:	f04f 0c0a 	mov.w	ip, #10
 800cbda:	4619      	mov	r1, r3
 800cbdc:	9305      	str	r3, [sp, #20]
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbe4:	3a30      	subs	r2, #48	; 0x30
 800cbe6:	2a09      	cmp	r2, #9
 800cbe8:	d903      	bls.n	800cbf2 <_vfiprintf_r+0x1ee>
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d0c5      	beq.n	800cb7a <_vfiprintf_r+0x176>
 800cbee:	9105      	str	r1, [sp, #20]
 800cbf0:	e7c3      	b.n	800cb7a <_vfiprintf_r+0x176>
 800cbf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbf6:	4604      	mov	r4, r0
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e7f0      	b.n	800cbde <_vfiprintf_r+0x1da>
 800cbfc:	ab03      	add	r3, sp, #12
 800cbfe:	462a      	mov	r2, r5
 800cc00:	a904      	add	r1, sp, #16
 800cc02:	4630      	mov	r0, r6
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	4b15      	ldr	r3, [pc, #84]	; (800cc5c <_vfiprintf_r+0x258>)
 800cc08:	f7fd fe08 	bl	800a81c <_printf_float>
 800cc0c:	4607      	mov	r7, r0
 800cc0e:	1c78      	adds	r0, r7, #1
 800cc10:	d1d6      	bne.n	800cbc0 <_vfiprintf_r+0x1bc>
 800cc12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc14:	07d9      	lsls	r1, r3, #31
 800cc16:	d405      	bmi.n	800cc24 <_vfiprintf_r+0x220>
 800cc18:	89ab      	ldrh	r3, [r5, #12]
 800cc1a:	059a      	lsls	r2, r3, #22
 800cc1c:	d402      	bmi.n	800cc24 <_vfiprintf_r+0x220>
 800cc1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc20:	f000 faad 	bl	800d17e <__retarget_lock_release_recursive>
 800cc24:	89ab      	ldrh	r3, [r5, #12]
 800cc26:	065b      	lsls	r3, r3, #25
 800cc28:	f53f af12 	bmi.w	800ca50 <_vfiprintf_r+0x4c>
 800cc2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc2e:	e711      	b.n	800ca54 <_vfiprintf_r+0x50>
 800cc30:	ab03      	add	r3, sp, #12
 800cc32:	462a      	mov	r2, r5
 800cc34:	a904      	add	r1, sp, #16
 800cc36:	4630      	mov	r0, r6
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	4b08      	ldr	r3, [pc, #32]	; (800cc5c <_vfiprintf_r+0x258>)
 800cc3c:	f7fe f894 	bl	800ad68 <_printf_i>
 800cc40:	e7e4      	b.n	800cc0c <_vfiprintf_r+0x208>
 800cc42:	bf00      	nop
 800cc44:	080208e4 	.word	0x080208e4
 800cc48:	08020904 	.word	0x08020904
 800cc4c:	080208c4 	.word	0x080208c4
 800cc50:	0802076c 	.word	0x0802076c
 800cc54:	08020776 	.word	0x08020776
 800cc58:	0800a81d 	.word	0x0800a81d
 800cc5c:	0800c9df 	.word	0x0800c9df
 800cc60:	08020772 	.word	0x08020772

0800cc64 <__swbuf_r>:
 800cc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc66:	460e      	mov	r6, r1
 800cc68:	4614      	mov	r4, r2
 800cc6a:	4605      	mov	r5, r0
 800cc6c:	b118      	cbz	r0, 800cc76 <__swbuf_r+0x12>
 800cc6e:	6983      	ldr	r3, [r0, #24]
 800cc70:	b90b      	cbnz	r3, 800cc76 <__swbuf_r+0x12>
 800cc72:	f000 f9e5 	bl	800d040 <__sinit>
 800cc76:	4b21      	ldr	r3, [pc, #132]	; (800ccfc <__swbuf_r+0x98>)
 800cc78:	429c      	cmp	r4, r3
 800cc7a:	d12b      	bne.n	800ccd4 <__swbuf_r+0x70>
 800cc7c:	686c      	ldr	r4, [r5, #4]
 800cc7e:	69a3      	ldr	r3, [r4, #24]
 800cc80:	60a3      	str	r3, [r4, #8]
 800cc82:	89a3      	ldrh	r3, [r4, #12]
 800cc84:	071a      	lsls	r2, r3, #28
 800cc86:	d52f      	bpl.n	800cce8 <__swbuf_r+0x84>
 800cc88:	6923      	ldr	r3, [r4, #16]
 800cc8a:	b36b      	cbz	r3, 800cce8 <__swbuf_r+0x84>
 800cc8c:	6923      	ldr	r3, [r4, #16]
 800cc8e:	b2f6      	uxtb	r6, r6
 800cc90:	6820      	ldr	r0, [r4, #0]
 800cc92:	4637      	mov	r7, r6
 800cc94:	1ac0      	subs	r0, r0, r3
 800cc96:	6963      	ldr	r3, [r4, #20]
 800cc98:	4283      	cmp	r3, r0
 800cc9a:	dc04      	bgt.n	800cca6 <__swbuf_r+0x42>
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	4628      	mov	r0, r5
 800cca0:	f000 f93a 	bl	800cf18 <_fflush_r>
 800cca4:	bb30      	cbnz	r0, 800ccf4 <__swbuf_r+0x90>
 800cca6:	68a3      	ldr	r3, [r4, #8]
 800cca8:	3001      	adds	r0, #1
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	60a3      	str	r3, [r4, #8]
 800ccae:	6823      	ldr	r3, [r4, #0]
 800ccb0:	1c5a      	adds	r2, r3, #1
 800ccb2:	6022      	str	r2, [r4, #0]
 800ccb4:	701e      	strb	r6, [r3, #0]
 800ccb6:	6963      	ldr	r3, [r4, #20]
 800ccb8:	4283      	cmp	r3, r0
 800ccba:	d004      	beq.n	800ccc6 <__swbuf_r+0x62>
 800ccbc:	89a3      	ldrh	r3, [r4, #12]
 800ccbe:	07db      	lsls	r3, r3, #31
 800ccc0:	d506      	bpl.n	800ccd0 <__swbuf_r+0x6c>
 800ccc2:	2e0a      	cmp	r6, #10
 800ccc4:	d104      	bne.n	800ccd0 <__swbuf_r+0x6c>
 800ccc6:	4621      	mov	r1, r4
 800ccc8:	4628      	mov	r0, r5
 800ccca:	f000 f925 	bl	800cf18 <_fflush_r>
 800ccce:	b988      	cbnz	r0, 800ccf4 <__swbuf_r+0x90>
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccd4:	4b0a      	ldr	r3, [pc, #40]	; (800cd00 <__swbuf_r+0x9c>)
 800ccd6:	429c      	cmp	r4, r3
 800ccd8:	d101      	bne.n	800ccde <__swbuf_r+0x7a>
 800ccda:	68ac      	ldr	r4, [r5, #8]
 800ccdc:	e7cf      	b.n	800cc7e <__swbuf_r+0x1a>
 800ccde:	4b09      	ldr	r3, [pc, #36]	; (800cd04 <__swbuf_r+0xa0>)
 800cce0:	429c      	cmp	r4, r3
 800cce2:	bf08      	it	eq
 800cce4:	68ec      	ldreq	r4, [r5, #12]
 800cce6:	e7ca      	b.n	800cc7e <__swbuf_r+0x1a>
 800cce8:	4621      	mov	r1, r4
 800ccea:	4628      	mov	r0, r5
 800ccec:	f000 f81a 	bl	800cd24 <__swsetup_r>
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d0cb      	beq.n	800cc8c <__swbuf_r+0x28>
 800ccf4:	f04f 37ff 	mov.w	r7, #4294967295
 800ccf8:	e7ea      	b.n	800ccd0 <__swbuf_r+0x6c>
 800ccfa:	bf00      	nop
 800ccfc:	080208e4 	.word	0x080208e4
 800cd00:	08020904 	.word	0x08020904
 800cd04:	080208c4 	.word	0x080208c4

0800cd08 <__ascii_wctomb>:
 800cd08:	b149      	cbz	r1, 800cd1e <__ascii_wctomb+0x16>
 800cd0a:	2aff      	cmp	r2, #255	; 0xff
 800cd0c:	bf8d      	iteet	hi
 800cd0e:	238a      	movhi	r3, #138	; 0x8a
 800cd10:	2001      	movls	r0, #1
 800cd12:	700a      	strbls	r2, [r1, #0]
 800cd14:	6003      	strhi	r3, [r0, #0]
 800cd16:	bf88      	it	hi
 800cd18:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd1c:	4770      	bx	lr
 800cd1e:	4608      	mov	r0, r1
 800cd20:	4770      	bx	lr
	...

0800cd24 <__swsetup_r>:
 800cd24:	4b32      	ldr	r3, [pc, #200]	; (800cdf0 <__swsetup_r+0xcc>)
 800cd26:	b570      	push	{r4, r5, r6, lr}
 800cd28:	681d      	ldr	r5, [r3, #0]
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	b125      	cbz	r5, 800cd3a <__swsetup_r+0x16>
 800cd30:	69ab      	ldr	r3, [r5, #24]
 800cd32:	b913      	cbnz	r3, 800cd3a <__swsetup_r+0x16>
 800cd34:	4628      	mov	r0, r5
 800cd36:	f000 f983 	bl	800d040 <__sinit>
 800cd3a:	4b2e      	ldr	r3, [pc, #184]	; (800cdf4 <__swsetup_r+0xd0>)
 800cd3c:	429c      	cmp	r4, r3
 800cd3e:	d10f      	bne.n	800cd60 <__swsetup_r+0x3c>
 800cd40:	686c      	ldr	r4, [r5, #4]
 800cd42:	89a3      	ldrh	r3, [r4, #12]
 800cd44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd48:	0719      	lsls	r1, r3, #28
 800cd4a:	d42c      	bmi.n	800cda6 <__swsetup_r+0x82>
 800cd4c:	06dd      	lsls	r5, r3, #27
 800cd4e:	d411      	bmi.n	800cd74 <__swsetup_r+0x50>
 800cd50:	2309      	movs	r3, #9
 800cd52:	6033      	str	r3, [r6, #0]
 800cd54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd58:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5c:	81a3      	strh	r3, [r4, #12]
 800cd5e:	e03e      	b.n	800cdde <__swsetup_r+0xba>
 800cd60:	4b25      	ldr	r3, [pc, #148]	; (800cdf8 <__swsetup_r+0xd4>)
 800cd62:	429c      	cmp	r4, r3
 800cd64:	d101      	bne.n	800cd6a <__swsetup_r+0x46>
 800cd66:	68ac      	ldr	r4, [r5, #8]
 800cd68:	e7eb      	b.n	800cd42 <__swsetup_r+0x1e>
 800cd6a:	4b24      	ldr	r3, [pc, #144]	; (800cdfc <__swsetup_r+0xd8>)
 800cd6c:	429c      	cmp	r4, r3
 800cd6e:	bf08      	it	eq
 800cd70:	68ec      	ldreq	r4, [r5, #12]
 800cd72:	e7e6      	b.n	800cd42 <__swsetup_r+0x1e>
 800cd74:	0758      	lsls	r0, r3, #29
 800cd76:	d512      	bpl.n	800cd9e <__swsetup_r+0x7a>
 800cd78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd7a:	b141      	cbz	r1, 800cd8e <__swsetup_r+0x6a>
 800cd7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd80:	4299      	cmp	r1, r3
 800cd82:	d002      	beq.n	800cd8a <__swsetup_r+0x66>
 800cd84:	4630      	mov	r0, r6
 800cd86:	f7ff fb6f 	bl	800c468 <_free_r>
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	6363      	str	r3, [r4, #52]	; 0x34
 800cd8e:	89a3      	ldrh	r3, [r4, #12]
 800cd90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd94:	81a3      	strh	r3, [r4, #12]
 800cd96:	2300      	movs	r3, #0
 800cd98:	6063      	str	r3, [r4, #4]
 800cd9a:	6923      	ldr	r3, [r4, #16]
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	89a3      	ldrh	r3, [r4, #12]
 800cda0:	f043 0308 	orr.w	r3, r3, #8
 800cda4:	81a3      	strh	r3, [r4, #12]
 800cda6:	6923      	ldr	r3, [r4, #16]
 800cda8:	b94b      	cbnz	r3, 800cdbe <__swsetup_r+0x9a>
 800cdaa:	89a3      	ldrh	r3, [r4, #12]
 800cdac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdb4:	d003      	beq.n	800cdbe <__swsetup_r+0x9a>
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f000 fa05 	bl	800d1c8 <__smakebuf_r>
 800cdbe:	89a0      	ldrh	r0, [r4, #12]
 800cdc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdc4:	f010 0301 	ands.w	r3, r0, #1
 800cdc8:	d00a      	beq.n	800cde0 <__swsetup_r+0xbc>
 800cdca:	2300      	movs	r3, #0
 800cdcc:	60a3      	str	r3, [r4, #8]
 800cdce:	6963      	ldr	r3, [r4, #20]
 800cdd0:	425b      	negs	r3, r3
 800cdd2:	61a3      	str	r3, [r4, #24]
 800cdd4:	6923      	ldr	r3, [r4, #16]
 800cdd6:	b943      	cbnz	r3, 800cdea <__swsetup_r+0xc6>
 800cdd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cddc:	d1ba      	bne.n	800cd54 <__swsetup_r+0x30>
 800cdde:	bd70      	pop	{r4, r5, r6, pc}
 800cde0:	0781      	lsls	r1, r0, #30
 800cde2:	bf58      	it	pl
 800cde4:	6963      	ldrpl	r3, [r4, #20]
 800cde6:	60a3      	str	r3, [r4, #8]
 800cde8:	e7f4      	b.n	800cdd4 <__swsetup_r+0xb0>
 800cdea:	2000      	movs	r0, #0
 800cdec:	e7f7      	b.n	800cdde <__swsetup_r+0xba>
 800cdee:	bf00      	nop
 800cdf0:	20000018 	.word	0x20000018
 800cdf4:	080208e4 	.word	0x080208e4
 800cdf8:	08020904 	.word	0x08020904
 800cdfc:	080208c4 	.word	0x080208c4

0800ce00 <abort>:
 800ce00:	2006      	movs	r0, #6
 800ce02:	b508      	push	{r3, lr}
 800ce04:	f000 fa50 	bl	800d2a8 <raise>
 800ce08:	2001      	movs	r0, #1
 800ce0a:	f7f5 fa43 	bl	8002294 <_exit>
	...

0800ce10 <__sflush_r>:
 800ce10:	898a      	ldrh	r2, [r1, #12]
 800ce12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce16:	4605      	mov	r5, r0
 800ce18:	0710      	lsls	r0, r2, #28
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	d458      	bmi.n	800ced0 <__sflush_r+0xc0>
 800ce1e:	684b      	ldr	r3, [r1, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	dc05      	bgt.n	800ce30 <__sflush_r+0x20>
 800ce24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	dc02      	bgt.n	800ce30 <__sflush_r+0x20>
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce32:	2e00      	cmp	r6, #0
 800ce34:	d0f9      	beq.n	800ce2a <__sflush_r+0x1a>
 800ce36:	2300      	movs	r3, #0
 800ce38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce3c:	682f      	ldr	r7, [r5, #0]
 800ce3e:	602b      	str	r3, [r5, #0]
 800ce40:	d032      	beq.n	800cea8 <__sflush_r+0x98>
 800ce42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce44:	89a3      	ldrh	r3, [r4, #12]
 800ce46:	075a      	lsls	r2, r3, #29
 800ce48:	d505      	bpl.n	800ce56 <__sflush_r+0x46>
 800ce4a:	6863      	ldr	r3, [r4, #4]
 800ce4c:	1ac0      	subs	r0, r0, r3
 800ce4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce50:	b10b      	cbz	r3, 800ce56 <__sflush_r+0x46>
 800ce52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce54:	1ac0      	subs	r0, r0, r3
 800ce56:	2300      	movs	r3, #0
 800ce58:	4602      	mov	r2, r0
 800ce5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	6a21      	ldr	r1, [r4, #32]
 800ce60:	47b0      	blx	r6
 800ce62:	1c43      	adds	r3, r0, #1
 800ce64:	89a3      	ldrh	r3, [r4, #12]
 800ce66:	d106      	bne.n	800ce76 <__sflush_r+0x66>
 800ce68:	6829      	ldr	r1, [r5, #0]
 800ce6a:	291d      	cmp	r1, #29
 800ce6c:	d82c      	bhi.n	800cec8 <__sflush_r+0xb8>
 800ce6e:	4a29      	ldr	r2, [pc, #164]	; (800cf14 <__sflush_r+0x104>)
 800ce70:	40ca      	lsrs	r2, r1
 800ce72:	07d6      	lsls	r6, r2, #31
 800ce74:	d528      	bpl.n	800cec8 <__sflush_r+0xb8>
 800ce76:	2200      	movs	r2, #0
 800ce78:	04d9      	lsls	r1, r3, #19
 800ce7a:	6062      	str	r2, [r4, #4]
 800ce7c:	6922      	ldr	r2, [r4, #16]
 800ce7e:	6022      	str	r2, [r4, #0]
 800ce80:	d504      	bpl.n	800ce8c <__sflush_r+0x7c>
 800ce82:	1c42      	adds	r2, r0, #1
 800ce84:	d101      	bne.n	800ce8a <__sflush_r+0x7a>
 800ce86:	682b      	ldr	r3, [r5, #0]
 800ce88:	b903      	cbnz	r3, 800ce8c <__sflush_r+0x7c>
 800ce8a:	6560      	str	r0, [r4, #84]	; 0x54
 800ce8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce8e:	602f      	str	r7, [r5, #0]
 800ce90:	2900      	cmp	r1, #0
 800ce92:	d0ca      	beq.n	800ce2a <__sflush_r+0x1a>
 800ce94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce98:	4299      	cmp	r1, r3
 800ce9a:	d002      	beq.n	800cea2 <__sflush_r+0x92>
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	f7ff fae3 	bl	800c468 <_free_r>
 800cea2:	2000      	movs	r0, #0
 800cea4:	6360      	str	r0, [r4, #52]	; 0x34
 800cea6:	e7c1      	b.n	800ce2c <__sflush_r+0x1c>
 800cea8:	6a21      	ldr	r1, [r4, #32]
 800ceaa:	2301      	movs	r3, #1
 800ceac:	4628      	mov	r0, r5
 800ceae:	47b0      	blx	r6
 800ceb0:	1c41      	adds	r1, r0, #1
 800ceb2:	d1c7      	bne.n	800ce44 <__sflush_r+0x34>
 800ceb4:	682b      	ldr	r3, [r5, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d0c4      	beq.n	800ce44 <__sflush_r+0x34>
 800ceba:	2b1d      	cmp	r3, #29
 800cebc:	d001      	beq.n	800cec2 <__sflush_r+0xb2>
 800cebe:	2b16      	cmp	r3, #22
 800cec0:	d101      	bne.n	800cec6 <__sflush_r+0xb6>
 800cec2:	602f      	str	r7, [r5, #0]
 800cec4:	e7b1      	b.n	800ce2a <__sflush_r+0x1a>
 800cec6:	89a3      	ldrh	r3, [r4, #12]
 800cec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cecc:	81a3      	strh	r3, [r4, #12]
 800cece:	e7ad      	b.n	800ce2c <__sflush_r+0x1c>
 800ced0:	690f      	ldr	r7, [r1, #16]
 800ced2:	2f00      	cmp	r7, #0
 800ced4:	d0a9      	beq.n	800ce2a <__sflush_r+0x1a>
 800ced6:	0793      	lsls	r3, r2, #30
 800ced8:	680e      	ldr	r6, [r1, #0]
 800ceda:	600f      	str	r7, [r1, #0]
 800cedc:	bf0c      	ite	eq
 800cede:	694b      	ldreq	r3, [r1, #20]
 800cee0:	2300      	movne	r3, #0
 800cee2:	eba6 0807 	sub.w	r8, r6, r7
 800cee6:	608b      	str	r3, [r1, #8]
 800cee8:	f1b8 0f00 	cmp.w	r8, #0
 800ceec:	dd9d      	ble.n	800ce2a <__sflush_r+0x1a>
 800ceee:	4643      	mov	r3, r8
 800cef0:	463a      	mov	r2, r7
 800cef2:	6a21      	ldr	r1, [r4, #32]
 800cef4:	4628      	mov	r0, r5
 800cef6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cef8:	47b0      	blx	r6
 800cefa:	2800      	cmp	r0, #0
 800cefc:	dc06      	bgt.n	800cf0c <__sflush_r+0xfc>
 800cefe:	89a3      	ldrh	r3, [r4, #12]
 800cf00:	f04f 30ff 	mov.w	r0, #4294967295
 800cf04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf08:	81a3      	strh	r3, [r4, #12]
 800cf0a:	e78f      	b.n	800ce2c <__sflush_r+0x1c>
 800cf0c:	4407      	add	r7, r0
 800cf0e:	eba8 0800 	sub.w	r8, r8, r0
 800cf12:	e7e9      	b.n	800cee8 <__sflush_r+0xd8>
 800cf14:	20400001 	.word	0x20400001

0800cf18 <_fflush_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	690b      	ldr	r3, [r1, #16]
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	460c      	mov	r4, r1
 800cf20:	b913      	cbnz	r3, 800cf28 <_fflush_r+0x10>
 800cf22:	2500      	movs	r5, #0
 800cf24:	4628      	mov	r0, r5
 800cf26:	bd38      	pop	{r3, r4, r5, pc}
 800cf28:	b118      	cbz	r0, 800cf32 <_fflush_r+0x1a>
 800cf2a:	6983      	ldr	r3, [r0, #24]
 800cf2c:	b90b      	cbnz	r3, 800cf32 <_fflush_r+0x1a>
 800cf2e:	f000 f887 	bl	800d040 <__sinit>
 800cf32:	4b14      	ldr	r3, [pc, #80]	; (800cf84 <_fflush_r+0x6c>)
 800cf34:	429c      	cmp	r4, r3
 800cf36:	d11b      	bne.n	800cf70 <_fflush_r+0x58>
 800cf38:	686c      	ldr	r4, [r5, #4]
 800cf3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d0ef      	beq.n	800cf22 <_fflush_r+0xa>
 800cf42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf44:	07d0      	lsls	r0, r2, #31
 800cf46:	d404      	bmi.n	800cf52 <_fflush_r+0x3a>
 800cf48:	0599      	lsls	r1, r3, #22
 800cf4a:	d402      	bmi.n	800cf52 <_fflush_r+0x3a>
 800cf4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf4e:	f000 f915 	bl	800d17c <__retarget_lock_acquire_recursive>
 800cf52:	4628      	mov	r0, r5
 800cf54:	4621      	mov	r1, r4
 800cf56:	f7ff ff5b 	bl	800ce10 <__sflush_r>
 800cf5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf5c:	4605      	mov	r5, r0
 800cf5e:	07da      	lsls	r2, r3, #31
 800cf60:	d4e0      	bmi.n	800cf24 <_fflush_r+0xc>
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	059b      	lsls	r3, r3, #22
 800cf66:	d4dd      	bmi.n	800cf24 <_fflush_r+0xc>
 800cf68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf6a:	f000 f908 	bl	800d17e <__retarget_lock_release_recursive>
 800cf6e:	e7d9      	b.n	800cf24 <_fflush_r+0xc>
 800cf70:	4b05      	ldr	r3, [pc, #20]	; (800cf88 <_fflush_r+0x70>)
 800cf72:	429c      	cmp	r4, r3
 800cf74:	d101      	bne.n	800cf7a <_fflush_r+0x62>
 800cf76:	68ac      	ldr	r4, [r5, #8]
 800cf78:	e7df      	b.n	800cf3a <_fflush_r+0x22>
 800cf7a:	4b04      	ldr	r3, [pc, #16]	; (800cf8c <_fflush_r+0x74>)
 800cf7c:	429c      	cmp	r4, r3
 800cf7e:	bf08      	it	eq
 800cf80:	68ec      	ldreq	r4, [r5, #12]
 800cf82:	e7da      	b.n	800cf3a <_fflush_r+0x22>
 800cf84:	080208e4 	.word	0x080208e4
 800cf88:	08020904 	.word	0x08020904
 800cf8c:	080208c4 	.word	0x080208c4

0800cf90 <std>:
 800cf90:	2300      	movs	r3, #0
 800cf92:	b510      	push	{r4, lr}
 800cf94:	4604      	mov	r4, r0
 800cf96:	6083      	str	r3, [r0, #8]
 800cf98:	8181      	strh	r1, [r0, #12]
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	6643      	str	r3, [r0, #100]	; 0x64
 800cf9e:	81c2      	strh	r2, [r0, #14]
 800cfa0:	2208      	movs	r2, #8
 800cfa2:	6183      	str	r3, [r0, #24]
 800cfa4:	e9c0 3300 	strd	r3, r3, [r0]
 800cfa8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfac:	305c      	adds	r0, #92	; 0x5c
 800cfae:	f7fd fb8d 	bl	800a6cc <memset>
 800cfb2:	4b05      	ldr	r3, [pc, #20]	; (800cfc8 <std+0x38>)
 800cfb4:	6224      	str	r4, [r4, #32]
 800cfb6:	6263      	str	r3, [r4, #36]	; 0x24
 800cfb8:	4b04      	ldr	r3, [pc, #16]	; (800cfcc <std+0x3c>)
 800cfba:	62a3      	str	r3, [r4, #40]	; 0x28
 800cfbc:	4b04      	ldr	r3, [pc, #16]	; (800cfd0 <std+0x40>)
 800cfbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cfc0:	4b04      	ldr	r3, [pc, #16]	; (800cfd4 <std+0x44>)
 800cfc2:	6323      	str	r3, [r4, #48]	; 0x30
 800cfc4:	bd10      	pop	{r4, pc}
 800cfc6:	bf00      	nop
 800cfc8:	0800d2e1 	.word	0x0800d2e1
 800cfcc:	0800d303 	.word	0x0800d303
 800cfd0:	0800d33b 	.word	0x0800d33b
 800cfd4:	0800d35f 	.word	0x0800d35f

0800cfd8 <_cleanup_r>:
 800cfd8:	4901      	ldr	r1, [pc, #4]	; (800cfe0 <_cleanup_r+0x8>)
 800cfda:	f000 b8af 	b.w	800d13c <_fwalk_reent>
 800cfde:	bf00      	nop
 800cfe0:	0800cf19 	.word	0x0800cf19

0800cfe4 <__sfmoreglue>:
 800cfe4:	b570      	push	{r4, r5, r6, lr}
 800cfe6:	1e4a      	subs	r2, r1, #1
 800cfe8:	2568      	movs	r5, #104	; 0x68
 800cfea:	460e      	mov	r6, r1
 800cfec:	4355      	muls	r5, r2
 800cfee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cff2:	f7ff fa89 	bl	800c508 <_malloc_r>
 800cff6:	4604      	mov	r4, r0
 800cff8:	b140      	cbz	r0, 800d00c <__sfmoreglue+0x28>
 800cffa:	2100      	movs	r1, #0
 800cffc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d000:	e9c0 1600 	strd	r1, r6, [r0]
 800d004:	300c      	adds	r0, #12
 800d006:	60a0      	str	r0, [r4, #8]
 800d008:	f7fd fb60 	bl	800a6cc <memset>
 800d00c:	4620      	mov	r0, r4
 800d00e:	bd70      	pop	{r4, r5, r6, pc}

0800d010 <__sfp_lock_acquire>:
 800d010:	4801      	ldr	r0, [pc, #4]	; (800d018 <__sfp_lock_acquire+0x8>)
 800d012:	f000 b8b3 	b.w	800d17c <__retarget_lock_acquire_recursive>
 800d016:	bf00      	nop
 800d018:	20004e14 	.word	0x20004e14

0800d01c <__sfp_lock_release>:
 800d01c:	4801      	ldr	r0, [pc, #4]	; (800d024 <__sfp_lock_release+0x8>)
 800d01e:	f000 b8ae 	b.w	800d17e <__retarget_lock_release_recursive>
 800d022:	bf00      	nop
 800d024:	20004e14 	.word	0x20004e14

0800d028 <__sinit_lock_acquire>:
 800d028:	4801      	ldr	r0, [pc, #4]	; (800d030 <__sinit_lock_acquire+0x8>)
 800d02a:	f000 b8a7 	b.w	800d17c <__retarget_lock_acquire_recursive>
 800d02e:	bf00      	nop
 800d030:	20004e0f 	.word	0x20004e0f

0800d034 <__sinit_lock_release>:
 800d034:	4801      	ldr	r0, [pc, #4]	; (800d03c <__sinit_lock_release+0x8>)
 800d036:	f000 b8a2 	b.w	800d17e <__retarget_lock_release_recursive>
 800d03a:	bf00      	nop
 800d03c:	20004e0f 	.word	0x20004e0f

0800d040 <__sinit>:
 800d040:	b510      	push	{r4, lr}
 800d042:	4604      	mov	r4, r0
 800d044:	f7ff fff0 	bl	800d028 <__sinit_lock_acquire>
 800d048:	69a3      	ldr	r3, [r4, #24]
 800d04a:	b11b      	cbz	r3, 800d054 <__sinit+0x14>
 800d04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d050:	f7ff bff0 	b.w	800d034 <__sinit_lock_release>
 800d054:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d058:	6523      	str	r3, [r4, #80]	; 0x50
 800d05a:	4620      	mov	r0, r4
 800d05c:	4b12      	ldr	r3, [pc, #72]	; (800d0a8 <__sinit+0x68>)
 800d05e:	4a13      	ldr	r2, [pc, #76]	; (800d0ac <__sinit+0x6c>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	62a2      	str	r2, [r4, #40]	; 0x28
 800d064:	42a3      	cmp	r3, r4
 800d066:	bf04      	itt	eq
 800d068:	2301      	moveq	r3, #1
 800d06a:	61a3      	streq	r3, [r4, #24]
 800d06c:	f000 f820 	bl	800d0b0 <__sfp>
 800d070:	6060      	str	r0, [r4, #4]
 800d072:	4620      	mov	r0, r4
 800d074:	f000 f81c 	bl	800d0b0 <__sfp>
 800d078:	60a0      	str	r0, [r4, #8]
 800d07a:	4620      	mov	r0, r4
 800d07c:	f000 f818 	bl	800d0b0 <__sfp>
 800d080:	2200      	movs	r2, #0
 800d082:	2104      	movs	r1, #4
 800d084:	60e0      	str	r0, [r4, #12]
 800d086:	6860      	ldr	r0, [r4, #4]
 800d088:	f7ff ff82 	bl	800cf90 <std>
 800d08c:	2201      	movs	r2, #1
 800d08e:	2109      	movs	r1, #9
 800d090:	68a0      	ldr	r0, [r4, #8]
 800d092:	f7ff ff7d 	bl	800cf90 <std>
 800d096:	2202      	movs	r2, #2
 800d098:	2112      	movs	r1, #18
 800d09a:	68e0      	ldr	r0, [r4, #12]
 800d09c:	f7ff ff78 	bl	800cf90 <std>
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	61a3      	str	r3, [r4, #24]
 800d0a4:	e7d2      	b.n	800d04c <__sinit+0xc>
 800d0a6:	bf00      	nop
 800d0a8:	08020544 	.word	0x08020544
 800d0ac:	0800cfd9 	.word	0x0800cfd9

0800d0b0 <__sfp>:
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b2:	4607      	mov	r7, r0
 800d0b4:	f7ff ffac 	bl	800d010 <__sfp_lock_acquire>
 800d0b8:	4b1e      	ldr	r3, [pc, #120]	; (800d134 <__sfp+0x84>)
 800d0ba:	681e      	ldr	r6, [r3, #0]
 800d0bc:	69b3      	ldr	r3, [r6, #24]
 800d0be:	b913      	cbnz	r3, 800d0c6 <__sfp+0x16>
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f7ff ffbd 	bl	800d040 <__sinit>
 800d0c6:	3648      	adds	r6, #72	; 0x48
 800d0c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	d503      	bpl.n	800d0d8 <__sfp+0x28>
 800d0d0:	6833      	ldr	r3, [r6, #0]
 800d0d2:	b30b      	cbz	r3, 800d118 <__sfp+0x68>
 800d0d4:	6836      	ldr	r6, [r6, #0]
 800d0d6:	e7f7      	b.n	800d0c8 <__sfp+0x18>
 800d0d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d0dc:	b9d5      	cbnz	r5, 800d114 <__sfp+0x64>
 800d0de:	4b16      	ldr	r3, [pc, #88]	; (800d138 <__sfp+0x88>)
 800d0e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0e4:	6665      	str	r5, [r4, #100]	; 0x64
 800d0e6:	60e3      	str	r3, [r4, #12]
 800d0e8:	f000 f847 	bl	800d17a <__retarget_lock_init_recursive>
 800d0ec:	f7ff ff96 	bl	800d01c <__sfp_lock_release>
 800d0f0:	2208      	movs	r2, #8
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0f8:	6025      	str	r5, [r4, #0]
 800d0fa:	61a5      	str	r5, [r4, #24]
 800d0fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d100:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d104:	f7fd fae2 	bl	800a6cc <memset>
 800d108:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d10c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d110:	4620      	mov	r0, r4
 800d112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d114:	3468      	adds	r4, #104	; 0x68
 800d116:	e7d9      	b.n	800d0cc <__sfp+0x1c>
 800d118:	2104      	movs	r1, #4
 800d11a:	4638      	mov	r0, r7
 800d11c:	f7ff ff62 	bl	800cfe4 <__sfmoreglue>
 800d120:	4604      	mov	r4, r0
 800d122:	6030      	str	r0, [r6, #0]
 800d124:	2800      	cmp	r0, #0
 800d126:	d1d5      	bne.n	800d0d4 <__sfp+0x24>
 800d128:	f7ff ff78 	bl	800d01c <__sfp_lock_release>
 800d12c:	230c      	movs	r3, #12
 800d12e:	603b      	str	r3, [r7, #0]
 800d130:	e7ee      	b.n	800d110 <__sfp+0x60>
 800d132:	bf00      	nop
 800d134:	08020544 	.word	0x08020544
 800d138:	ffff0001 	.word	0xffff0001

0800d13c <_fwalk_reent>:
 800d13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d140:	4606      	mov	r6, r0
 800d142:	4688      	mov	r8, r1
 800d144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d148:	2700      	movs	r7, #0
 800d14a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d14e:	f1b9 0901 	subs.w	r9, r9, #1
 800d152:	d505      	bpl.n	800d160 <_fwalk_reent+0x24>
 800d154:	6824      	ldr	r4, [r4, #0]
 800d156:	2c00      	cmp	r4, #0
 800d158:	d1f7      	bne.n	800d14a <_fwalk_reent+0xe>
 800d15a:	4638      	mov	r0, r7
 800d15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d160:	89ab      	ldrh	r3, [r5, #12]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d907      	bls.n	800d176 <_fwalk_reent+0x3a>
 800d166:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d16a:	3301      	adds	r3, #1
 800d16c:	d003      	beq.n	800d176 <_fwalk_reent+0x3a>
 800d16e:	4629      	mov	r1, r5
 800d170:	4630      	mov	r0, r6
 800d172:	47c0      	blx	r8
 800d174:	4307      	orrs	r7, r0
 800d176:	3568      	adds	r5, #104	; 0x68
 800d178:	e7e9      	b.n	800d14e <_fwalk_reent+0x12>

0800d17a <__retarget_lock_init_recursive>:
 800d17a:	4770      	bx	lr

0800d17c <__retarget_lock_acquire_recursive>:
 800d17c:	4770      	bx	lr

0800d17e <__retarget_lock_release_recursive>:
 800d17e:	4770      	bx	lr

0800d180 <__swhatbuf_r>:
 800d180:	b570      	push	{r4, r5, r6, lr}
 800d182:	460e      	mov	r6, r1
 800d184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d188:	b096      	sub	sp, #88	; 0x58
 800d18a:	4614      	mov	r4, r2
 800d18c:	2900      	cmp	r1, #0
 800d18e:	461d      	mov	r5, r3
 800d190:	da07      	bge.n	800d1a2 <__swhatbuf_r+0x22>
 800d192:	2300      	movs	r3, #0
 800d194:	602b      	str	r3, [r5, #0]
 800d196:	89b3      	ldrh	r3, [r6, #12]
 800d198:	061a      	lsls	r2, r3, #24
 800d19a:	d410      	bmi.n	800d1be <__swhatbuf_r+0x3e>
 800d19c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1a0:	e00e      	b.n	800d1c0 <__swhatbuf_r+0x40>
 800d1a2:	466a      	mov	r2, sp
 800d1a4:	f000 f902 	bl	800d3ac <_fstat_r>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	dbf2      	blt.n	800d192 <__swhatbuf_r+0x12>
 800d1ac:	9a01      	ldr	r2, [sp, #4]
 800d1ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d1b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d1b6:	425a      	negs	r2, r3
 800d1b8:	415a      	adcs	r2, r3
 800d1ba:	602a      	str	r2, [r5, #0]
 800d1bc:	e7ee      	b.n	800d19c <__swhatbuf_r+0x1c>
 800d1be:	2340      	movs	r3, #64	; 0x40
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	6023      	str	r3, [r4, #0]
 800d1c4:	b016      	add	sp, #88	; 0x58
 800d1c6:	bd70      	pop	{r4, r5, r6, pc}

0800d1c8 <__smakebuf_r>:
 800d1c8:	898b      	ldrh	r3, [r1, #12]
 800d1ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1cc:	079d      	lsls	r5, r3, #30
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	460c      	mov	r4, r1
 800d1d2:	d507      	bpl.n	800d1e4 <__smakebuf_r+0x1c>
 800d1d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1d8:	6023      	str	r3, [r4, #0]
 800d1da:	6123      	str	r3, [r4, #16]
 800d1dc:	2301      	movs	r3, #1
 800d1de:	6163      	str	r3, [r4, #20]
 800d1e0:	b002      	add	sp, #8
 800d1e2:	bd70      	pop	{r4, r5, r6, pc}
 800d1e4:	ab01      	add	r3, sp, #4
 800d1e6:	466a      	mov	r2, sp
 800d1e8:	f7ff ffca 	bl	800d180 <__swhatbuf_r>
 800d1ec:	9900      	ldr	r1, [sp, #0]
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	f7ff f989 	bl	800c508 <_malloc_r>
 800d1f6:	b948      	cbnz	r0, 800d20c <__smakebuf_r+0x44>
 800d1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1fc:	059a      	lsls	r2, r3, #22
 800d1fe:	d4ef      	bmi.n	800d1e0 <__smakebuf_r+0x18>
 800d200:	f023 0303 	bic.w	r3, r3, #3
 800d204:	f043 0302 	orr.w	r3, r3, #2
 800d208:	81a3      	strh	r3, [r4, #12]
 800d20a:	e7e3      	b.n	800d1d4 <__smakebuf_r+0xc>
 800d20c:	4b0d      	ldr	r3, [pc, #52]	; (800d244 <__smakebuf_r+0x7c>)
 800d20e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d210:	89a3      	ldrh	r3, [r4, #12]
 800d212:	6020      	str	r0, [r4, #0]
 800d214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d218:	6120      	str	r0, [r4, #16]
 800d21a:	81a3      	strh	r3, [r4, #12]
 800d21c:	9b00      	ldr	r3, [sp, #0]
 800d21e:	6163      	str	r3, [r4, #20]
 800d220:	9b01      	ldr	r3, [sp, #4]
 800d222:	b15b      	cbz	r3, 800d23c <__smakebuf_r+0x74>
 800d224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d228:	4630      	mov	r0, r6
 800d22a:	f000 f8d1 	bl	800d3d0 <_isatty_r>
 800d22e:	b128      	cbz	r0, 800d23c <__smakebuf_r+0x74>
 800d230:	89a3      	ldrh	r3, [r4, #12]
 800d232:	f023 0303 	bic.w	r3, r3, #3
 800d236:	f043 0301 	orr.w	r3, r3, #1
 800d23a:	81a3      	strh	r3, [r4, #12]
 800d23c:	89a0      	ldrh	r0, [r4, #12]
 800d23e:	4305      	orrs	r5, r0
 800d240:	81a5      	strh	r5, [r4, #12]
 800d242:	e7cd      	b.n	800d1e0 <__smakebuf_r+0x18>
 800d244:	0800cfd9 	.word	0x0800cfd9

0800d248 <_malloc_usable_size_r>:
 800d248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d24c:	1f18      	subs	r0, r3, #4
 800d24e:	2b00      	cmp	r3, #0
 800d250:	bfbc      	itt	lt
 800d252:	580b      	ldrlt	r3, [r1, r0]
 800d254:	18c0      	addlt	r0, r0, r3
 800d256:	4770      	bx	lr

0800d258 <_raise_r>:
 800d258:	291f      	cmp	r1, #31
 800d25a:	b538      	push	{r3, r4, r5, lr}
 800d25c:	4604      	mov	r4, r0
 800d25e:	460d      	mov	r5, r1
 800d260:	d904      	bls.n	800d26c <_raise_r+0x14>
 800d262:	2316      	movs	r3, #22
 800d264:	6003      	str	r3, [r0, #0]
 800d266:	f04f 30ff 	mov.w	r0, #4294967295
 800d26a:	bd38      	pop	{r3, r4, r5, pc}
 800d26c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d26e:	b112      	cbz	r2, 800d276 <_raise_r+0x1e>
 800d270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d274:	b94b      	cbnz	r3, 800d28a <_raise_r+0x32>
 800d276:	4620      	mov	r0, r4
 800d278:	f000 f830 	bl	800d2dc <_getpid_r>
 800d27c:	462a      	mov	r2, r5
 800d27e:	4601      	mov	r1, r0
 800d280:	4620      	mov	r0, r4
 800d282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d286:	f000 b817 	b.w	800d2b8 <_kill_r>
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d00a      	beq.n	800d2a4 <_raise_r+0x4c>
 800d28e:	1c59      	adds	r1, r3, #1
 800d290:	d103      	bne.n	800d29a <_raise_r+0x42>
 800d292:	2316      	movs	r3, #22
 800d294:	6003      	str	r3, [r0, #0]
 800d296:	2001      	movs	r0, #1
 800d298:	e7e7      	b.n	800d26a <_raise_r+0x12>
 800d29a:	2400      	movs	r4, #0
 800d29c:	4628      	mov	r0, r5
 800d29e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2a2:	4798      	blx	r3
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	e7e0      	b.n	800d26a <_raise_r+0x12>

0800d2a8 <raise>:
 800d2a8:	4b02      	ldr	r3, [pc, #8]	; (800d2b4 <raise+0xc>)
 800d2aa:	4601      	mov	r1, r0
 800d2ac:	6818      	ldr	r0, [r3, #0]
 800d2ae:	f7ff bfd3 	b.w	800d258 <_raise_r>
 800d2b2:	bf00      	nop
 800d2b4:	20000018 	.word	0x20000018

0800d2b8 <_kill_r>:
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	4d06      	ldr	r5, [pc, #24]	; (800d2d8 <_kill_r+0x20>)
 800d2be:	4604      	mov	r4, r0
 800d2c0:	4608      	mov	r0, r1
 800d2c2:	4611      	mov	r1, r2
 800d2c4:	602b      	str	r3, [r5, #0]
 800d2c6:	f7f4 ffd5 	bl	8002274 <_kill>
 800d2ca:	1c43      	adds	r3, r0, #1
 800d2cc:	d102      	bne.n	800d2d4 <_kill_r+0x1c>
 800d2ce:	682b      	ldr	r3, [r5, #0]
 800d2d0:	b103      	cbz	r3, 800d2d4 <_kill_r+0x1c>
 800d2d2:	6023      	str	r3, [r4, #0]
 800d2d4:	bd38      	pop	{r3, r4, r5, pc}
 800d2d6:	bf00      	nop
 800d2d8:	20004e08 	.word	0x20004e08

0800d2dc <_getpid_r>:
 800d2dc:	f7f4 bfc2 	b.w	8002264 <_getpid>

0800d2e0 <__sread>:
 800d2e0:	b510      	push	{r4, lr}
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2e8:	f000 f894 	bl	800d414 <_read_r>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	bfab      	itete	ge
 800d2f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d2f2:	89a3      	ldrhlt	r3, [r4, #12]
 800d2f4:	181b      	addge	r3, r3, r0
 800d2f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2fa:	bfac      	ite	ge
 800d2fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2fe:	81a3      	strhlt	r3, [r4, #12]
 800d300:	bd10      	pop	{r4, pc}

0800d302 <__swrite>:
 800d302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d306:	461f      	mov	r7, r3
 800d308:	898b      	ldrh	r3, [r1, #12]
 800d30a:	4605      	mov	r5, r0
 800d30c:	460c      	mov	r4, r1
 800d30e:	05db      	lsls	r3, r3, #23
 800d310:	4616      	mov	r6, r2
 800d312:	d505      	bpl.n	800d320 <__swrite+0x1e>
 800d314:	2302      	movs	r3, #2
 800d316:	2200      	movs	r2, #0
 800d318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d31c:	f000 f868 	bl	800d3f0 <_lseek_r>
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	4632      	mov	r2, r6
 800d324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d328:	4628      	mov	r0, r5
 800d32a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d32e:	81a3      	strh	r3, [r4, #12]
 800d330:	463b      	mov	r3, r7
 800d332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d336:	f000 b817 	b.w	800d368 <_write_r>

0800d33a <__sseek>:
 800d33a:	b510      	push	{r4, lr}
 800d33c:	460c      	mov	r4, r1
 800d33e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d342:	f000 f855 	bl	800d3f0 <_lseek_r>
 800d346:	1c43      	adds	r3, r0, #1
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	bf15      	itete	ne
 800d34c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d34e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d352:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d356:	81a3      	strheq	r3, [r4, #12]
 800d358:	bf18      	it	ne
 800d35a:	81a3      	strhne	r3, [r4, #12]
 800d35c:	bd10      	pop	{r4, pc}

0800d35e <__sclose>:
 800d35e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d362:	f000 b813 	b.w	800d38c <_close_r>
	...

0800d368 <_write_r>:
 800d368:	b538      	push	{r3, r4, r5, lr}
 800d36a:	4604      	mov	r4, r0
 800d36c:	4d06      	ldr	r5, [pc, #24]	; (800d388 <_write_r+0x20>)
 800d36e:	4608      	mov	r0, r1
 800d370:	4611      	mov	r1, r2
 800d372:	2200      	movs	r2, #0
 800d374:	602a      	str	r2, [r5, #0]
 800d376:	461a      	mov	r2, r3
 800d378:	f7f4 ffb3 	bl	80022e2 <_write>
 800d37c:	1c43      	adds	r3, r0, #1
 800d37e:	d102      	bne.n	800d386 <_write_r+0x1e>
 800d380:	682b      	ldr	r3, [r5, #0]
 800d382:	b103      	cbz	r3, 800d386 <_write_r+0x1e>
 800d384:	6023      	str	r3, [r4, #0]
 800d386:	bd38      	pop	{r3, r4, r5, pc}
 800d388:	20004e08 	.word	0x20004e08

0800d38c <_close_r>:
 800d38c:	b538      	push	{r3, r4, r5, lr}
 800d38e:	2300      	movs	r3, #0
 800d390:	4d05      	ldr	r5, [pc, #20]	; (800d3a8 <_close_r+0x1c>)
 800d392:	4604      	mov	r4, r0
 800d394:	4608      	mov	r0, r1
 800d396:	602b      	str	r3, [r5, #0]
 800d398:	f7f4 ffbf 	bl	800231a <_close>
 800d39c:	1c43      	adds	r3, r0, #1
 800d39e:	d102      	bne.n	800d3a6 <_close_r+0x1a>
 800d3a0:	682b      	ldr	r3, [r5, #0]
 800d3a2:	b103      	cbz	r3, 800d3a6 <_close_r+0x1a>
 800d3a4:	6023      	str	r3, [r4, #0]
 800d3a6:	bd38      	pop	{r3, r4, r5, pc}
 800d3a8:	20004e08 	.word	0x20004e08

0800d3ac <_fstat_r>:
 800d3ac:	b538      	push	{r3, r4, r5, lr}
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	4d06      	ldr	r5, [pc, #24]	; (800d3cc <_fstat_r+0x20>)
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	4608      	mov	r0, r1
 800d3b6:	4611      	mov	r1, r2
 800d3b8:	602b      	str	r3, [r5, #0]
 800d3ba:	f7f4 ffba 	bl	8002332 <_fstat>
 800d3be:	1c43      	adds	r3, r0, #1
 800d3c0:	d102      	bne.n	800d3c8 <_fstat_r+0x1c>
 800d3c2:	682b      	ldr	r3, [r5, #0]
 800d3c4:	b103      	cbz	r3, 800d3c8 <_fstat_r+0x1c>
 800d3c6:	6023      	str	r3, [r4, #0]
 800d3c8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20004e08 	.word	0x20004e08

0800d3d0 <_isatty_r>:
 800d3d0:	b538      	push	{r3, r4, r5, lr}
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	4d05      	ldr	r5, [pc, #20]	; (800d3ec <_isatty_r+0x1c>)
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	4608      	mov	r0, r1
 800d3da:	602b      	str	r3, [r5, #0]
 800d3dc:	f7f4 ffb9 	bl	8002352 <_isatty>
 800d3e0:	1c43      	adds	r3, r0, #1
 800d3e2:	d102      	bne.n	800d3ea <_isatty_r+0x1a>
 800d3e4:	682b      	ldr	r3, [r5, #0]
 800d3e6:	b103      	cbz	r3, 800d3ea <_isatty_r+0x1a>
 800d3e8:	6023      	str	r3, [r4, #0]
 800d3ea:	bd38      	pop	{r3, r4, r5, pc}
 800d3ec:	20004e08 	.word	0x20004e08

0800d3f0 <_lseek_r>:
 800d3f0:	b538      	push	{r3, r4, r5, lr}
 800d3f2:	4604      	mov	r4, r0
 800d3f4:	4d06      	ldr	r5, [pc, #24]	; (800d410 <_lseek_r+0x20>)
 800d3f6:	4608      	mov	r0, r1
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	602a      	str	r2, [r5, #0]
 800d3fe:	461a      	mov	r2, r3
 800d400:	f7f4 ffb2 	bl	8002368 <_lseek>
 800d404:	1c43      	adds	r3, r0, #1
 800d406:	d102      	bne.n	800d40e <_lseek_r+0x1e>
 800d408:	682b      	ldr	r3, [r5, #0]
 800d40a:	b103      	cbz	r3, 800d40e <_lseek_r+0x1e>
 800d40c:	6023      	str	r3, [r4, #0]
 800d40e:	bd38      	pop	{r3, r4, r5, pc}
 800d410:	20004e08 	.word	0x20004e08

0800d414 <_read_r>:
 800d414:	b538      	push	{r3, r4, r5, lr}
 800d416:	4604      	mov	r4, r0
 800d418:	4d06      	ldr	r5, [pc, #24]	; (800d434 <_read_r+0x20>)
 800d41a:	4608      	mov	r0, r1
 800d41c:	4611      	mov	r1, r2
 800d41e:	2200      	movs	r2, #0
 800d420:	602a      	str	r2, [r5, #0]
 800d422:	461a      	mov	r2, r3
 800d424:	f7f4 ff40 	bl	80022a8 <_read>
 800d428:	1c43      	adds	r3, r0, #1
 800d42a:	d102      	bne.n	800d432 <_read_r+0x1e>
 800d42c:	682b      	ldr	r3, [r5, #0]
 800d42e:	b103      	cbz	r3, 800d432 <_read_r+0x1e>
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	bd38      	pop	{r3, r4, r5, pc}
 800d434:	20004e08 	.word	0x20004e08

0800d438 <_init>:
 800d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43a:	bf00      	nop
 800d43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d43e:	bc08      	pop	{r3}
 800d440:	469e      	mov	lr, r3
 800d442:	4770      	bx	lr

0800d444 <_fini>:
 800d444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d446:	bf00      	nop
 800d448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d44a:	bc08      	pop	{r3}
 800d44c:	469e      	mov	lr, r3
 800d44e:	4770      	bx	lr
